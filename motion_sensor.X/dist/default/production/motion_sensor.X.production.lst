

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 16 18:26:56 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1526
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	idataBANK2,global,class=CODE,delta=2
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    25                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    26                           	psect	inittext,global,class=CODE,delta=2
    27                           	psect	clrtext,global,class=CODE,delta=2
    28                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    29                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    30                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    31                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    32                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text3,local,class=CODE,merge=1,delta=2
    35                           	psect	text4,local,class=CODE,merge=1,delta=2
    36                           	psect	text5,local,class=CODE,merge=1,delta=2
    37                           	psect	text6,local,class=CODE,merge=1,delta=2
    38                           	psect	text7,local,class=CODE,merge=1,delta=2
    39                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text11,local,class=CODE,merge=1,delta=2
    43                           	psect	text12,local,class=CODE,merge=1,delta=2
    44                           	psect	text13,local,class=CODE,merge=1,delta=2
    45                           	psect	text14,local,class=CODE,merge=1,delta=2
    46                           	psect	text15,local,class=CODE,merge=1,delta=2
    47                           	psect	intentry,global,class=CODE,delta=2
    48                           	psect	text17,local,class=CODE,merge=1,delta=2
    49                           	dabs	1,0x7E,2
    50  0000                     
    51                           ; Version 1.45
    52                           ; Generated 16/11/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC16F1526 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     	;# 
    86  0001                     	;# 
    87  0002                     	;# 
    88  0003                     	;# 
    89  0004                     	;# 
    90  0005                     	;# 
    91  0006                     	;# 
    92  0007                     	;# 
    93  0008                     	;# 
    94  0009                     	;# 
    95  000A                     	;# 
    96  000B                     	;# 
    97  000C                     	;# 
    98  000D                     	;# 
    99  000E                     	;# 
   100  000F                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0013                     	;# 
   105  0014                     	;# 
   106  0015                     	;# 
   107  0016                     	;# 
   108  0016                     	;# 
   109  0017                     	;# 
   110  0018                     	;# 
   111  0019                     	;# 
   112  001A                     	;# 
   113  001B                     	;# 
   114  001C                     	;# 
   115  008C                     	;# 
   116  008D                     	;# 
   117  008E                     	;# 
   118  008F                     	;# 
   119  0090                     	;# 
   120  0091                     	;# 
   121  0092                     	;# 
   122  0093                     	;# 
   123  0094                     	;# 
   124  0095                     	;# 
   125  0096                     	;# 
   126  0097                     	;# 
   127  0099                     	;# 
   128  009A                     	;# 
   129  009B                     	;# 
   130  009B                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009E                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  010F                     	;# 
   138  0110                     	;# 
   139  0116                     	;# 
   140  0117                     	;# 
   141  011D                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144  018F                     	;# 
   145  0190                     	;# 
   146  0191                     	;# 
   147  0191                     	;# 
   148  0192                     	;# 
   149  0193                     	;# 
   150  0193                     	;# 
   151  0194                     	;# 
   152  0195                     	;# 
   153  0196                     	;# 
   154  0197                     	;# 
   155  0199                     	;# 
   156  0199                     	;# 
   157  0199                     	;# 
   158  019A                     	;# 
   159  019A                     	;# 
   160  019A                     	;# 
   161  019B                     	;# 
   162  019B                     	;# 
   163  019B                     	;# 
   164  019B                     	;# 
   165  019B                     	;# 
   166  019C                     	;# 
   167  019C                     	;# 
   168  019C                     	;# 
   169  019D                     	;# 
   170  019D                     	;# 
   171  019D                     	;# 
   172  019E                     	;# 
   173  019E                     	;# 
   174  019E                     	;# 
   175  019F                     	;# 
   176  019F                     	;# 
   177  019F                     	;# 
   178  020D                     	;# 
   179  020F                     	;# 
   180  0210                     	;# 
   181  0211                     	;# 
   182  0211                     	;# 
   183  0212                     	;# 
   184  0212                     	;# 
   185  0213                     	;# 
   186  0213                     	;# 
   187  0214                     	;# 
   188  0214                     	;# 
   189  0215                     	;# 
   190  0215                     	;# 
   191  0215                     	;# 
   192  0216                     	;# 
   193  0216                     	;# 
   194  0217                     	;# 
   195  0217                     	;# 
   196  0219                     	;# 
   197  021A                     	;# 
   198  021B                     	;# 
   199  021C                     	;# 
   200  021D                     	;# 
   201  021E                     	;# 
   202  021F                     	;# 
   203  028C                     	;# 
   204  028D                     	;# 
   205  0291                     	;# 
   206  0291                     	;# 
   207  0292                     	;# 
   208  0293                     	;# 
   209  0298                     	;# 
   210  0298                     	;# 
   211  0299                     	;# 
   212  029A                     	;# 
   213  029D                     	;# 
   214  029E                     	;# 
   215  029F                     	;# 
   216  030C                     	;# 
   217  030D                     	;# 
   218  0311                     	;# 
   219  0311                     	;# 
   220  0312                     	;# 
   221  0313                     	;# 
   222  0318                     	;# 
   223  0318                     	;# 
   224  0319                     	;# 
   225  031A                     	;# 
   226  031C                     	;# 
   227  031C                     	;# 
   228  031D                     	;# 
   229  031E                     	;# 
   230  038C                     	;# 
   231  038D                     	;# 
   232  0394                     	;# 
   233  0395                     	;# 
   234  0396                     	;# 
   235  040C                     	;# 
   236  040D                     	;# 
   237  0411                     	;# 
   238  0411                     	;# 
   239  0412                     	;# 
   240  0413                     	;# 
   241  0414                     	;# 
   242  0415                     	;# 
   243  0416                     	;# 
   244  0417                     	;# 
   245  0418                     	;# 
   246  0418                     	;# 
   247  0419                     	;# 
   248  041A                     	;# 
   249  041B                     	;# 
   250  041C                     	;# 
   251  041D                     	;# 
   252  041E                     	;# 
   253  048D                     	;# 
   254  0491                     	;# 
   255  0491                     	;# 
   256  0492                     	;# 
   257  0492                     	;# 
   258  0493                     	;# 
   259  0493                     	;# 
   260  0493                     	;# 
   261  0494                     	;# 
   262  0494                     	;# 
   263  0495                     	;# 
   264  0495                     	;# 
   265  0496                     	;# 
   266  0496                     	;# 
   267  0497                     	;# 
   268  0497                     	;# 
   269  0595                     	;# 
   270  0596                     	;# 
   271  0597                     	;# 
   272  059C                     	;# 
   273  059D                     	;# 
   274  059E                     	;# 
   275  0611                     	;# 
   276  0611                     	;# 
   277  0612                     	;# 
   278  0613                     	;# 
   279  0614                     	;# 
   280  0614                     	;# 
   281  0615                     	;# 
   282  0616                     	;# 
   283  0617                     	;# 
   284  0617                     	;# 
   285  0618                     	;# 
   286  0619                     	;# 
   287  061A                     	;# 
   288  061A                     	;# 
   289  061B                     	;# 
   290  061C                     	;# 
   291  061D                     	;# 
   292  061D                     	;# 
   293  061E                     	;# 
   294  061F                     	;# 
   295  0FE4                     	;# 
   296  0FE5                     	;# 
   297  0FE6                     	;# 
   298  0FE7                     	;# 
   299  0FE8                     	;# 
   300  0FE9                     	;# 
   301  0FEA                     	;# 
   302  0FEB                     	;# 
   303  0FED                     	;# 
   304  0FEE                     	;# 
   305  0FEF                     	;# 
   306                           
   307                           	psect	idataCOMMON
   308  0002                     __pidataCOMMON:	
   309                           
   310                           ;initializer for _levelofDimmer_LSB
   311  0002  3430               	retlw	48
   312                           
   313                           ;initializer for _levelofDimmer_MSB
   314  0003  3430               	retlw	48
   315                           
   316                           	psect	idataBANK0
   317  0FBE                     __pidataBANK0:	
   318                           
   319                           ;initializer for _parentalLockBuffer
   320  0FBE  3430               	retlw	48
   321  0FBF  3430               	retlw	48
   322  0FC0  3430               	retlw	48
   323  0FC1  3430               	retlw	48
   324  0FC2  3430               	retlw	48
   325                           
   326                           	psect	idataBANK1
   327  0688                     __pidataBANK1:	
   328                           
   329                           ;initializer for _tempReceivedMotionDataBuffer
   330  0688  3423               	retlw	35
   331  0689  3400               	retlw	0
   332  068A  3400               	retlw	0
   333  068B  3400               	retlw	0
   334  068C  3400               	retlw	0
   335  068D  3400               	retlw	0
   336  068E  3400               	retlw	0
   337  068F  3400               	retlw	0
   338  0690  3400               	retlw	0
   339  0691  3400               	retlw	0
   340  0692  3400               	retlw	0
   341  0693  3400               	retlw	0
   342  0694  3400               	retlw	0
   343  0695  3400               	retlw	0
   344  0696  3400               	retlw	0
   345  0697  3400               	retlw	0
   346  0698  3400               	retlw	0
   347  0699  3400               	retlw	0
   348                           
   349                           ;initializer for _mainReceivedDataBuffer
   350  069A  3423               	retlw	35
   351  069B  3400               	retlw	0
   352  069C  3400               	retlw	0
   353  069D  3400               	retlw	0
   354  069E  3400               	retlw	0
   355  069F  3400               	retlw	0
   356  06A0  3400               	retlw	0
   357  06A1  3400               	retlw	0
   358  06A2  3400               	retlw	0
   359  06A3  3400               	retlw	0
   360  06A4  3400               	retlw	0
   361  06A5  3400               	retlw	0
   362  06A6  3400               	retlw	0
   363  06A7  3400               	retlw	0
   364  06A8  3400               	retlw	0
   365  06A9  3400               	retlw	0
   366  06AA  3400               	retlw	0
   367  06AB  3400               	retlw	0
   368                           
   369                           ;initializer for _tempReceivedDataBuffer
   370  06AC  3423               	retlw	35
   371  06AD  3400               	retlw	0
   372  06AE  3400               	retlw	0
   373  06AF  3400               	retlw	0
   374  06B0  3400               	retlw	0
   375  06B1  3400               	retlw	0
   376  06B2  3400               	retlw	0
   377  06B3  3400               	retlw	0
   378  06B4  3400               	retlw	0
   379  06B5  3400               	retlw	0
   380                           
   381                           ;initializer for applianceControl@F3838
   382  06B6  3423               	retlw	35
   383  06B7  3400               	retlw	0
   384                           
   385                           ;initializer for applianceControl@F3836
   386  06B8  3423               	retlw	35
   387  06B9  3400               	retlw	0
   388                           
   389                           ;initializer for _ErrorNames
   390  06BA  3423               	retlw	35
   391  06BB  3423               	retlw	35
   392  06BC  3423               	retlw	35
   393  06BD  3423               	retlw	35
   394  06BE  3400               	retlw	0
   395                           
   396                           	psect	idataBANK2
   397  0714                     __pidataBANK2:	
   398                           
   399                           ;initializer for _currentStateBuffer
   400  0714  3423               	retlw	35
   401  0715  3400               	retlw	0
   402  0716  3400               	retlw	0
   403  0717  3400               	retlw	0
   404  0718  3400               	retlw	0
   405  0719  3400               	retlw	0
   406  071A  3400               	retlw	0
   407  071B  3400               	retlw	0
   408  071C  3400               	retlw	0
   409  071D  3400               	retlw	0
   410  071E  3400               	retlw	0
   411  071F  3400               	retlw	0
   412  0720  3400               	retlw	0
   413  0721  3400               	retlw	0
   414  0722  3400               	retlw	0
   415  0723  3400               	retlw	0
   416  0724  3400               	retlw	0
   417  0725  3400               	retlw	0
   418  0726  3400               	retlw	0
   419  0727  3400               	retlw	0
   420  0728  3400               	retlw	0
   421  0729  3400               	retlw	0
   422  072A  3400               	retlw	0
   423  072B  3400               	retlw	0
   424  072C  3400               	retlw	0
   425  072D  3400               	retlw	0
   426  072E  3400               	retlw	0
   427  072F  3400               	retlw	0
   428  0730  3400               	retlw	0
   429  0731  3400               	retlw	0
   430  000C                     _PORTAbits	set	12
   431  005E                     _PEIE	set	94
   432  005F                     _GIE	set	95
   433  008D                     _RC1IF	set	141
   434  0091                     _PIE1bits	set	145
   435  008E                     _TRISCbits	set	142
   436  008C                     _TRISAbits	set	140
   437  018C                     _ANSELA	set	396
   438  018D                     _ANSELB	set	397
   439  018F                     _ANSELD	set	399
   440  0190                     _ANSELE	set	400
   441  019E                     _TX1STAbits	set	414
   442  019C                     _SP1BRGH	set	412
   443  019B                     _SP1BRGL	set	411
   444  019E                     _TX1STA	set	414
   445  019D                     _RC1STA	set	413
   446  019F                     _BAUD1CON	set	415
   447  019A                     _TX1REG	set	410
   448  0199                     _RC1REG	set	409
   449  019D                     _RC1STAbits	set	413
   450  020D                     _WPUB	set	525
   451  020F                     _WPUD	set	527
   452  0210                     _WPUE	set	528
   453  028C                     _PORTFbits	set	652
   454  030C                     _TRISFbits	set	780
   455  040C                     _ANSELF	set	1036
   456  040D                     _ANSELG	set	1037
   457  048D                     _WPUG	set	1165
   458                           
   459                           	psect	stringtext1
   460  1000                     __pstringtext1:	
   461  1000                     STR_5:	
   462  1000  3441               	retlw	65	;'A'
   463  1001  3443               	retlw	67	;'C'
   464  1002  3454               	retlw	84	;'T'
   465  1003  3441               	retlw	65	;'A'
   466  1004  3443               	retlw	67	;'C'
   467  1005  344B               	retlw	75	;'K'
   468  1006  3400               	retlw	0
   469                           
   470                           	psect	stringtext2
   471  1007                     __pstringtext2:	
   472  1007                     STR_13:	
   473  1007  3431               	retlw	49	;'1'
   474  1008  3430               	retlw	48	;'0'
   475  1009  3430               	retlw	48	;'0'
   476  100A  3430               	retlw	48	;'0'
   477  100B  347C               	retlw	124	;'|'
   478  100C  3400               	retlw	0
   479                           
   480                           	psect	stringtext3
   481  100D                     __pstringtext3:	
   482  100D                     STR_18:	
   483  100D  3452               	retlw	82	;'R'
   484  100E  3445               	retlw	69	;'E'
   485  100F  3441               	retlw	65	;'A'
   486  1010  3444               	retlw	68	;'D'
   487  1011  3400               	retlw	0
   488                           
   489                           	psect	stringtext4
   490  1012                     __pstringtext4:	
   491  1012                     STR_1:	
   492  1012  344D               	retlw	77	;'M'
   493  1013  3454               	retlw	84	;'T'
   494  1014  3400               	retlw	0
   495                           
   496                           	psect	stringtext5
   497  1015                     __pstringtext5:	
   498  1015                     STR_2:	
   499  1015  342E               	retlw	46	;'.'
   500  1016  3400               	retlw	0
   501                           
   502                           	psect	stringtext6
   503  1017                     __pstringtext6:	
   504  1017                     STR_20:	
   505  1017  3430               	retlw	48	;'0'
   506  1018  3400               	retlw	0
   507                           
   508                           	psect	stringtext7
   509  1019                     __pstringtext7:	
   510  1019                     STR_7:	
   511  1019  3431               	retlw	49	;'1'
   512  101A  3400               	retlw	0
   513                           
   514                           	psect	stringtext8
   515  101B                     __pstringtext8:	
   516  101B                     STR_3:	
   517  101B  3433               	retlw	51	;'3'
   518  101C  3400               	retlw	0
   519                           
   520                           	psect	stringtext9
   521  101D                     __pstringtext9:	
   522  101D                     STR_32:	
   523  101D  3434               	retlw	52	;'4'
   524  101E  3400               	retlw	0
   525                           
   526                           	psect	stringtext10
   527  0000                     __pstringtext10:	
   528  1015                     
   529                           ; #config settings
   530  0000                     
   531                           	psect	cinit
   532  0085                     start_initialization:	
   533  0085                     __initialization:	
   534                           
   535                           ; Initialize objects allocated to COMMON
   536  0085  3180  2002  3180   	fcall	__pidataCOMMON	;fetch initializer
   537  0088  00FA               	movwf	__pdataCOMMON& (0+127)
   538  0089  3180  2003  3180   	fcall	__pidataCOMMON+1	;fetch initializer
   539  008C  00FB               	movwf	(__pdataCOMMON+1)& (0+127)
   540                           
   541                           ; Initialize objects allocated to BANK0
   542  008D  30BE               	movlw	low __pidataBANK0
   543  008E  0084               	movwf	4
   544  008F  308F               	movlw	(high __pidataBANK0)| (0+128)
   545  0090  0085               	movwf	5
   546  0091  3069               	movlw	low __pdataBANK0
   547  0092  0086               	movwf	6
   548  0093  3000               	movlw	high __pdataBANK0
   549  0094  0087               	movwf	7
   550  0095  3005               	movlw	5
   551  0096  318F  27C9  3180   	fcall	init_ram
   552                           
   553                           ; Initialize objects allocated to BANK1
   554  0099  3088               	movlw	low __pidataBANK1
   555  009A  0084               	movwf	4
   556  009B  3086               	movlw	(high __pidataBANK1)| (0+128)
   557  009C  0085               	movwf	5
   558  009D  30A0               	movlw	low __pdataBANK1
   559  009E  0086               	movwf	6
   560  009F  3000               	movlw	high __pdataBANK1
   561  00A0  0087               	movwf	7
   562  00A1  3037               	movlw	55
   563  00A2  318F  27C9  3180   	fcall	init_ram
   564                           
   565                           ; Initialize objects allocated to BANK2
   566  00A5  3014               	movlw	low __pidataBANK2
   567  00A6  0084               	movwf	4
   568  00A7  3087               	movlw	(high __pidataBANK2)| (0+128)
   569  00A8  0085               	movwf	5
   570  00A9  3020               	movlw	low __pdataBANK2
   571  00AA  0086               	movwf	6
   572  00AB  3001               	movlw	high __pdataBANK2
   573  00AC  0087               	movwf	7
   574  00AD  301E               	movlw	30
   575  00AE  318F  27C9  3180   	fcall	init_ram
   576                           
   577                           ; Clear objects allocated to COMMON
   578  00B1  01F6               	clrf	__pbssCOMMON& (0+127)
   579  00B2  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   580  00B3  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   581  00B4  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   582                           
   583                           ; Clear objects allocated to BANK0
   584  00B5  3049               	movlw	low __pbssBANK0
   585  00B6  0084               	movwf	4
   586  00B7  3000               	movlw	high __pbssBANK0
   587  00B8  0085               	movwf	5
   588  00B9  3020               	movlw	32
   589  00BA  318F  27C3  3180   	fcall	clear_ram0
   590                           
   591                           ; Clear objects allocated to BANK1
   592  00BD  30D7               	movlw	low __pbssBANK1
   593  00BE  0084               	movwf	4
   594  00BF  3000               	movlw	high __pbssBANK1
   595  00C0  0085               	movwf	5
   596  00C1  3008               	movlw	8
   597  00C2  318F  27C3         	fcall	clear_ram0
   598  00C4                     end_of_initialization:	
   599                           ;End of C runtime variable initialization code
   600                           
   601  00C4                     __end_of__initialization:	
   602  00C4  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   603  00C5  0020               	movlb	0
   604  00C6  3180  28C8         	ljmp	_main	;jump to C main() function
   605                           
   606                           	psect	bssCOMMON
   607  0076                     __pbssCOMMON:	
   608  0076                     _mainDataReceived:	
   609  0076                     	ds	2
   610  0078                     _mainReceivedDataPosition:	
   611  0078                     	ds	2
   612                           
   613                           	psect	dataCOMMON
   614  007A                     __pdataCOMMON:	
   615  007A                     _levelofDimmer_LSB:	
   616  007A                     	ds	1
   617  007B                     _levelofDimmer_MSB:	
   618  007B                     	ds	1
   619                           
   620                           	psect	bssBANK0
   621  0049                     __pbssBANK0:	
   622  0049                     _M4:	
   623  0049                     	ds	2
   624  004B                     _M3:	
   625  004B                     	ds	2
   626  004D                     _M2:	
   627  004D                     	ds	2
   628  004F                     _M1:	
   629  004F                     	ds	2
   630  0051                     _sendFinalBufferToGAteway:	
   631  0051                     	ds	24
   632                           
   633                           	psect	dataBANK0
   634  0069                     __pdataBANK0:	
   635  0069                     _parentalLockBuffer:	
   636  0069                     	ds	5
   637                           
   638                           	psect	bssBANK1
   639  00D7                     __pbssBANK1:	
   640  00D7                     _start_PWM_Generation_in_ISR_FLAG:	
   641  00D7                     	ds	2
   642  00D9                     _MotionDataFlag:	
   643  00D9                     	ds	2
   644  00DB                     _MotionDatareceived:	
   645  00DB                     	ds	2
   646  00DD                     _M5:	
   647  00DD                     	ds	2
   648                           
   649                           	psect	dataBANK1
   650  00A0                     __pdataBANK1:	
   651  00A0                     _tempReceivedMotionDataBuffer:	
   652  00A0                     	ds	18
   653  00B2                     _mainReceivedDataBuffer:	
   654  00B2                     	ds	18
   655  00C4                     _tempReceivedDataBuffer:	
   656  00C4                     	ds	10
   657  00CE                     applianceControl@F3838:	
   658  00CE                     	ds	2
   659  00D0                     applianceControl@F3836:	
   660  00D0                     	ds	2
   661  00D2                     _ErrorNames:	
   662  00D2                     	ds	5
   663                           
   664                           	psect	dataBANK2
   665  0120                     __pdataBANK2:	
   666  0120                     _currentStateBuffer:	
   667  0120                     	ds	30
   668                           
   669                           	psect	inittext
   670  0FC9                     init_ram:	
   671  0FC9  00FE               	movwf	126
   672  0FCA                     initloop:	
   673  0FCA  0012               	moviw fsr0++
   674  0FCB  001E               	movwi fsr1++
   675  0FCC  0BFE               	decfsz	126,f
   676  0FCD  2FCA               	goto	initloop
   677  0FCE  3400               	retlw	0
   678                           
   679                           	psect	clrtext
   680  0FC3                     clear_ram0:	
   681                           ;	Called with FSR0 containing the base address, and
   682                           ;	WREG with the size to clear
   683                           
   684  0FC3  0064               	clrwdt	;clear the watchdog before getting into this loop
   685  0FC4                     clrloop0:	
   686  0FC4  0180               	clrf	0	;clear RAM location pointed to by FSR
   687  0FC5  3101               	addfsr 0,1
   688  0FC6  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   689  0FC7  2FC4               	goto	clrloop0	;have we reached the end yet?
   690  0FC8  3400               	retlw	0	;all done for this memory range, return
   691                           
   692                           	psect	cstackBANK1
   693  00DF                     __pcstackBANK1:	
   694  00DF                     main@dataBufferCounter:	
   695                           
   696                           ; 2 bytes @ 0x0
   697  00DF                     	ds	2
   698  00E1                     main@man:	
   699                           
   700                           ; 2 bytes @ 0x2
   701  00E1                     	ds	2
   702                           
   703                           	psect	cstackCOMMON
   704  0070                     __pcstackCOMMON:	
   705  0070                     ?_isdigit:	
   706  0070                     ?_errorsISR:	
   707                           ; 1 bit 
   708                           
   709  0070                     ??_errorsISR:	
   710                           ; 1 bytes @ 0x0
   711                           
   712  0070                     ?_GPIO_pin_Initialize:	
   713                           ; 1 bytes @ 0x0
   714                           
   715  0070                     ?_allPeripheralInit:	
   716                           ; 1 bytes @ 0x0
   717                           
   718  0070                     ?_copyReceivedDataBuffer:	
   719                           ; 1 bytes @ 0x0
   720                           
   721  0070                     ?_sendAcknowledgmentTOMotion:	
   722                           ; 1 bytes @ 0x0
   723                           
   724  0070                     ?_errorsMain:	
   725                           ; 1 bytes @ 0x0
   726                           
   727  0070                     ?_sendAcknowledgment:	
   728                           ; 1 bytes @ 0x0
   729                           
   730  0070                     ?_clearAllPorts:	
   731                           ; 1 bytes @ 0x0
   732                           
   733  0070                     ?_pinINIT_extra:	
   734                           ; 1 bytes @ 0x0
   735                           
   736  0070                     ?_EUSART_Initialize:	
   737                           ; 1 bytes @ 0x0
   738                           
   739  0070                     ?_isr:	
   740                           ; 1 bytes @ 0x0
   741                           
   742  0070                     ?_main:	
   743                           ; 1 bytes @ 0x0
   744                           
   745                           
   746                           ; 2 bytes @ 0x0
   747  0070                     	ds	1
   748  0071                     errorsISR@Tx_count:	
   749                           
   750                           ; 2 bytes @ 0x1
   751  0071                     	ds	2
   752  0073                     errorsISR@errNum:	
   753                           
   754                           ; 1 bytes @ 0x3
   755  0073                     	ds	1
   756  0074                     ??_isr:	
   757                           
   758                           ; 1 bytes @ 0x4
   759  0074                     	ds	2
   760                           
   761                           	psect	cstackBANK0
   762  0020                     __pcstackBANK0:	
   763  0020                     ??_GPIO_pin_Initialize:	
   764  0020                     ??_allPeripheralInit:	
   765                           ; 1 bytes @ 0x0
   766                           
   767  0020                     ??_copyReceivedDataBuffer:	
   768                           ; 1 bytes @ 0x0
   769                           
   770  0020                     ?_strcpy:	
   771                           ; 1 bytes @ 0x0
   772                           
   773  0020                     ?_strcat:	
   774                           ; 1 bytes @ 0x0
   775                           
   776  0020                     ??_sendAcknowledgmentTOMotion:	
   777                           ; 1 bytes @ 0x0
   778                           
   779  0020                     ??_errorsMain:	
   780                           ; 1 bytes @ 0x0
   781                           
   782  0020                     ??_sendAcknowledgment:	
   783                           ; 1 bytes @ 0x0
   784                           
   785  0020                     ??_clearAllPorts:	
   786                           ; 1 bytes @ 0x0
   787                           
   788  0020                     ??_pinINIT_extra:	
   789                           ; 1 bytes @ 0x0
   790                           
   791  0020                     ??_EUSART_Initialize:	
   792                           ; 1 bytes @ 0x0
   793                           
   794  0020                     ??_isdigit:	
   795                           ; 1 bytes @ 0x0
   796                           
   797  0020                     ?___wmul:	
   798                           ; 1 bytes @ 0x0
   799                           
   800  0020                     _isdigit$675:	
   801                           ; 2 bytes @ 0x0
   802                           
   803  0020                     ___wmul@multiplier:	
   804                           ; 1 bytes @ 0x0
   805                           
   806  0020                     strcat@from:	
   807                           ; 2 bytes @ 0x0
   808                           
   809  0020                     strcpy@from:	
   810                           ; 2 bytes @ 0x0
   811                           
   812                           
   813                           ; 2 bytes @ 0x0
   814  0020                     	ds	1
   815  0021                     isdigit@c:	
   816  0021                     errorsMain@Tx_count:	
   817                           ; 1 bytes @ 0x1
   818                           
   819  0021                     sendAcknowledgment@Tx_count:	
   820                           ; 2 bytes @ 0x1
   821                           
   822  0021                     sendAcknowledgmentTOMotion@Tx_count:	
   823                           ; 2 bytes @ 0x1
   824                           
   825  0021                     copyReceivedDataBuffer@dataBufferCounter:	
   826                           ; 2 bytes @ 0x1
   827                           
   828                           
   829                           ; 2 bytes @ 0x1
   830  0021                     	ds	1
   831  0022                     ??_strcpy:	
   832  0022                     ??_strcat:	
   833                           ; 1 bytes @ 0x2
   834                           
   835  0022                     ___wmul@multiplicand:	
   836                           ; 1 bytes @ 0x2
   837                           
   838                           
   839                           ; 2 bytes @ 0x2
   840  0022                     	ds	1
   841  0023                     errorsMain@errNum:	
   842  0023                     sendAcknowledgment@currentStateBuffer:	
   843                           ; 1 bytes @ 0x3
   844                           
   845  0023                     sendAcknowledgmentTOMotion@currentStateBufferMotion:	
   846                           ; 1 bytes @ 0x3
   847                           
   848  0023                     strcat@cp:	
   849                           ; 1 bytes @ 0x3
   850                           
   851  0023                     strcpy@cp:	
   852                           ; 1 bytes @ 0x3
   853                           
   854                           
   855                           ; 1 bytes @ 0x3
   856  0023                     	ds	1
   857  0024                     ??___wmul:	
   858  0024                     strcat@to:	
   859                           ; 1 bytes @ 0x4
   860                           
   861  0024                     strcpy@to:	
   862                           ; 1 bytes @ 0x4
   863                           
   864  0024                     ___wmul@product:	
   865                           ; 1 bytes @ 0x4
   866                           
   867                           
   868                           ; 2 bytes @ 0x4
   869  0024                     	ds	2
   870  0026                     ?_atoi:	
   871                           
   872                           ; 2 bytes @ 0x6
   873  0026                     	ds	2
   874  0028                     ??_atoi:	
   875                           
   876                           ; 1 bytes @ 0x8
   877  0028                     	ds	2
   878  002A                     atoi@sign:	
   879                           
   880                           ; 1 bytes @ 0xA
   881  002A                     	ds	1
   882  002B                     atoi@a:	
   883                           
   884                           ; 2 bytes @ 0xB
   885  002B                     	ds	2
   886  002D                     atoi@s:	
   887                           
   888                           ; 1 bytes @ 0xD
   889  002D                     	ds	1
   890  002E                     ?_applianceControl:	
   891  002E                     applianceControl@charSwitchLSB:	
   892                           ; 1 bytes @ 0xE
   893                           
   894                           
   895                           ; 1 bytes @ 0xE
   896  002E                     	ds	1
   897  002F                     applianceControl@charSwitchSTATE:	
   898                           
   899                           ; 1 bytes @ 0xF
   900  002F                     	ds	1
   901  0030                     applianceControl@chDimmerSpeedMSB:	
   902                           
   903                           ; 1 bytes @ 0x10
   904  0030                     	ds	1
   905  0031                     applianceControl@chDimmerSpeedLSB:	
   906                           
   907                           ; 1 bytes @ 0x11
   908  0031                     	ds	1
   909  0032                     applianceControl@charParentalControl:	
   910                           
   911                           ; 1 bytes @ 0x12
   912  0032                     	ds	1
   913  0033                     applianceControl@charFinalFrameState:	
   914                           
   915                           ; 1 bytes @ 0x13
   916  0033                     	ds	1
   917  0034                     ??_applianceControl:	
   918                           
   919                           ; 1 bytes @ 0x14
   920  0034                     	ds	2
   921  0036                     applianceControl@integerSpeed:	
   922                           
   923                           ; 2 bytes @ 0x16
   924  0036                     	ds	2
   925  0038                     applianceControl@charSwitchMSB:	
   926                           
   927                           ; 1 bytes @ 0x18
   928  0038                     	ds	1
   929  0039                     applianceControl@switchNumberStringBuffer:	
   930                           
   931                           ; 2 bytes @ 0x19
   932  0039                     	ds	2
   933  003B                     applianceControl@dimmerSpeedStringBuffer:	
   934                           
   935                           ; 2 bytes @ 0x1B
   936  003B                     	ds	2
   937  003D                     applianceControl@integerSwitchNumber:	
   938                           
   939                           ; 2 bytes @ 0x1D
   940  003D                     	ds	2
   941  003F                     applianceControl@integerSwitchState:	
   942                           
   943                           ; 2 bytes @ 0x1F
   944  003F                     	ds	2
   945  0041                     applianceControl@currentStateBufferPositions:	
   946                           
   947                           ; 2 bytes @ 0x21
   948  0041                     	ds	2
   949  0043                     ??_main:	
   950                           
   951                           ; 1 bytes @ 0x23
   952  0043                     	ds	6
   953                           
   954                           	psect	maintext
   955  00C8                     __pmaintext:	
   956 ;;
   957 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
   958 ;;
   959 ;; *************** function _main *****************
   960 ;; Defined at:
   961 ;;		line 204 in file "motion_control.c"
   962 ;; Parameters:    Size  Location     Type
   963 ;;		None
   964 ;; Auto vars:     Size  Location     Type
   965 ;;  dataBufferCo    2    0[BANK1 ] int 
   966 ;;  man             2    2[BANK1 ] int 
   967 ;; Return value:  Size  Location     Type
   968 ;;                  2  141[None  ] int 
   969 ;; Registers used:
   970 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   971 ;; Tracked objects:
   972 ;;		On entry : B1F/0
   973 ;;		On exit  : 0/0
   974 ;;		Unchanged: 0/0
   975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
   976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
   977 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0
   978 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0
   979 ;;      Totals:         0       6       4       0       0       0       0       0       0       0       0
   980 ;;Total ram usage:       10 bytes
   981 ;; Hardware stack levels required when called:    5
   982 ;; This function calls:
   983 ;;		_GPIO_pin_Initialize
   984 ;;		_allPeripheralInit
   985 ;;		_applianceControl
   986 ;;		_copyReceivedDataBuffer
   987 ;;		_errorsMain
   988 ;;		_sendAcknowledgmentTOMotion
   989 ;;		_strcat
   990 ;;		_strcpy
   991 ;; This function is called by:
   992 ;;		Startup code after reset
   993 ;; This function uses a non-reentrant model
   994 ;;
   995                           
   996                           
   997                           ;psect for function _main
   998  00C8                     _main:	
   999                           
  1000                           ;motion_control.c: 205: _delay((unsigned long)((2000)*(16000000/4000.0)));
  1001                           
  1002                           ;incstack = 0
  1003                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1004  00C8  3029               	movlw	41
  1005  00C9  0020               	movlb	0	; select bank0
  1006  00CA  00C4               	movwf	??_main+1
  1007  00CB  3096               	movlw	150
  1008  00CC  00C3               	movwf	??_main
  1009  00CD  307F               	movlw	127
  1010  00CE                     u2677:	
  1011  00CE  0B89               	decfsz	9,f
  1012  00CF  28CE               	goto	u2677
  1013  00D0  0BC3               	decfsz	??_main,f
  1014  00D1  28CE               	goto	u2677
  1015  00D2  0BC4               	decfsz	??_main+1,f
  1016  00D3  28CE               	goto	u2677
  1017                           
  1018                           ;motion_control.c: 206: M1=1; M2=1; M3=1; M4=1; M5=1;
  1019  00D4  3001               	movlw	1
  1020  00D5  0020               	movlb	0	; select bank0
  1021  00D6  00CF               	movwf	_M1
  1022  00D7  3000               	movlw	0
  1023  00D8  00D0               	movwf	_M1+1
  1024  00D9  3001               	movlw	1
  1025  00DA  00CD               	movwf	_M2
  1026  00DB  3000               	movlw	0
  1027  00DC  00CE               	movwf	_M2+1
  1028  00DD  3001               	movlw	1
  1029  00DE  00CB               	movwf	_M3
  1030  00DF  3000               	movlw	0
  1031  00E0  00CC               	movwf	_M3+1
  1032  00E1  3001               	movlw	1
  1033  00E2  00C9               	movwf	_M4
  1034  00E3  3000               	movlw	0
  1035  00E4  00CA               	movwf	_M4+1
  1036  00E5  3001               	movlw	1
  1037  00E6  0021               	movlb	1	; select bank1
  1038  00E7  00DD               	movwf	_M5^(0+128)
  1039  00E8  3000               	movlw	0
  1040  00E9  00DE               	movwf	(_M5^(0+128)+1)
  1041                           
  1042                           ;motion_control.c: 209: GPIO_pin_Initialize();
  1043  00EA  318F  27EB  3180   	fcall	_GPIO_pin_Initialize
  1044                           
  1045                           ;motion_control.c: 210: allPeripheralInit();
  1046  00ED  3187  27FD  3180   	fcall	_allPeripheralInit
  1047  00F0                     l2063:	
  1048                           ;motion_control.c: 212: while(1){
  1049                           
  1050                           
  1051                           ;motion_control.c: 213: if(mainDataReceived==1){
  1052  00F0  0376               	decf	_mainDataReceived,w
  1053  00F1  0477               	iorwf	_mainDataReceived+1,w
  1054  00F2  1D03               	btfss	3,2
  1055  00F3  2A06               	goto	l2107
  1056                           
  1057                           ;motion_control.c: 214: mainDataReceived=0;
  1058  00F4  01F6               	clrf	_mainDataReceived
  1059  00F5  01F7               	clrf	_mainDataReceived+1
  1060                           
  1061                           ;motion_control.c: 215: if(mainReceivedDataBuffer[0]=='%' && mainReceivedDataBuffer[1]==
      +                          '%' && mainReceivedDataBuffer[14]=='@' && mainReceivedDataBuffer[15]=='@'){
  1062  00F6  3025               	movlw	37
  1063  00F7  0021               	movlb	1	; select bank1
  1064  00F8  0632               	xorwf	_mainReceivedDataBuffer^(0+128),w
  1065  00F9  1D03               	btfss	3,2
  1066  00FA  2934               	goto	l2079
  1067  00FB  3025               	movlw	37
  1068  00FC  0633               	xorwf	(_mainReceivedDataBuffer^(0+128)+1),w
  1069  00FD  1D03               	btfss	3,2
  1070  00FE  2934               	goto	l2079
  1071  00FF  3040               	movlw	64
  1072  0100  0640               	xorwf	(_mainReceivedDataBuffer^(0+128)+14),w
  1073  0101  1D03               	btfss	3,2
  1074  0102  2934               	goto	l2079
  1075  0103  3040               	movlw	64
  1076  0104  0641               	xorwf	(_mainReceivedDataBuffer^(0+128)+15),w
  1077  0105  1D03               	btfss	3,2
  1078  0106  2934               	goto	l2079
  1079                           
  1080                           ;motion_control.c: 216: copyReceivedDataBuffer();
  1081  0107  3186  26BF  3180   	fcall	_copyReceivedDataBuffer
  1082                           
  1083                           ;motion_control.c: 218: applianceControl(tempReceivedDataBuffer[0],
  1084                           ;motion_control.c: 219: tempReceivedDataBuffer[1],
  1085                           ;motion_control.c: 220: tempReceivedDataBuffer[2],
  1086                           ;motion_control.c: 221: tempReceivedDataBuffer[3],
  1087                           ;motion_control.c: 222: tempReceivedDataBuffer[4],
  1088                           ;motion_control.c: 223: tempReceivedDataBuffer[5],
  1089                           ;motion_control.c: 224: tempReceivedDataBuffer[6]);
  1090  010A  0021               	movlb	1	; select bank1
  1091  010B  0845               	movf	(_tempReceivedDataBuffer^(0+128)+1),w
  1092  010C  0020               	movlb	0	; select bank0
  1093  010D  00C3               	movwf	??_main
  1094  010E  0843               	movf	??_main,w
  1095  010F  00AE               	movwf	applianceControl@charSwitchLSB
  1096  0110  0021               	movlb	1	; select bank1
  1097  0111  0846               	movf	(_tempReceivedDataBuffer^(0+128)+2),w
  1098  0112  0020               	movlb	0	; select bank0
  1099  0113  00C4               	movwf	??_main+1
  1100  0114  0844               	movf	??_main+1,w
  1101  0115  00AF               	movwf	applianceControl@charSwitchSTATE
  1102  0116  0021               	movlb	1	; select bank1
  1103  0117  0847               	movf	(_tempReceivedDataBuffer^(0+128)+3),w
  1104  0118  0020               	movlb	0	; select bank0
  1105  0119  00C5               	movwf	??_main+2
  1106  011A  0845               	movf	??_main+2,w
  1107  011B  00B0               	movwf	applianceControl@chDimmerSpeedMSB
  1108  011C  0021               	movlb	1	; select bank1
  1109  011D  0848               	movf	(_tempReceivedDataBuffer^(0+128)+4),w
  1110  011E  0020               	movlb	0	; select bank0
  1111  011F  00C6               	movwf	??_main+3
  1112  0120  0846               	movf	??_main+3,w
  1113  0121  00B1               	movwf	applianceControl@chDimmerSpeedLSB
  1114  0122  0021               	movlb	1	; select bank1
  1115  0123  0849               	movf	(_tempReceivedDataBuffer^(0+128)+5),w
  1116  0124  0020               	movlb	0	; select bank0
  1117  0125  00C7               	movwf	??_main+4
  1118  0126  0847               	movf	??_main+4,w
  1119  0127  00B2               	movwf	applianceControl@charParentalControl
  1120  0128  0021               	movlb	1	; select bank1
  1121  0129  084A               	movf	(_tempReceivedDataBuffer^(0+128)+6),w
  1122  012A  0020               	movlb	0	; select bank0
  1123  012B  00C8               	movwf	??_main+5
  1124  012C  0848               	movf	??_main+5,w
  1125  012D  00B3               	movwf	applianceControl@charFinalFrameState
  1126  012E  0021               	movlb	1	; select bank1
  1127  012F  0844               	movf	_tempReceivedDataBuffer^(0+128),w
  1128  0130  3185  2554  3180   	fcall	_applianceControl
  1129                           
  1130                           ;motion_control.c: 226: }
  1131  0133  2A06               	goto	l2107
  1132  0134                     l2079:	
  1133                           
  1134                           ;motion_control.c: 227: else if(mainReceivedDataBuffer[0]=='M' && mainReceivedDataBuffer
      +                          [1]=='T'){
  1135  0134  304D               	movlw	77
  1136  0135  0021               	movlb	1	; select bank1
  1137  0136  0632               	xorwf	_mainReceivedDataBuffer^(0+128),w
  1138  0137  1D03               	btfss	3,2
  1139  0138  29B7               	goto	l2087
  1140  0139  3054               	movlw	84
  1141  013A  0633               	xorwf	(_mainReceivedDataBuffer^(0+128)+1),w
  1142  013B  1D03               	btfss	3,2
  1143  013C  29B7               	goto	l2087
  1144                           
  1145                           ;motion_control.c: 228: strcpy(sendFinalBufferToGAteway,"MT");
  1146  013D  3012               	movlw	low (STR_1| (0+32768))
  1147  013E  0020               	movlb	0	; select bank0
  1148  013F  00A0               	movwf	strcpy@from
  1149  0140  3090               	movlw	high (STR_1| (0+32768))
  1150  0141  00A1               	movwf	strcpy@from+1
  1151  0142  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1152  0143  3187  2789  3180   	fcall	_strcpy
  1153                           
  1154                           ;motion_control.c: 229: strcat(sendFinalBufferToGAteway,".");
  1155  0146  3015               	movlw	low (STR_2| (0+32768))
  1156  0147  0020               	movlb	0	; select bank0
  1157  0148  00A0               	movwf	strcat@from
  1158  0149  3090               	movlw	high (STR_2| (0+32768))
  1159  014A  00A1               	movwf	strcat@from+1
  1160  014B  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1161  014C  3186  26EE  3180   	fcall	_strcat
  1162                           
  1163                           ;motion_control.c: 230: strcat(sendFinalBufferToGAteway,"3");
  1164  014F  301B               	movlw	low (STR_3| (0+32768))
  1165  0150  0020               	movlb	0	; select bank0
  1166  0151  00A0               	movwf	strcat@from
  1167  0152  3090               	movlw	high (STR_3| (0+32768))
  1168  0153  00A1               	movwf	strcat@from+1
  1169  0154  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1170  0155  3186  26EE  3180   	fcall	_strcat
  1171                           
  1172                           ;motion_control.c: 231: strcat(sendFinalBufferToGAteway,".");
  1173  0158  3015               	movlw	low (STR_2| (0+32768))
  1174  0159  0020               	movlb	0	; select bank0
  1175  015A  00A0               	movwf	strcat@from
  1176  015B  3090               	movlw	high (STR_2| (0+32768))
  1177  015C  00A1               	movwf	strcat@from+1
  1178  015D  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1179  015E  3186  26EE  3180   	fcall	_strcat
  1180                           
  1181                           ;motion_control.c: 232: strcat(sendFinalBufferToGAteway,"ACTACK");
  1182  0161  3000               	movlw	low (STR_5| (0+32768))
  1183  0162  0020               	movlb	0	; select bank0
  1184  0163  00A0               	movwf	strcat@from
  1185  0164  3090               	movlw	high (STR_5| (0+32768))
  1186  0165  00A1               	movwf	strcat@from+1
  1187  0166  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1188  0167  3186  26EE  3180   	fcall	_strcat
  1189                           
  1190                           ;motion_control.c: 233: strcat(sendFinalBufferToGAteway,".");
  1191  016A  3015               	movlw	low (STR_2| (0+32768))
  1192  016B  0020               	movlb	0	; select bank0
  1193  016C  00A0               	movwf	strcat@from
  1194  016D  3090               	movlw	high (STR_2| (0+32768))
  1195  016E  00A1               	movwf	strcat@from+1
  1196  016F  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1197  0170  3186  26EE  3180   	fcall	_strcat
  1198                           
  1199                           ;motion_control.c: 234: strcat(sendFinalBufferToGAteway,"1");
  1200  0173  3019               	movlw	low (STR_7| (0+32768))
  1201  0174  0020               	movlb	0	; select bank0
  1202  0175  00A0               	movwf	strcat@from
  1203  0176  3090               	movlw	high (STR_7| (0+32768))
  1204  0177  00A1               	movwf	strcat@from+1
  1205  0178  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1206  0179  3186  26EE  3180   	fcall	_strcat
  1207                           
  1208                           ;motion_control.c: 235: strcat(sendFinalBufferToGAteway,".");
  1209  017C  3015               	movlw	low (STR_2| (0+32768))
  1210  017D  0020               	movlb	0	; select bank0
  1211  017E  00A0               	movwf	strcat@from
  1212  017F  3090               	movlw	high (STR_2| (0+32768))
  1213  0180  00A1               	movwf	strcat@from+1
  1214  0181  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1215  0182  3186  26EE  3180   	fcall	_strcat
  1216                           
  1217                           ;motion_control.c: 236: strcat(sendFinalBufferToGAteway,"1");
  1218  0185  3019               	movlw	low (STR_7| (0+32768))
  1219  0186  0020               	movlb	0	; select bank0
  1220  0187  00A0               	movwf	strcat@from
  1221  0188  3090               	movlw	high (STR_7| (0+32768))
  1222  0189  00A1               	movwf	strcat@from+1
  1223  018A  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1224  018B  3186  26EE  3180   	fcall	_strcat
  1225                           
  1226                           ;motion_control.c: 237: strcat(sendFinalBufferToGAteway,".");
  1227  018E  3015               	movlw	low (STR_2| (0+32768))
  1228  018F  0020               	movlb	0	; select bank0
  1229  0190  00A0               	movwf	strcat@from
  1230  0191  3090               	movlw	high (STR_2| (0+32768))
  1231  0192  00A1               	movwf	strcat@from+1
  1232  0193  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1233  0194  3186  26EE  3180   	fcall	_strcat
  1234                           
  1235                           ;motion_control.c: 238: strcat(sendFinalBufferToGAteway,"1");
  1236  0197  3019               	movlw	low (STR_7| (0+32768))
  1237  0198  0020               	movlb	0	; select bank0
  1238  0199  00A0               	movwf	strcat@from
  1239  019A  3090               	movlw	high (STR_7| (0+32768))
  1240  019B  00A1               	movwf	strcat@from+1
  1241  019C  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1242  019D  3186  26EE  3180   	fcall	_strcat
  1243                           
  1244                           ;motion_control.c: 239: strcat(sendFinalBufferToGAteway,".");
  1245  01A0  3015               	movlw	low (STR_2| (0+32768))
  1246  01A1  0020               	movlb	0	; select bank0
  1247  01A2  00A0               	movwf	strcat@from
  1248  01A3  3090               	movlw	high (STR_2| (0+32768))
  1249  01A4  00A1               	movwf	strcat@from+1
  1250  01A5  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1251  01A6  3186  26EE  3180   	fcall	_strcat
  1252                           
  1253                           ;motion_control.c: 240: strcat(sendFinalBufferToGAteway,"1000|");
  1254  01A9  3007               	movlw	low (STR_13| (0+32768))
  1255  01AA  0020               	movlb	0	; select bank0
  1256  01AB  00A0               	movwf	strcat@from
  1257  01AC  3090               	movlw	high (STR_13| (0+32768))
  1258  01AD  00A1               	movwf	strcat@from+1
  1259  01AE  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1260  01AF  3186  26EE  3180   	fcall	_strcat
  1261                           
  1262                           ;motion_control.c: 241: sendAcknowledgmentTOMotion(sendFinalBufferToGAteway);
  1263  01B2  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1264  01B3  3187  27A4  3180   	fcall	_sendAcknowledgmentTOMotion
  1265                           
  1266                           ;motion_control.c: 243: }
  1267  01B6  2A06               	goto	l2107
  1268  01B7                     l2087:	
  1269                           
  1270                           ;motion_control.c: 244: else
  1271                           ;motion_control.c: 245: {
  1272                           ;motion_control.c: 246: ErrorNames[0]='E'; ErrorNames[1]='R'; ErrorNames[2]='L'; ErrorNa
      +                          mes[3]='S';
  1273  01B7  3045               	movlw	69
  1274  01B8  0020               	movlb	0	; select bank0
  1275  01B9  00C3               	movwf	??_main
  1276  01BA  0843               	movf	??_main,w
  1277  01BB  0021               	movlb	1	; select bank1
  1278  01BC  00D2               	movwf	_ErrorNames^(0+128)
  1279  01BD  3052               	movlw	82
  1280  01BE  0020               	movlb	0	; select bank0
  1281  01BF  00C3               	movwf	??_main
  1282  01C0  0843               	movf	??_main,w
  1283  01C1  0021               	movlb	1	; select bank1
  1284  01C2  00D3               	movwf	(_ErrorNames^(0+128)+1)
  1285  01C3  304C               	movlw	76
  1286  01C4  0020               	movlb	0	; select bank0
  1287  01C5  00C3               	movwf	??_main
  1288  01C6  0843               	movf	??_main,w
  1289  01C7  0021               	movlb	1	; select bank1
  1290  01C8  00D4               	movwf	(_ErrorNames^(0+128)+2)
  1291  01C9  3053               	movlw	83
  1292  01CA  0020               	movlb	0	; select bank0
  1293  01CB  00C3               	movwf	??_main
  1294  01CC  0843               	movf	??_main,w
  1295  01CD  0021               	movlb	1	; select bank1
  1296  01CE  00D5               	movwf	(_ErrorNames^(0+128)+3)
  1297                           
  1298                           ;motion_control.c: 247: errorsMain(ErrorNames);
  1299  01CF  30D2               	movlw	(low (_ErrorNames| 0))& (0+255)
  1300  01D0  3187  2750  3180   	fcall	_errorsMain
  1301                           
  1302                           ;motion_control.c: 248: RC1STAbits.SPEN=0;
  1303  01D3  0023               	movlb	3	; select bank3
  1304  01D4  139D               	bcf	29,7	;volatile
  1305                           
  1306                           ;motion_control.c: 249: RC1STAbits.CREN = 0;
  1307  01D5  121D               	bcf	29,4	;volatile
  1308                           
  1309                           ;motion_control.c: 250: for(int dataBufferCounter = 0; dataBufferCounter< 15; dataBuffer
      +                          Counter++)
  1310  01D6  0021               	movlb	1	; select bank1
  1311  01D7  01DF               	clrf	main@dataBufferCounter^(0+128)
  1312  01D8  01E0               	clrf	(main@dataBufferCounter+1)^(0+128)
  1313  01D9  0860               	movf	(main@dataBufferCounter+1)^(0+128),w
  1314  01DA  3A80               	xorlw	128
  1315  01DB  0020               	movlb	0	; select bank0
  1316  01DC  00C3               	movwf	??_main
  1317  01DD  3080               	movlw	128
  1318  01DE  0243               	subwf	??_main,w
  1319  01DF  1D03               	skipz
  1320  01E0  29E4               	goto	u2165
  1321  01E1  300F               	movlw	15
  1322  01E2  0021               	movlb	1	; select bank1
  1323  01E3  025F               	subwf	main@dataBufferCounter^(0+128),w
  1324  01E4                     u2165:	
  1325  01E4  1803               	btfsc	3,0
  1326  01E5  2A03               	goto	l149
  1327  01E6                     l2101:	
  1328                           
  1329                           ;motion_control.c: 251: {
  1330                           ;motion_control.c: 252: mainReceivedDataBuffer[dataBufferCounter] = '#';
  1331  01E6  3023               	movlw	35
  1332  01E7  0020               	movlb	0	; select bank0
  1333  01E8  00C3               	movwf	??_main
  1334  01E9  0021               	movlb	1	; select bank1
  1335  01EA  085F               	movf	main@dataBufferCounter^(0+128),w
  1336  01EB  3EB2               	addlw	(low (_mainReceivedDataBuffer| 0))& (0+255)
  1337  01EC  0086               	movwf	6
  1338  01ED  0187               	clrf	7
  1339  01EE  0020               	movlb	0	; select bank0
  1340  01EF  0843               	movf	??_main,w
  1341  01F0  0081               	movwf	1
  1342  01F1  3001               	movlw	1
  1343  01F2  0021               	movlb	1	; select bank1
  1344  01F3  07DF               	addwf	main@dataBufferCounter^(0+128),f
  1345  01F4  3000               	movlw	0
  1346  01F5  3DE0               	addwfc	(main@dataBufferCounter+1)^(0+128),f
  1347  01F6  0860               	movf	(main@dataBufferCounter+1)^(0+128),w
  1348  01F7  3A80               	xorlw	128
  1349  01F8  0020               	movlb	0	; select bank0
  1350  01F9  00C3               	movwf	??_main
  1351  01FA  3080               	movlw	128
  1352  01FB  0243               	subwf	??_main,w
  1353  01FC  1D03               	skipz
  1354  01FD  2A01               	goto	u2175
  1355  01FE  300F               	movlw	15
  1356  01FF  0021               	movlb	1	; select bank1
  1357  0200  025F               	subwf	main@dataBufferCounter^(0+128),w
  1358  0201                     u2175:	
  1359  0201  1C03               	skipc
  1360  0202  29E6               	goto	l2101
  1361  0203                     l149:	
  1362                           
  1363                           ;motion_control.c: 253: }
  1364                           ;motion_control.c: 254: RC1STAbits.CREN = 1;
  1365  0203  0023               	movlb	3	; select bank3
  1366  0204  161D               	bsf	29,4	;volatile
  1367                           
  1368                           ;motion_control.c: 255: RC1STAbits.SPEN=1;
  1369  0205  179D               	bsf	29,7	;volatile
  1370  0206                     l2107:	
  1371                           
  1372                           ;motion_control.c: 256: }
  1373                           ;motion_control.c: 257: }
  1374                           ;motion_control.c: 264: int man = 1;
  1375  0206  3001               	movlw	1
  1376  0207  0021               	movlb	1	; select bank1
  1377  0208  00E1               	movwf	main@man^(0+128)
  1378  0209  3000               	movlw	0
  1379  020A  00E2               	movwf	(main@man^(0+128)+1)
  1380                           
  1381                           ;motion_control.c: 265: if(parentalLockBuffer[1] == '0' && PORTFbits.RF7 == 0 && M1 == 0
      +                          )
  1382  020B  3030               	movlw	48
  1383  020C  0020               	movlb	0	; select bank0
  1384  020D  066A               	xorwf	_parentalLockBuffer+1,w
  1385  020E  1D03               	btfss	3,2
  1386  020F  2A60               	goto	l2125
  1387  0210  0025               	movlb	5	; select bank5
  1388  0211  1B8C               	btfsc	12,7	;volatile
  1389  0212  2A60               	goto	l2125
  1390  0213  0020               	movlb	0	; select bank0
  1391  0214  084F               	movf	_M1,w
  1392  0215  0450               	iorwf	_M1+1,w
  1393  0216  1D03               	btfss	3,2
  1394  0217  2A60               	goto	l2125
  1395                           
  1396                           ;motion_control.c: 266: {
  1397                           ;motion_control.c: 267: if(man == 1)
  1398  0218  0021               	movlb	1	; select bank1
  1399  0219  0361               	decf	main@man^(0+128),w
  1400  021A  0462               	iorwf	(main@man+1)^(0+128),w
  1401  021B  1D03               	btfss	3,2
  1402  021C  2A58               	goto	l2121
  1403                           
  1404                           ;motion_control.c: 268: {
  1405                           ;motion_control.c: 269: _delay((unsigned long)((5)*(16000000/4000.0)));
  1406  021D  301A               	movlw	26
  1407  021E  0020               	movlb	0	; select bank0
  1408  021F  00C3               	movwf	??_main
  1409  0220  30F8               	movlw	248
  1410  0221                     u2687:	
  1411  0221  0B89               	decfsz	9,f
  1412  0222  2A21               	goto	u2687
  1413  0223  0BC3               	decfsz	??_main,f
  1414  0224  2A21               	goto	u2687
  1415  0225  0000               	nop
  1416                           
  1417                           ;motion_control.c: 270: TX1REG = 'R';_delay((unsigned long)((1)*(16000000/4000.0)));
  1418  0226  3052               	movlw	82
  1419  0227  0023               	movlb	3	; select bank3
  1420  0228  009A               	movwf	26	;volatile
  1421  0229  3006               	movlw	6
  1422  022A  0020               	movlb	0	; select bank0
  1423  022B  00C3               	movwf	??_main
  1424  022C  3030               	movlw	48
  1425  022D                     u2697:	
  1426  022D  0B89               	decfsz	9,f
  1427  022E  2A2D               	goto	u2697
  1428  022F  0BC3               	decfsz	??_main,f
  1429  0230  2A2D               	goto	u2697
  1430  0231  0000               	nop
  1431                           
  1432                           ;motion_control.c: 271: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
  1433  0232  3030               	movlw	48
  1434  0233  0023               	movlb	3	; select bank3
  1435  0234  009A               	movwf	26	;volatile
  1436  0235  3006               	movlw	6
  1437  0236  0020               	movlb	0	; select bank0
  1438  0237  00C3               	movwf	??_main
  1439  0238  3030               	movlw	48
  1440  0239                     u2707:	
  1441  0239  0B89               	decfsz	9,f
  1442  023A  2A39               	goto	u2707
  1443  023B  0BC3               	decfsz	??_main,f
  1444  023C  2A39               	goto	u2707
  1445  023D  0000               	nop
  1446                           
  1447                           ;motion_control.c: 272: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
  1448  023E  3030               	movlw	48
  1449  023F  0023               	movlb	3	; select bank3
  1450  0240  009A               	movwf	26	;volatile
  1451  0241  3006               	movlw	6
  1452  0242  0020               	movlb	0	; select bank0
  1453  0243  00C3               	movwf	??_main
  1454  0244  3030               	movlw	48
  1455  0245                     u2717:	
  1456  0245  0B89               	decfsz	9,f
  1457  0246  2A45               	goto	u2717
  1458  0247  0BC3               	decfsz	??_main,f
  1459  0248  2A45               	goto	u2717
  1460  0249  0000               	nop
  1461                           
  1462                           ;motion_control.c: 273: TX1REG = '1';_delay((unsigned long)((1)*(16000000/4000.0)));
  1463  024A  3031               	movlw	49
  1464  024B  0023               	movlb	3	; select bank3
  1465  024C  009A               	movwf	26	;volatile
  1466  024D  3006               	movlw	6
  1467  024E  0020               	movlb	0	; select bank0
  1468  024F  00C3               	movwf	??_main
  1469  0250  3030               	movlw	48
  1470  0251                     u2727:	
  1471  0251  0B89               	decfsz	9,f
  1472  0252  2A51               	goto	u2727
  1473  0253  0BC3               	decfsz	??_main,f
  1474  0254  2A51               	goto	u2727
  1475  0255  0000               	nop
  1476                           
  1477                           ;motion_control.c: 274: PORTFbits.RF1=0;
  1478  0256  0025               	movlb	5	; select bank5
  1479  0257  108C               	bcf	12,1	;volatile
  1480  0258                     l2121:	
  1481                           
  1482                           ;motion_control.c: 275: }
  1483                           ;motion_control.c: 276: man=0;
  1484  0258  0021               	movlb	1	; select bank1
  1485  0259  01E1               	clrf	main@man^(0+128)
  1486  025A  01E2               	clrf	(main@man+1)^(0+128)
  1487                           
  1488                           ;motion_control.c: 277: M1=1;
  1489  025B  3001               	movlw	1
  1490  025C  0020               	movlb	0	; select bank0
  1491  025D  00CF               	movwf	_M1
  1492  025E  3000               	movlw	0
  1493  025F  00D0               	movwf	_M1+1
  1494  0260                     l2125:	
  1495                           
  1496                           ;motion_control.c: 279: }
  1497                           ;motion_control.c: 281: if(parentalLockBuffer[1] == '0' && PORTFbits.RF7 == 1 && M1 == 1
      +                          )
  1498  0260  3030               	movlw	48
  1499  0261  0020               	movlb	0	; select bank0
  1500  0262  066A               	xorwf	_parentalLockBuffer+1,w
  1501  0263  1D03               	btfss	3,2
  1502  0264  2AB3               	goto	l2141
  1503  0265  0025               	movlb	5	; select bank5
  1504  0266  1F8C               	btfss	12,7	;volatile
  1505  0267  2AB3               	goto	l2141
  1506  0268  0020               	movlb	0	; select bank0
  1507  0269  034F               	decf	_M1,w
  1508  026A  0450               	iorwf	_M1+1,w
  1509  026B  1D03               	btfss	3,2
  1510  026C  2AB3               	goto	l2141
  1511                           
  1512                           ;motion_control.c: 282: {
  1513                           ;motion_control.c: 284: if(man==1)
  1514  026D  0021               	movlb	1	; select bank1
  1515  026E  0361               	decf	main@man^(0+128),w
  1516  026F  0462               	iorwf	(main@man+1)^(0+128),w
  1517  0270  1D03               	btfss	3,2
  1518  0271  2AAD               	goto	l2137
  1519                           
  1520                           ;motion_control.c: 285: {
  1521                           ;motion_control.c: 286: _delay((unsigned long)((5)*(16000000/4000.0)));
  1522  0272  301A               	movlw	26
  1523  0273  0020               	movlb	0	; select bank0
  1524  0274  00C3               	movwf	??_main
  1525  0275  30F8               	movlw	248
  1526  0276                     u2737:	
  1527  0276  0B89               	decfsz	9,f
  1528  0277  2A76               	goto	u2737
  1529  0278  0BC3               	decfsz	??_main,f
  1530  0279  2A76               	goto	u2737
  1531  027A  0000               	nop
  1532                           
  1533                           ;motion_control.c: 287: TX1REG = 'R';_delay((unsigned long)((1)*(16000000/4000.0)));
  1534  027B  3052               	movlw	82
  1535  027C  0023               	movlb	3	; select bank3
  1536  027D  009A               	movwf	26	;volatile
  1537  027E  3006               	movlw	6
  1538  027F  0020               	movlb	0	; select bank0
  1539  0280  00C3               	movwf	??_main
  1540  0281  3030               	movlw	48
  1541  0282                     u2747:	
  1542  0282  0B89               	decfsz	9,f
  1543  0283  2A82               	goto	u2747
  1544  0284  0BC3               	decfsz	??_main,f
  1545  0285  2A82               	goto	u2747
  1546  0286  0000               	nop
  1547                           
  1548                           ;motion_control.c: 288: TX1REG = '1';_delay((unsigned long)((1)*(16000000/4000.0)));
  1549  0287  3031               	movlw	49
  1550  0288  0023               	movlb	3	; select bank3
  1551  0289  009A               	movwf	26	;volatile
  1552  028A  3006               	movlw	6
  1553  028B  0020               	movlb	0	; select bank0
  1554  028C  00C3               	movwf	??_main
  1555  028D  3030               	movlw	48
  1556  028E                     u2757:	
  1557  028E  0B89               	decfsz	9,f
  1558  028F  2A8E               	goto	u2757
  1559  0290  0BC3               	decfsz	??_main,f
  1560  0291  2A8E               	goto	u2757
  1561  0292  0000               	nop
  1562                           
  1563                           ;motion_control.c: 289: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
  1564  0293  3030               	movlw	48
  1565  0294  0023               	movlb	3	; select bank3
  1566  0295  009A               	movwf	26	;volatile
  1567  0296  3006               	movlw	6
  1568  0297  0020               	movlb	0	; select bank0
  1569  0298  00C3               	movwf	??_main
  1570  0299  3030               	movlw	48
  1571  029A                     u2767:	
  1572  029A  0B89               	decfsz	9,f
  1573  029B  2A9A               	goto	u2767
  1574  029C  0BC3               	decfsz	??_main,f
  1575  029D  2A9A               	goto	u2767
  1576  029E  0000               	nop
  1577                           
  1578                           ;motion_control.c: 290: TX1REG = '1';_delay((unsigned long)((1)*(16000000/4000.0)));
  1579  029F  3031               	movlw	49
  1580  02A0  0023               	movlb	3	; select bank3
  1581  02A1  009A               	movwf	26	;volatile
  1582  02A2  3006               	movlw	6
  1583  02A3  0020               	movlb	0	; select bank0
  1584  02A4  00C3               	movwf	??_main
  1585  02A5  3030               	movlw	48
  1586  02A6                     u2777:	
  1587  02A6  0B89               	decfsz	9,f
  1588  02A7  2AA6               	goto	u2777
  1589  02A8  0BC3               	decfsz	??_main,f
  1590  02A9  2AA6               	goto	u2777
  1591  02AA  0000               	nop
  1592                           
  1593                           ;motion_control.c: 291: PORTFbits.RF1=1;
  1594  02AB  0025               	movlb	5	; select bank5
  1595  02AC  148C               	bsf	12,1	;volatile
  1596  02AD                     l2137:	
  1597                           
  1598                           ;motion_control.c: 292: }
  1599                           ;motion_control.c: 293: man=0;
  1600  02AD  0021               	movlb	1	; select bank1
  1601  02AE  01E1               	clrf	main@man^(0+128)
  1602  02AF  01E2               	clrf	(main@man+1)^(0+128)
  1603                           
  1604                           ;motion_control.c: 294: M1=0;
  1605  02B0  0020               	movlb	0	; select bank0
  1606  02B1  01CF               	clrf	_M1
  1607  02B2  01D0               	clrf	_M1+1
  1608  02B3                     l2141:	
  1609                           
  1610                           ;motion_control.c: 295: }
  1611                           ;motion_control.c: 299: if(parentalLockBuffer[2] == '0' && PORTFbits.RF5 == 0 && M2 == 0
      +                          )
  1612  02B3  3030               	movlw	48
  1613  02B4  0020               	movlb	0	; select bank0
  1614  02B5  066B               	xorwf	_parentalLockBuffer+2,w
  1615  02B6  1D03               	btfss	3,2
  1616  02B7  2B08               	goto	l2157
  1617  02B8  0025               	movlb	5	; select bank5
  1618  02B9  1A8C               	btfsc	12,5	;volatile
  1619  02BA  2B08               	goto	l2157
  1620  02BB  0020               	movlb	0	; select bank0
  1621  02BC  084D               	movf	_M2,w
  1622  02BD  044E               	iorwf	_M2+1,w
  1623  02BE  1D03               	btfss	3,2
  1624  02BF  2B08               	goto	l2157
  1625                           
  1626                           ;motion_control.c: 300: {
  1627                           ;motion_control.c: 301: if(man==1)
  1628  02C0  0021               	movlb	1	; select bank1
  1629  02C1  0361               	decf	main@man^(0+128),w
  1630  02C2  0462               	iorwf	(main@man+1)^(0+128),w
  1631  02C3  1D03               	btfss	3,2
  1632  02C4  2B00               	goto	l2153
  1633                           
  1634                           ;motion_control.c: 302: {
  1635                           ;motion_control.c: 303: _delay((unsigned long)((5)*(16000000/4000.0)));
  1636  02C5  301A               	movlw	26
  1637  02C6  0020               	movlb	0	; select bank0
  1638  02C7  00C3               	movwf	??_main
  1639  02C8  30F8               	movlw	248
  1640  02C9                     u2787:	
  1641  02C9  0B89               	decfsz	9,f
  1642  02CA  2AC9               	goto	u2787
  1643  02CB  0BC3               	decfsz	??_main,f
  1644  02CC  2AC9               	goto	u2787
  1645  02CD  0000               	nop
  1646                           
  1647                           ;motion_control.c: 304: TX1REG = 'R';_delay((unsigned long)((1)*(16000000/4000.0)));
  1648  02CE  3052               	movlw	82
  1649  02CF  0023               	movlb	3	; select bank3
  1650  02D0  009A               	movwf	26	;volatile
  1651  02D1  3006               	movlw	6
  1652  02D2  0020               	movlb	0	; select bank0
  1653  02D3  00C3               	movwf	??_main
  1654  02D4  3030               	movlw	48
  1655  02D5                     u2797:	
  1656  02D5  0B89               	decfsz	9,f
  1657  02D6  2AD5               	goto	u2797
  1658  02D7  0BC3               	decfsz	??_main,f
  1659  02D8  2AD5               	goto	u2797
  1660  02D9  0000               	nop
  1661                           
  1662                           ;motion_control.c: 305: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
  1663  02DA  3030               	movlw	48
  1664  02DB  0023               	movlb	3	; select bank3
  1665  02DC  009A               	movwf	26	;volatile
  1666  02DD  3006               	movlw	6
  1667  02DE  0020               	movlb	0	; select bank0
  1668  02DF  00C3               	movwf	??_main
  1669  02E0  3030               	movlw	48
  1670  02E1                     u2807:	
  1671  02E1  0B89               	decfsz	9,f
  1672  02E2  2AE1               	goto	u2807
  1673  02E3  0BC3               	decfsz	??_main,f
  1674  02E4  2AE1               	goto	u2807
  1675  02E5  0000               	nop
  1676                           
  1677                           ;motion_control.c: 306: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
  1678  02E6  3030               	movlw	48
  1679  02E7  0023               	movlb	3	; select bank3
  1680  02E8  009A               	movwf	26	;volatile
  1681  02E9  3006               	movlw	6
  1682  02EA  0020               	movlb	0	; select bank0
  1683  02EB  00C3               	movwf	??_main
  1684  02EC  3030               	movlw	48
  1685  02ED                     u2817:	
  1686  02ED  0B89               	decfsz	9,f
  1687  02EE  2AED               	goto	u2817
  1688  02EF  0BC3               	decfsz	??_main,f
  1689  02F0  2AED               	goto	u2817
  1690  02F1  0000               	nop
  1691                           
  1692                           ;motion_control.c: 307: TX1REG = '2';_delay((unsigned long)((1)*(16000000/4000.0)));
  1693  02F2  3032               	movlw	50
  1694  02F3  0023               	movlb	3	; select bank3
  1695  02F4  009A               	movwf	26	;volatile
  1696  02F5  3006               	movlw	6
  1697  02F6  0020               	movlb	0	; select bank0
  1698  02F7  00C3               	movwf	??_main
  1699  02F8  3030               	movlw	48
  1700  02F9                     u2827:	
  1701  02F9  0B89               	decfsz	9,f
  1702  02FA  2AF9               	goto	u2827
  1703  02FB  0BC3               	decfsz	??_main,f
  1704  02FC  2AF9               	goto	u2827
  1705  02FD  0000               	nop
  1706                           
  1707                           ;motion_control.c: 308: PORTFbits.RF0=0;
  1708  02FE  0025               	movlb	5	; select bank5
  1709  02FF  100C               	bcf	12,0	;volatile
  1710  0300                     l2153:	
  1711                           
  1712                           ;motion_control.c: 309: }
  1713                           ;motion_control.c: 310: man=0;
  1714  0300  0021               	movlb	1	; select bank1
  1715  0301  01E1               	clrf	main@man^(0+128)
  1716  0302  01E2               	clrf	(main@man+1)^(0+128)
  1717                           
  1718                           ;motion_control.c: 311: M2=1;
  1719  0303  3001               	movlw	1
  1720  0304  0020               	movlb	0	; select bank0
  1721  0305  00CD               	movwf	_M2
  1722  0306  3000               	movlw	0
  1723  0307  00CE               	movwf	_M2+1
  1724  0308                     l2157:	
  1725                           
  1726                           ;motion_control.c: 312: }
  1727                           ;motion_control.c: 314: if(parentalLockBuffer[2] == '0' && PORTFbits.RF5 == 1 && M2 == 1
      +                           )
  1728  0308  3030               	movlw	48
  1729  0309  0020               	movlb	0	; select bank0
  1730  030A  066B               	xorwf	_parentalLockBuffer+2,w
  1731  030B  1D03               	btfss	3,2
  1732  030C  2B5B               	goto	l2173
  1733  030D  0025               	movlb	5	; select bank5
  1734  030E  1E8C               	btfss	12,5	;volatile
  1735  030F  2B5B               	goto	l2173
  1736  0310  0020               	movlb	0	; select bank0
  1737  0311  034D               	decf	_M2,w
  1738  0312  044E               	iorwf	_M2+1,w
  1739  0313  1D03               	btfss	3,2
  1740  0314  2B5B               	goto	l2173
  1741                           
  1742                           ;motion_control.c: 315: {
  1743                           ;motion_control.c: 316: if(man==1)
  1744  0315  0021               	movlb	1	; select bank1
  1745  0316  0361               	decf	main@man^(0+128),w
  1746  0317  0462               	iorwf	(main@man+1)^(0+128),w
  1747  0318  1D03               	btfss	3,2
  1748  0319  2B55               	goto	l2169
  1749                           
  1750                           ;motion_control.c: 317: {
  1751                           ;motion_control.c: 318: _delay((unsigned long)((5)*(16000000/4000.0)));
  1752  031A  301A               	movlw	26
  1753  031B  0020               	movlb	0	; select bank0
  1754  031C  00C3               	movwf	??_main
  1755  031D  30F8               	movlw	248
  1756  031E                     u2837:	
  1757  031E  0B89               	decfsz	9,f
  1758  031F  2B1E               	goto	u2837
  1759  0320  0BC3               	decfsz	??_main,f
  1760  0321  2B1E               	goto	u2837
  1761  0322  0000               	nop
  1762                           
  1763                           ;motion_control.c: 319: TX1REG = 'R';_delay((unsigned long)((1)*(16000000/4000.0)));
  1764  0323  3052               	movlw	82
  1765  0324  0023               	movlb	3	; select bank3
  1766  0325  009A               	movwf	26	;volatile
  1767  0326  3006               	movlw	6
  1768  0327  0020               	movlb	0	; select bank0
  1769  0328  00C3               	movwf	??_main
  1770  0329  3030               	movlw	48
  1771  032A                     u2847:	
  1772  032A  0B89               	decfsz	9,f
  1773  032B  2B2A               	goto	u2847
  1774  032C  0BC3               	decfsz	??_main,f
  1775  032D  2B2A               	goto	u2847
  1776  032E  0000               	nop
  1777                           
  1778                           ;motion_control.c: 320: TX1REG = '1';_delay((unsigned long)((1)*(16000000/4000.0)));
  1779  032F  3031               	movlw	49
  1780  0330  0023               	movlb	3	; select bank3
  1781  0331  009A               	movwf	26	;volatile
  1782  0332  3006               	movlw	6
  1783  0333  0020               	movlb	0	; select bank0
  1784  0334  00C3               	movwf	??_main
  1785  0335  3030               	movlw	48
  1786  0336                     u2857:	
  1787  0336  0B89               	decfsz	9,f
  1788  0337  2B36               	goto	u2857
  1789  0338  0BC3               	decfsz	??_main,f
  1790  0339  2B36               	goto	u2857
  1791  033A  0000               	nop
  1792                           
  1793                           ;motion_control.c: 321: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
  1794  033B  3030               	movlw	48
  1795  033C  0023               	movlb	3	; select bank3
  1796  033D  009A               	movwf	26	;volatile
  1797  033E  3006               	movlw	6
  1798  033F  0020               	movlb	0	; select bank0
  1799  0340  00C3               	movwf	??_main
  1800  0341  3030               	movlw	48
  1801  0342                     u2867:	
  1802  0342  0B89               	decfsz	9,f
  1803  0343  2B42               	goto	u2867
  1804  0344  0BC3               	decfsz	??_main,f
  1805  0345  2B42               	goto	u2867
  1806  0346  0000               	nop
  1807                           
  1808                           ;motion_control.c: 322: TX1REG = '2';_delay((unsigned long)((1)*(16000000/4000.0)));
  1809  0347  3032               	movlw	50
  1810  0348  0023               	movlb	3	; select bank3
  1811  0349  009A               	movwf	26	;volatile
  1812  034A  3006               	movlw	6
  1813  034B  0020               	movlb	0	; select bank0
  1814  034C  00C3               	movwf	??_main
  1815  034D  3030               	movlw	48
  1816  034E                     u2877:	
  1817  034E  0B89               	decfsz	9,f
  1818  034F  2B4E               	goto	u2877
  1819  0350  0BC3               	decfsz	??_main,f
  1820  0351  2B4E               	goto	u2877
  1821  0352  0000               	nop
  1822                           
  1823                           ;motion_control.c: 323: PORTFbits.RF0=1;
  1824  0353  0025               	movlb	5	; select bank5
  1825  0354  140C               	bsf	12,0	;volatile
  1826  0355                     l2169:	
  1827                           
  1828                           ;motion_control.c: 324: }
  1829                           ;motion_control.c: 325: man=0;
  1830  0355  0021               	movlb	1	; select bank1
  1831  0356  01E1               	clrf	main@man^(0+128)
  1832  0357  01E2               	clrf	(main@man+1)^(0+128)
  1833                           
  1834                           ;motion_control.c: 326: M2=0;
  1835  0358  0020               	movlb	0	; select bank0
  1836  0359  01CD               	clrf	_M2
  1837  035A  01CE               	clrf	_M2+1
  1838  035B                     l2173:	
  1839                           
  1840                           ;motion_control.c: 327: }
  1841                           ;motion_control.c: 329: if(parentalLockBuffer[3] == '0' && PORTFbits.RF3 == 0 && M3 == 0
      +                           )
  1842  035B  3030               	movlw	48
  1843  035C  0020               	movlb	0	; select bank0
  1844  035D  066C               	xorwf	_parentalLockBuffer+3,w
  1845  035E  1D03               	btfss	3,2
  1846  035F  2BC3               	goto	l2191
  1847  0360  0025               	movlb	5	; select bank5
  1848  0361  198C               	btfsc	12,3	;volatile
  1849  0362  2BC3               	goto	l2191
  1850  0363  0020               	movlb	0	; select bank0
  1851  0364  084B               	movf	_M3,w
  1852  0365  044C               	iorwf	_M3+1,w
  1853  0366  1D03               	btfss	3,2
  1854  0367  2BC3               	goto	l2191
  1855                           
  1856                           ;motion_control.c: 330: {
  1857                           ;motion_control.c: 331: if(man == 1)
  1858  0368  0021               	movlb	1	; select bank1
  1859  0369  0361               	decf	main@man^(0+128),w
  1860  036A  0462               	iorwf	(main@man+1)^(0+128),w
  1861  036B  1D03               	btfss	3,2
  1862  036C  2BBB               	goto	l2187
  1863                           
  1864                           ;motion_control.c: 332: {
  1865                           ;motion_control.c: 334: strcpy(sendFinalBufferToGAteway,"MT");
  1866  036D  3012               	movlw	low (STR_1| (0+32768))
  1867  036E  0020               	movlb	0	; select bank0
  1868  036F  00A0               	movwf	strcpy@from
  1869  0370  3090               	movlw	high (STR_1| (0+32768))
  1870  0371  00A1               	movwf	strcpy@from+1
  1871  0372  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1872  0373  3187  2789  3180   	fcall	_strcpy
  1873                           
  1874                           ;motion_control.c: 335: strcat(sendFinalBufferToGAteway,".");
  1875  0376  3015               	movlw	low (STR_2| (0+32768))
  1876  0377  0020               	movlb	0	; select bank0
  1877  0378  00A0               	movwf	strcat@from
  1878  0379  3090               	movlw	high (STR_2| (0+32768))
  1879  037A  00A1               	movwf	strcat@from+1
  1880  037B  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1881  037C  3186  26EE  3180   	fcall	_strcat
  1882                           
  1883                           ;motion_control.c: 336: strcat(sendFinalBufferToGAteway,"3");
  1884  037F  301B               	movlw	low (STR_3| (0+32768))
  1885  0380  0020               	movlb	0	; select bank0
  1886  0381  00A0               	movwf	strcat@from
  1887  0382  3090               	movlw	high (STR_3| (0+32768))
  1888  0383  00A1               	movwf	strcat@from+1
  1889  0384  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1890  0385  3186  26EE  3180   	fcall	_strcat
  1891                           
  1892                           ;motion_control.c: 337: strcat(sendFinalBufferToGAteway,".");
  1893  0388  3015               	movlw	low (STR_2| (0+32768))
  1894  0389  0020               	movlb	0	; select bank0
  1895  038A  00A0               	movwf	strcat@from
  1896  038B  3090               	movlw	high (STR_2| (0+32768))
  1897  038C  00A1               	movwf	strcat@from+1
  1898  038D  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1899  038E  3186  26EE  3180   	fcall	_strcat
  1900                           
  1901                           ;motion_control.c: 338: strcat(sendFinalBufferToGAteway,"READ");
  1902  0391  300D               	movlw	low (STR_18| (0+32768))
  1903  0392  0020               	movlb	0	; select bank0
  1904  0393  00A0               	movwf	strcat@from
  1905  0394  3090               	movlw	high (STR_18| (0+32768))
  1906  0395  00A1               	movwf	strcat@from+1
  1907  0396  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1908  0397  3186  26EE  3180   	fcall	_strcat
  1909                           
  1910                           ;motion_control.c: 339: strcat(sendFinalBufferToGAteway,".");
  1911  039A  3015               	movlw	low (STR_2| (0+32768))
  1912  039B  0020               	movlb	0	; select bank0
  1913  039C  00A0               	movwf	strcat@from
  1914  039D  3090               	movlw	high (STR_2| (0+32768))
  1915  039E  00A1               	movwf	strcat@from+1
  1916  039F  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1917  03A0  3186  26EE  3180   	fcall	_strcat
  1918                           
  1919                           ;motion_control.c: 340: strcat(sendFinalBufferToGAteway,"0");
  1920  03A3  3017               	movlw	low (STR_20| (0+32768))
  1921  03A4  0020               	movlb	0	; select bank0
  1922  03A5  00A0               	movwf	strcat@from
  1923  03A6  3090               	movlw	high (STR_20| (0+32768))
  1924  03A7  00A1               	movwf	strcat@from+1
  1925  03A8  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1926  03A9  3186  26EE  3180   	fcall	_strcat
  1927                           
  1928                           ;motion_control.c: 341: strcat(sendFinalBufferToGAteway,"|");
  1929  03AC  300B               	movlw	low ((STR_13+4)| (0+32768))
  1930  03AD  0020               	movlb	0	; select bank0
  1931  03AE  00A0               	movwf	strcat@from
  1932  03AF  3090               	movlw	high ((STR_13+4)| (0+32768))
  1933  03B0  00A1               	movwf	strcat@from+1
  1934  03B1  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1935  03B2  3186  26EE  3180   	fcall	_strcat
  1936                           
  1937                           ;motion_control.c: 342: sendAcknowledgmentTOMotion(sendFinalBufferToGAteway);
  1938  03B5  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1939  03B6  3187  27A4  3180   	fcall	_sendAcknowledgmentTOMotion
  1940                           
  1941                           ;motion_control.c: 344: PORTAbits.RA3=0;
  1942  03B9  0020               	movlb	0	; select bank0
  1943  03BA  118C               	bcf	12,3	;volatile
  1944  03BB                     l2187:	
  1945                           
  1946                           ;motion_control.c: 345: }
  1947                           ;motion_control.c: 346: man=0;
  1948  03BB  0021               	movlb	1	; select bank1
  1949  03BC  01E1               	clrf	main@man^(0+128)
  1950  03BD  01E2               	clrf	(main@man+1)^(0+128)
  1951                           
  1952                           ;motion_control.c: 347: M3=1;
  1953  03BE  3001               	movlw	1
  1954  03BF  0020               	movlb	0	; select bank0
  1955  03C0  00CB               	movwf	_M3
  1956  03C1  3000               	movlw	0
  1957  03C2  00CC               	movwf	_M3+1
  1958  03C3                     l2191:	
  1959                           
  1960                           ;motion_control.c: 349: }
  1961                           ;motion_control.c: 351: if(parentalLockBuffer[3] == '0' && PORTFbits.RF3 == 1 && M3 == 1
      +                          )
  1962  03C3  3030               	movlw	48
  1963  03C4  0020               	movlb	0	; select bank0
  1964  03C5  066C               	xorwf	_parentalLockBuffer+3,w
  1965  03C6  1D03               	btfss	3,2
  1966  03C7  2C29               	goto	l2209
  1967  03C8  0025               	movlb	5	; select bank5
  1968  03C9  1D8C               	btfss	12,3	;volatile
  1969  03CA  2C29               	goto	l2209
  1970  03CB  0020               	movlb	0	; select bank0
  1971  03CC  034B               	decf	_M3,w
  1972  03CD  044C               	iorwf	_M3+1,w
  1973  03CE  1D03               	btfss	3,2
  1974  03CF  2C29               	goto	l2209
  1975                           
  1976                           ;motion_control.c: 352: {
  1977                           ;motion_control.c: 354: if(man==1)
  1978  03D0  0021               	movlb	1	; select bank1
  1979  03D1  0361               	decf	main@man^(0+128),w
  1980  03D2  0462               	iorwf	(main@man+1)^(0+128),w
  1981  03D3  1D03               	btfss	3,2
  1982  03D4  2C23               	goto	l2205
  1983                           
  1984                           ;motion_control.c: 355: {
  1985                           ;motion_control.c: 357: strcpy(sendFinalBufferToGAteway,"MT");
  1986  03D5  3012               	movlw	low (STR_1| (0+32768))
  1987  03D6  0020               	movlb	0	; select bank0
  1988  03D7  00A0               	movwf	strcpy@from
  1989  03D8  3090               	movlw	high (STR_1| (0+32768))
  1990  03D9  00A1               	movwf	strcpy@from+1
  1991  03DA  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1992  03DB  3187  2789  3180   	fcall	_strcpy
  1993                           
  1994                           ;motion_control.c: 358: strcat(sendFinalBufferToGAteway,".");
  1995  03DE  3015               	movlw	low (STR_2| (0+32768))
  1996  03DF  0020               	movlb	0	; select bank0
  1997  03E0  00A0               	movwf	strcat@from
  1998  03E1  3090               	movlw	high (STR_2| (0+32768))
  1999  03E2  00A1               	movwf	strcat@from+1
  2000  03E3  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2001  03E4  3186  26EE  3180   	fcall	_strcat
  2002                           
  2003                           ;motion_control.c: 359: strcat(sendFinalBufferToGAteway,"3");
  2004  03E7  301B               	movlw	low (STR_3| (0+32768))
  2005  03E8  0020               	movlb	0	; select bank0
  2006  03E9  00A0               	movwf	strcat@from
  2007  03EA  3090               	movlw	high (STR_3| (0+32768))
  2008  03EB  00A1               	movwf	strcat@from+1
  2009  03EC  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2010  03ED  3186  26EE  3180   	fcall	_strcat
  2011                           
  2012                           ;motion_control.c: 360: strcat(sendFinalBufferToGAteway,".");
  2013  03F0  3015               	movlw	low (STR_2| (0+32768))
  2014  03F1  0020               	movlb	0	; select bank0
  2015  03F2  00A0               	movwf	strcat@from
  2016  03F3  3090               	movlw	high (STR_2| (0+32768))
  2017  03F4  00A1               	movwf	strcat@from+1
  2018  03F5  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2019  03F6  3186  26EE  3180   	fcall	_strcat
  2020                           
  2021                           ;motion_control.c: 361: strcat(sendFinalBufferToGAteway,"READ");
  2022  03F9  300D               	movlw	low (STR_18| (0+32768))
  2023  03FA  0020               	movlb	0	; select bank0
  2024  03FB  00A0               	movwf	strcat@from
  2025  03FC  3090               	movlw	high (STR_18| (0+32768))
  2026  03FD  00A1               	movwf	strcat@from+1
  2027  03FE  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2028  03FF  3186  26EE  3180   	fcall	_strcat
  2029                           
  2030                           ;motion_control.c: 362: strcat(sendFinalBufferToGAteway,".");
  2031  0402  3015               	movlw	low (STR_2| (0+32768))
  2032  0403  0020               	movlb	0	; select bank0
  2033  0404  00A0               	movwf	strcat@from
  2034  0405  3090               	movlw	high (STR_2| (0+32768))
  2035  0406  00A1               	movwf	strcat@from+1
  2036  0407  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2037  0408  3186  26EE  3180   	fcall	_strcat
  2038                           
  2039                           ;motion_control.c: 363: strcat(sendFinalBufferToGAteway,"1");
  2040  040B  3019               	movlw	low (STR_7| (0+32768))
  2041  040C  0020               	movlb	0	; select bank0
  2042  040D  00A0               	movwf	strcat@from
  2043  040E  3090               	movlw	high (STR_7| (0+32768))
  2044  040F  00A1               	movwf	strcat@from+1
  2045  0410  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2046  0411  3186  26EE  3180   	fcall	_strcat
  2047                           
  2048                           ;motion_control.c: 364: strcat(sendFinalBufferToGAteway,"|");
  2049  0414  300B               	movlw	low ((STR_13+4)| (0+32768))
  2050  0415  0020               	movlb	0	; select bank0
  2051  0416  00A0               	movwf	strcat@from
  2052  0417  3090               	movlw	high ((STR_13+4)| (0+32768))
  2053  0418  00A1               	movwf	strcat@from+1
  2054  0419  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2055  041A  3186  26EE  3180   	fcall	_strcat
  2056                           
  2057                           ;motion_control.c: 365: sendAcknowledgmentTOMotion(sendFinalBufferToGAteway);
  2058  041D  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2059  041E  3187  27A4  3180   	fcall	_sendAcknowledgmentTOMotion
  2060                           
  2061                           ;motion_control.c: 367: PORTAbits.RA3=1;
  2062  0421  0020               	movlb	0	; select bank0
  2063  0422  158C               	bsf	12,3	;volatile
  2064  0423                     l2205:	
  2065                           
  2066                           ;motion_control.c: 368: }
  2067                           ;motion_control.c: 369: man=0;
  2068  0423  0021               	movlb	1	; select bank1
  2069  0424  01E1               	clrf	main@man^(0+128)
  2070  0425  01E2               	clrf	(main@man+1)^(0+128)
  2071                           
  2072                           ;motion_control.c: 370: M3=0;
  2073  0426  0020               	movlb	0	; select bank0
  2074  0427  01CB               	clrf	_M3
  2075  0428  01CC               	clrf	_M3+1
  2076  0429                     l2209:	
  2077                           
  2078                           ;motion_control.c: 372: }
  2079                           ;motion_control.c: 377: if(parentalLockBuffer[4] == '0' && PORTFbits.RF2 == 0 && M4 == 0
      +                           )
  2080  0429  3030               	movlw	48
  2081  042A  0020               	movlb	0	; select bank0
  2082  042B  066D               	xorwf	_parentalLockBuffer+4,w
  2083  042C  1D03               	btfss	3,2
  2084  042D  2CBE               	goto	l2227
  2085  042E  0025               	movlb	5	; select bank5
  2086  042F  190C               	btfsc	12,2	;volatile
  2087  0430  2CBE               	goto	l2227
  2088  0431  0020               	movlb	0	; select bank0
  2089  0432  0849               	movf	_M4,w
  2090  0433  044A               	iorwf	_M4+1,w
  2091  0434  1D03               	btfss	3,2
  2092  0435  2CBE               	goto	l2227
  2093                           
  2094                           ;motion_control.c: 378: {
  2095                           ;motion_control.c: 379: if(man==1)
  2096  0436  0021               	movlb	1	; select bank1
  2097  0437  0361               	decf	main@man^(0+128),w
  2098  0438  0462               	iorwf	(main@man+1)^(0+128),w
  2099  0439  1D03               	btfss	3,2
  2100  043A  2CB6               	goto	l2223
  2101                           
  2102                           ;motion_control.c: 380: {
  2103                           ;motion_control.c: 381: strcpy(sendFinalBufferToGAteway,"MT");
  2104  043B  3012               	movlw	low (STR_1| (0+32768))
  2105  043C  0020               	movlb	0	; select bank0
  2106  043D  00A0               	movwf	strcpy@from
  2107  043E  3090               	movlw	high (STR_1| (0+32768))
  2108  043F  00A1               	movwf	strcpy@from+1
  2109  0440  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2110  0441  3187  2789  3180   	fcall	_strcpy
  2111                           
  2112                           ;motion_control.c: 382: strcat(sendFinalBufferToGAteway,".");
  2113  0444  3015               	movlw	low (STR_2| (0+32768))
  2114  0445  0020               	movlb	0	; select bank0
  2115  0446  00A0               	movwf	strcat@from
  2116  0447  3090               	movlw	high (STR_2| (0+32768))
  2117  0448  00A1               	movwf	strcat@from+1
  2118  0449  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2119  044A  3186  26EE  3180   	fcall	_strcat
  2120                           
  2121                           ;motion_control.c: 383: strcat(sendFinalBufferToGAteway,"4");
  2122  044D  301D               	movlw	low (STR_32| (0+32768))
  2123  044E  0020               	movlb	0	; select bank0
  2124  044F  00A0               	movwf	strcat@from
  2125  0450  3090               	movlw	high (STR_32| (0+32768))
  2126  0451  00A1               	movwf	strcat@from+1
  2127  0452  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2128  0453  3186  26EE  3180   	fcall	_strcat
  2129                           
  2130                           ;motion_control.c: 384: strcat(sendFinalBufferToGAteway,".");
  2131  0456  3015               	movlw	low (STR_2| (0+32768))
  2132  0457  0020               	movlb	0	; select bank0
  2133  0458  00A0               	movwf	strcat@from
  2134  0459  3090               	movlw	high (STR_2| (0+32768))
  2135  045A  00A1               	movwf	strcat@from+1
  2136  045B  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2137  045C  3186  26EE  3180   	fcall	_strcat
  2138                           
  2139                           ;motion_control.c: 385: strcat(sendFinalBufferToGAteway,"ACTACK");
  2140  045F  3000               	movlw	low (STR_5| (0+32768))
  2141  0460  0020               	movlb	0	; select bank0
  2142  0461  00A0               	movwf	strcat@from
  2143  0462  3090               	movlw	high (STR_5| (0+32768))
  2144  0463  00A1               	movwf	strcat@from+1
  2145  0464  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2146  0465  3186  26EE  3180   	fcall	_strcat
  2147                           
  2148                           ;motion_control.c: 386: strcat(sendFinalBufferToGAteway,".");
  2149  0468  3015               	movlw	low (STR_2| (0+32768))
  2150  0469  0020               	movlb	0	; select bank0
  2151  046A  00A0               	movwf	strcat@from
  2152  046B  3090               	movlw	high (STR_2| (0+32768))
  2153  046C  00A1               	movwf	strcat@from+1
  2154  046D  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2155  046E  3186  26EE  3180   	fcall	_strcat
  2156                           
  2157                           ;motion_control.c: 387: strcat(sendFinalBufferToGAteway,"0");
  2158  0471  3017               	movlw	low (STR_20| (0+32768))
  2159  0472  0020               	movlb	0	; select bank0
  2160  0473  00A0               	movwf	strcat@from
  2161  0474  3090               	movlw	high (STR_20| (0+32768))
  2162  0475  00A1               	movwf	strcat@from+1
  2163  0476  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2164  0477  3186  26EE  3180   	fcall	_strcat
  2165                           
  2166                           ;motion_control.c: 388: strcat(sendFinalBufferToGAteway,".");
  2167  047A  3015               	movlw	low (STR_2| (0+32768))
  2168  047B  0020               	movlb	0	; select bank0
  2169  047C  00A0               	movwf	strcat@from
  2170  047D  3090               	movlw	high (STR_2| (0+32768))
  2171  047E  00A1               	movwf	strcat@from+1
  2172  047F  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2173  0480  3186  26EE  3180   	fcall	_strcat
  2174                           
  2175                           ;motion_control.c: 389: strcat(sendFinalBufferToGAteway,"1");
  2176  0483  3019               	movlw	low (STR_7| (0+32768))
  2177  0484  0020               	movlb	0	; select bank0
  2178  0485  00A0               	movwf	strcat@from
  2179  0486  3090               	movlw	high (STR_7| (0+32768))
  2180  0487  00A1               	movwf	strcat@from+1
  2181  0488  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2182  0489  3186  26EE  3180   	fcall	_strcat
  2183                           
  2184                           ;motion_control.c: 390: strcat(sendFinalBufferToGAteway,".");
  2185  048C  3015               	movlw	low (STR_2| (0+32768))
  2186  048D  0020               	movlb	0	; select bank0
  2187  048E  00A0               	movwf	strcat@from
  2188  048F  3090               	movlw	high (STR_2| (0+32768))
  2189  0490  00A1               	movwf	strcat@from+1
  2190  0491  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2191  0492  3186  26EE  3180   	fcall	_strcat
  2192                           
  2193                           ;motion_control.c: 391: strcat(sendFinalBufferToGAteway,"1");
  2194  0495  3019               	movlw	low (STR_7| (0+32768))
  2195  0496  0020               	movlb	0	; select bank0
  2196  0497  00A0               	movwf	strcat@from
  2197  0498  3090               	movlw	high (STR_7| (0+32768))
  2198  0499  00A1               	movwf	strcat@from+1
  2199  049A  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2200  049B  3186  26EE  3180   	fcall	_strcat
  2201                           
  2202                           ;motion_control.c: 392: strcat(sendFinalBufferToGAteway,".");
  2203  049E  3015               	movlw	low (STR_2| (0+32768))
  2204  049F  0020               	movlb	0	; select bank0
  2205  04A0  00A0               	movwf	strcat@from
  2206  04A1  3090               	movlw	high (STR_2| (0+32768))
  2207  04A2  00A1               	movwf	strcat@from+1
  2208  04A3  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2209  04A4  3186  26EE  3180   	fcall	_strcat
  2210                           
  2211                           ;motion_control.c: 393: strcat(sendFinalBufferToGAteway,"1000|");
  2212  04A7  3007               	movlw	low (STR_13| (0+32768))
  2213  04A8  0020               	movlb	0	; select bank0
  2214  04A9  00A0               	movwf	strcat@from
  2215  04AA  3090               	movlw	high (STR_13| (0+32768))
  2216  04AB  00A1               	movwf	strcat@from+1
  2217  04AC  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2218  04AD  3186  26EE  3180   	fcall	_strcat
  2219                           
  2220                           ;motion_control.c: 395: sendAcknowledgmentTOMotion(sendFinalBufferToGAteway);
  2221  04B0  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2222  04B1  3187  27A4  3180   	fcall	_sendAcknowledgmentTOMotion
  2223                           
  2224                           ;motion_control.c: 397: PORTAbits.RA2=0;
  2225  04B4  0020               	movlb	0	; select bank0
  2226  04B5  110C               	bcf	12,2	;volatile
  2227  04B6                     l2223:	
  2228                           
  2229                           ;motion_control.c: 398: }
  2230                           ;motion_control.c: 399: man=0;
  2231  04B6  0021               	movlb	1	; select bank1
  2232  04B7  01E1               	clrf	main@man^(0+128)
  2233  04B8  01E2               	clrf	(main@man+1)^(0+128)
  2234                           
  2235                           ;motion_control.c: 400: M4=1;
  2236  04B9  3001               	movlw	1
  2237  04BA  0020               	movlb	0	; select bank0
  2238  04BB  00C9               	movwf	_M4
  2239  04BC  3000               	movlw	0
  2240  04BD  00CA               	movwf	_M4+1
  2241  04BE                     l2227:	
  2242                           
  2243                           ;motion_control.c: 402: }
  2244                           ;motion_control.c: 404: if(parentalLockBuffer[4] == '0' && PORTFbits.RF2 == 1 && M4 == 1
      +                           )
  2245  04BE  3030               	movlw	48
  2246  04BF  0020               	movlb	0	; select bank0
  2247  04C0  066D               	xorwf	_parentalLockBuffer+4,w
  2248  04C1  1D03               	btfss	3,2
  2249  04C2  28F0               	goto	l2063
  2250  04C3  0025               	movlb	5	; select bank5
  2251  04C4  1D0C               	btfss	12,2	;volatile
  2252  04C5  28F0               	goto	l2063
  2253  04C6  0020               	movlb	0	; select bank0
  2254  04C7  0349               	decf	_M4,w
  2255  04C8  044A               	iorwf	_M4+1,w
  2256  04C9  1D03               	btfss	3,2
  2257  04CA  28F0               	goto	l2063
  2258                           
  2259                           ;motion_control.c: 405: {
  2260                           ;motion_control.c: 406: MotionDataFlag = 0;
  2261  04CB  0021               	movlb	1	; select bank1
  2262  04CC  01D9               	clrf	_MotionDataFlag^(0+128)
  2263  04CD  01DA               	clrf	(_MotionDataFlag+1)^(0+128)
  2264                           
  2265                           ;motion_control.c: 407: if(man==1)
  2266  04CE  0361               	decf	main@man^(0+128),w
  2267  04CF  0462               	iorwf	(main@man+1)^(0+128),w
  2268  04D0  1D03               	btfss	3,2
  2269  04D1  2D4D               	goto	l2243
  2270                           
  2271                           ;motion_control.c: 408: {
  2272                           ;motion_control.c: 409: strcpy(sendFinalBufferToGAteway,"MT");
  2273  04D2  3012               	movlw	low (STR_1| (0+32768))
  2274  04D3  0020               	movlb	0	; select bank0
  2275  04D4  00A0               	movwf	strcpy@from
  2276  04D5  3090               	movlw	high (STR_1| (0+32768))
  2277  04D6  00A1               	movwf	strcpy@from+1
  2278  04D7  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2279  04D8  3187  2789  3180   	fcall	_strcpy
  2280                           
  2281                           ;motion_control.c: 410: strcat(sendFinalBufferToGAteway,".");
  2282  04DB  3015               	movlw	low (STR_2| (0+32768))
  2283  04DC  0020               	movlb	0	; select bank0
  2284  04DD  00A0               	movwf	strcat@from
  2285  04DE  3090               	movlw	high (STR_2| (0+32768))
  2286  04DF  00A1               	movwf	strcat@from+1
  2287  04E0  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2288  04E1  3186  26EE  3180   	fcall	_strcat
  2289                           
  2290                           ;motion_control.c: 411: strcat(sendFinalBufferToGAteway,"4");
  2291  04E4  301D               	movlw	low (STR_32| (0+32768))
  2292  04E5  0020               	movlb	0	; select bank0
  2293  04E6  00A0               	movwf	strcat@from
  2294  04E7  3090               	movlw	high (STR_32| (0+32768))
  2295  04E8  00A1               	movwf	strcat@from+1
  2296  04E9  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2297  04EA  3186  26EE  3180   	fcall	_strcat
  2298                           
  2299                           ;motion_control.c: 412: strcat(sendFinalBufferToGAteway,".");
  2300  04ED  3015               	movlw	low (STR_2| (0+32768))
  2301  04EE  0020               	movlb	0	; select bank0
  2302  04EF  00A0               	movwf	strcat@from
  2303  04F0  3090               	movlw	high (STR_2| (0+32768))
  2304  04F1  00A1               	movwf	strcat@from+1
  2305  04F2  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2306  04F3  3186  26EE  3180   	fcall	_strcat
  2307                           
  2308                           ;motion_control.c: 413: strcat(sendFinalBufferToGAteway,"ACTACK");
  2309  04F6  3000               	movlw	low (STR_5| (0+32768))
  2310  04F7  0020               	movlb	0	; select bank0
  2311  04F8  00A0               	movwf	strcat@from
  2312  04F9  3090               	movlw	high (STR_5| (0+32768))
  2313  04FA  00A1               	movwf	strcat@from+1
  2314  04FB  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2315  04FC  3186  26EE  3180   	fcall	_strcat
  2316                           
  2317                           ;motion_control.c: 414: strcat(sendFinalBufferToGAteway,".");
  2318  04FF  3015               	movlw	low (STR_2| (0+32768))
  2319  0500  0020               	movlb	0	; select bank0
  2320  0501  00A0               	movwf	strcat@from
  2321  0502  3090               	movlw	high (STR_2| (0+32768))
  2322  0503  00A1               	movwf	strcat@from+1
  2323  0504  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2324  0505  3186  26EE  3180   	fcall	_strcat
  2325                           
  2326                           ;motion_control.c: 415: strcat(sendFinalBufferToGAteway,"1");
  2327  0508  3019               	movlw	low (STR_7| (0+32768))
  2328  0509  0020               	movlb	0	; select bank0
  2329  050A  00A0               	movwf	strcat@from
  2330  050B  3090               	movlw	high (STR_7| (0+32768))
  2331  050C  00A1               	movwf	strcat@from+1
  2332  050D  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2333  050E  3186  26EE  3180   	fcall	_strcat
  2334                           
  2335                           ;motion_control.c: 416: strcat(sendFinalBufferToGAteway,".");
  2336  0511  3015               	movlw	low (STR_2| (0+32768))
  2337  0512  0020               	movlb	0	; select bank0
  2338  0513  00A0               	movwf	strcat@from
  2339  0514  3090               	movlw	high (STR_2| (0+32768))
  2340  0515  00A1               	movwf	strcat@from+1
  2341  0516  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2342  0517  3186  26EE  3180   	fcall	_strcat
  2343                           
  2344                           ;motion_control.c: 417: strcat(sendFinalBufferToGAteway,"1");
  2345  051A  3019               	movlw	low (STR_7| (0+32768))
  2346  051B  0020               	movlb	0	; select bank0
  2347  051C  00A0               	movwf	strcat@from
  2348  051D  3090               	movlw	high (STR_7| (0+32768))
  2349  051E  00A1               	movwf	strcat@from+1
  2350  051F  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2351  0520  3186  26EE  3180   	fcall	_strcat
  2352                           
  2353                           ;motion_control.c: 418: strcat(sendFinalBufferToGAteway,".");
  2354  0523  3015               	movlw	low (STR_2| (0+32768))
  2355  0524  0020               	movlb	0	; select bank0
  2356  0525  00A0               	movwf	strcat@from
  2357  0526  3090               	movlw	high (STR_2| (0+32768))
  2358  0527  00A1               	movwf	strcat@from+1
  2359  0528  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2360  0529  3186  26EE  3180   	fcall	_strcat
  2361                           
  2362                           ;motion_control.c: 419: strcat(sendFinalBufferToGAteway,"1");
  2363  052C  3019               	movlw	low (STR_7| (0+32768))
  2364  052D  0020               	movlb	0	; select bank0
  2365  052E  00A0               	movwf	strcat@from
  2366  052F  3090               	movlw	high (STR_7| (0+32768))
  2367  0530  00A1               	movwf	strcat@from+1
  2368  0531  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2369  0532  3186  26EE  3180   	fcall	_strcat
  2370                           
  2371                           ;motion_control.c: 420: strcat(sendFinalBufferToGAteway,".");
  2372  0535  3015               	movlw	low (STR_2| (0+32768))
  2373  0536  0020               	movlb	0	; select bank0
  2374  0537  00A0               	movwf	strcat@from
  2375  0538  3090               	movlw	high (STR_2| (0+32768))
  2376  0539  00A1               	movwf	strcat@from+1
  2377  053A  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2378  053B  3186  26EE  3180   	fcall	_strcat
  2379                           
  2380                           ;motion_control.c: 421: strcat(sendFinalBufferToGAteway,"1000|");
  2381  053E  3007               	movlw	low (STR_13| (0+32768))
  2382  053F  0020               	movlb	0	; select bank0
  2383  0540  00A0               	movwf	strcat@from
  2384  0541  3090               	movlw	high (STR_13| (0+32768))
  2385  0542  00A1               	movwf	strcat@from+1
  2386  0543  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2387  0544  3186  26EE  3180   	fcall	_strcat
  2388                           
  2389                           ;motion_control.c: 424: sendAcknowledgmentTOMotion(sendFinalBufferToGAteway);
  2390  0547  3051               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2391  0548  3187  27A4  3180   	fcall	_sendAcknowledgmentTOMotion
  2392                           
  2393                           ;motion_control.c: 426: PORTAbits.RA2=1;
  2394  054B  0020               	movlb	0	; select bank0
  2395  054C  150C               	bsf	12,2	;volatile
  2396  054D                     l2243:	
  2397                           
  2398                           ;motion_control.c: 427: }
  2399                           ;motion_control.c: 428: man=0;
  2400  054D  0021               	movlb	1	; select bank1
  2401  054E  01E1               	clrf	main@man^(0+128)
  2402  054F  01E2               	clrf	(main@man+1)^(0+128)
  2403                           
  2404                           ;motion_control.c: 429: M4=0;
  2405  0550  0020               	movlb	0	; select bank0
  2406  0551  01C9               	clrf	_M4
  2407  0552  01CA               	clrf	_M4+1
  2408  0553  28F0               	goto	l2063
  2409  0554                     __end_of_main:	
  2410                           
  2411                           	psect	text1
  2412  0789                     __ptext1:	
  2413 ;; *************** function _strcpy *****************
  2414 ;; Defined at:
  2415 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;  to              1    wreg     PTR unsigned char 
  2418 ;;		 -> sendFinalBufferToGAteway(24), 
  2419 ;;  from            2    0[BANK0 ] PTR const unsigned char 
  2420 ;;		 -> STR_91(3), STR_78(3), STR_67(3), STR_56(3), 
  2421 ;;		 -> STR_43(3), STR_30(3), STR_22(3), STR_14(3), 
  2422 ;;		 -> STR_1(3), 
  2423 ;; Auto vars:     Size  Location     Type
  2424 ;;  to              1    4[BANK0 ] PTR unsigned char 
  2425 ;;		 -> sendFinalBufferToGAteway(24), 
  2426 ;;  cp              1    3[BANK0 ] PTR unsigned char 
  2427 ;;		 -> sendFinalBufferToGAteway(24), 
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  1    wreg      PTR unsigned char 
  2430 ;; Registers used:
  2431 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2437 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  2438 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  2439 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  2440 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0
  2441 ;;Total ram usage:        5 bytes
  2442 ;; Hardware stack levels used:    1
  2443 ;; Hardware stack levels required when called:    2
  2444 ;; This function calls:
  2445 ;;		Nothing
  2446 ;; This function is called by:
  2447 ;;		_main
  2448 ;;		_MotionControl
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452                           
  2453                           ;psect for function _strcpy
  2454  0789                     _strcpy:	
  2455                           
  2456                           ;incstack = 0
  2457                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  2458                           ;strcpy@to stored from wreg
  2459  0789  0020               	movlb	0	; select bank0
  2460  078A  00A4               	movwf	strcpy@to
  2461  078B  0824               	movf	strcpy@to,w
  2462  078C  00A2               	movwf	??_strcpy
  2463  078D  0822               	movf	??_strcpy,w
  2464  078E  00A3               	movwf	strcpy@cp
  2465  078F                     l2025:	
  2466  078F  0823               	movf	strcpy@cp,w
  2467  0790  0086               	movwf	6
  2468  0791  0187               	clrf	7
  2469  0792  0820               	movf	strcpy@from,w
  2470  0793  0084               	movwf	4
  2471  0794  0821               	movf	strcpy@from+1,w
  2472  0795  0085               	movwf	5
  2473  0796  0800               	movf	0,w	;code access
  2474  0797  3FC0               	movwi [0]fsr1
  2475  0798  0889               	movf	9,f
  2476  0799  1903               	btfsc	3,2
  2477  079A  0008               	return
  2478  079B  3001               	movlw	1
  2479  079C  00A2               	movwf	??_strcpy
  2480  079D  0822               	movf	??_strcpy,w
  2481  079E  07A3               	addwf	strcpy@cp,f
  2482  079F  3001               	movlw	1
  2483  07A0  07A0               	addwf	strcpy@from,f
  2484  07A1  3000               	movlw	0
  2485  07A2  3DA1               	addwfc	strcpy@from+1,f
  2486  07A3  2F8F               	goto	l2025
  2487  07A4                     __end_of_strcpy:	
  2488                           ;	Return value of _strcpy is never used
  2489                           
  2490                           
  2491                           	psect	text2
  2492  06EE                     __ptext2:	
  2493 ;; *************** function _strcat *****************
  2494 ;; Defined at:
  2495 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcat.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;  to              1    wreg     PTR unsigned char 
  2498 ;;		 -> sendFinalBufferToGAteway(24), 
  2499 ;;  from            2    0[BANK0 ] PTR const unsigned char 
  2500 ;;		 -> STR_103(6), STR_102(2), STR_101(2), STR_100(2), 
  2501 ;;		 -> STR_99(2), STR_98(2), STR_97(2), STR_96(2), 
  2502 ;;		 -> STR_95(7), STR_94(2), STR_93(2), STR_92(2), 
  2503 ;;		 -> STR_90(6), STR_89(2), STR_88(2), STR_87(2), 
  2504 ;;		 -> STR_86(2), STR_85(2), STR_84(2), STR_83(2), 
  2505 ;;		 -> STR_82(7), STR_81(2), STR_80(2), STR_79(2), 
  2506 ;;		 -> STR_77(6), STR_76(2), STR_75(2), STR_74(2), 
  2507 ;;		 -> STR_73(2), STR_72(2), STR_71(7), STR_70(2), 
  2508 ;;		 -> STR_69(2), STR_68(2), STR_66(6), STR_65(2), 
  2509 ;;		 -> STR_64(2), STR_63(2), STR_62(2), STR_61(2), 
  2510 ;;		 -> STR_60(7), STR_59(2), STR_58(2), STR_57(2), 
  2511 ;;		 -> STR_55(6), STR_54(2), STR_53(2), STR_52(2), 
  2512 ;;		 -> STR_51(2), STR_50(2), STR_49(2), STR_48(2), 
  2513 ;;		 -> STR_47(7), STR_46(2), STR_45(2), STR_44(2), 
  2514 ;;		 -> STR_42(6), STR_41(2), STR_40(2), STR_39(2), 
  2515 ;;		 -> STR_38(2), STR_37(2), STR_36(2), STR_35(2), 
  2516 ;;		 -> STR_34(7), STR_33(2), STR_32(2), STR_31(2), 
  2517 ;;		 -> STR_29(2), STR_28(2), STR_27(2), STR_26(5), 
  2518 ;;		 -> STR_25(2), STR_24(2), STR_23(2), STR_21(2), 
  2519 ;;		 -> STR_20(2), STR_19(2), STR_18(5), STR_17(2), 
  2520 ;;		 -> STR_16(2), STR_15(2), STR_13(6), STR_12(2), 
  2521 ;;		 -> STR_11(2), STR_10(2), STR_9(2), STR_8(2), 
  2522 ;;		 -> STR_7(2), STR_6(2), STR_5(7), STR_4(2), 
  2523 ;;		 -> STR_3(2), STR_2(2), 
  2524 ;; Auto vars:     Size  Location     Type
  2525 ;;  to              1    4[BANK0 ] PTR unsigned char 
  2526 ;;		 -> sendFinalBufferToGAteway(24), 
  2527 ;;  cp              1    3[BANK0 ] PTR unsigned char 
  2528 ;;		 -> sendFinalBufferToGAteway(24), 
  2529 ;; Return value:  Size  Location     Type
  2530 ;;                  1    wreg      PTR unsigned char 
  2531 ;; Registers used:
  2532 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  2533 ;; Tracked objects:
  2534 ;;		On entry : 0/0
  2535 ;;		On exit  : 0/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2538 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  2539 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  2540 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  2541 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0
  2542 ;;Total ram usage:        5 bytes
  2543 ;; Hardware stack levels used:    1
  2544 ;; Hardware stack levels required when called:    2
  2545 ;; This function calls:
  2546 ;;		Nothing
  2547 ;; This function is called by:
  2548 ;;		_main
  2549 ;;		_MotionControl
  2550 ;; This function uses a non-reentrant model
  2551 ;;
  2552                           
  2553                           
  2554                           ;psect for function _strcat
  2555  06EE                     _strcat:	
  2556                           
  2557                           ;incstack = 0
  2558                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  2559                           ;strcat@to stored from wreg
  2560  06EE  0020               	movlb	0	; select bank0
  2561  06EF  00A4               	movwf	strcat@to
  2562  06F0  0824               	movf	strcat@to,w
  2563  06F1  00A2               	movwf	??_strcat
  2564  06F2  0822               	movf	??_strcat,w
  2565  06F3  00A3               	movwf	strcat@cp
  2566  06F4                     l2031:	
  2567  06F4  0823               	movf	strcat@cp,w
  2568  06F5  0086               	movwf	6
  2569  06F6  0187               	clrf	7
  2570  06F7  0801               	movf	1,w
  2571  06F8  1903               	btfsc	3,2
  2572  06F9  2F07               	goto	l2037
  2573  06FA  3001               	movlw	1
  2574  06FB  00A2               	movwf	??_strcat
  2575  06FC  0822               	movf	??_strcat,w
  2576  06FD  07A3               	addwf	strcat@cp,f
  2577  06FE  2EF4               	goto	l2031
  2578  06FF                     l2033:	
  2579  06FF  3001               	movlw	1
  2580  0700  00A2               	movwf	??_strcat
  2581  0701  0822               	movf	??_strcat,w
  2582  0702  07A3               	addwf	strcat@cp,f
  2583  0703  3001               	movlw	1
  2584  0704  07A0               	addwf	strcat@from,f
  2585  0705  3000               	movlw	0
  2586  0706  3DA1               	addwfc	strcat@from+1,f
  2587  0707                     l2037:	
  2588  0707  0823               	movf	strcat@cp,w
  2589  0708  0086               	movwf	6
  2590  0709  0187               	clrf	7
  2591  070A  0820               	movf	strcat@from,w
  2592  070B  0084               	movwf	4
  2593  070C  0821               	movf	strcat@from+1,w
  2594  070D  0085               	movwf	5
  2595  070E  0800               	movf	0,w	;code access
  2596  070F  3FC0               	movwi [0]fsr1
  2597  0710  0889               	movf	9,f
  2598  0711  1903               	btfsc	3,2
  2599  0712  0008               	return
  2600  0713  2EFF               	goto	l2033
  2601  0714                     __end_of_strcat:	
  2602                           ;	Return value of _strcat is never used
  2603                           
  2604                           
  2605                           	psect	text3
  2606  07A4                     __ptext3:	
  2607 ;; *************** function _sendAcknowledgmentTOMotion *****************
  2608 ;; Defined at:
  2609 ;;		line 760 in file "motion_control.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;  currentState    1    wreg     PTR unsigned char 
  2612 ;;		 -> sendFinalBufferToGAteway(24), 
  2613 ;; Auto vars:     Size  Location     Type
  2614 ;;  currentState    1    3[BANK0 ] PTR unsigned char 
  2615 ;;		 -> sendFinalBufferToGAteway(24), 
  2616 ;;  Tx_count        2    1[BANK0 ] int 
  2617 ;; Return value:  Size  Location     Type
  2618 ;;                  1    wreg      void 
  2619 ;; Registers used:
  2620 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2621 ;; Tracked objects:
  2622 ;;		On entry : 0/0
  2623 ;;		On exit  : 0/0
  2624 ;;		Unchanged: 0/0
  2625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2627 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  2628 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  2629 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  2630 ;;Total ram usage:        4 bytes
  2631 ;; Hardware stack levels used:    1
  2632 ;; Hardware stack levels required when called:    2
  2633 ;; This function calls:
  2634 ;;		Nothing
  2635 ;; This function is called by:
  2636 ;;		_main
  2637 ;;		_MotionControl
  2638 ;; This function uses a non-reentrant model
  2639 ;;
  2640                           
  2641                           
  2642                           ;psect for function _sendAcknowledgmentTOMotion
  2643  07A4                     _sendAcknowledgmentTOMotion:	
  2644                           
  2645                           ;incstack = 0
  2646                           ; Regs used in _sendAcknowledgmentTOMotion: [wreg+fsr1l+fsr1h+status,2+status,0]
  2647                           ;sendAcknowledgmentTOMotion@currentStateBufferMotion stored from wreg
  2648  07A4  0020               	movlb	0	; select bank0
  2649  07A5  00A3               	movwf	sendAcknowledgmentTOMotion@currentStateBufferMotion
  2650                           
  2651                           ;motion_control.c: 761: int Tx_count=0;
  2652  07A6  01A1               	clrf	sendAcknowledgmentTOMotion@Tx_count
  2653  07A7  01A2               	clrf	sendAcknowledgmentTOMotion@Tx_count+1
  2654  07A8                     l2047:	
  2655                           ;motion_control.c: 762: while(currentStateBufferMotion != (0))
  2656                           
  2657  07A8  0823               	movf	sendAcknowledgmentTOMotion@currentStateBufferMotion,w
  2658  07A9  1903               	btfsc	3,2
  2659  07AA  0008               	return
  2660  07AB                     l242:	
  2661                           ;motion_control.c: 763: {
  2662                           ;motion_control.c: 764: while (!TX1STAbits.TRMT);
  2663                           
  2664  07AB  0023               	movlb	3	; select bank3
  2665  07AC  1C9E               	btfss	30,1	;volatile
  2666  07AD  2FAB               	goto	l242
  2667                           
  2668                           ;motion_control.c: 765: TX1REG = *currentStateBufferMotion;
  2669  07AE  0020               	movlb	0	; select bank0
  2670  07AF  0823               	movf	sendAcknowledgmentTOMotion@currentStateBufferMotion,w
  2671  07B0  0086               	movwf	6
  2672  07B1  0187               	clrf	7
  2673  07B2  0801               	movf	1,w
  2674  07B3  0023               	movlb	3	; select bank3
  2675  07B4  009A               	movwf	26	;volatile
  2676                           
  2677                           ;motion_control.c: 766: *currentStateBufferMotion++;
  2678  07B5  3001               	movlw	1
  2679  07B6  0020               	movlb	0	; select bank0
  2680  07B7  00A0               	movwf	??_sendAcknowledgmentTOMotion
  2681  07B8  0820               	movf	??_sendAcknowledgmentTOMotion,w
  2682  07B9  07A3               	addwf	sendAcknowledgmentTOMotion@currentStateBufferMotion,f
  2683                           
  2684                           ;motion_control.c: 767: Tx_count++;
  2685  07BA  3001               	movlw	1
  2686  07BB  07A1               	addwf	sendAcknowledgmentTOMotion@Tx_count,f
  2687  07BC  3000               	movlw	0
  2688  07BD  3DA2               	addwfc	sendAcknowledgmentTOMotion@Tx_count+1,f
  2689  07BE  2FA8               	goto	l2047
  2690  07BF                     __end_of_sendAcknowledgmentTOMotion:	
  2691                           
  2692                           	psect	text4
  2693  0750                     __ptext4:	
  2694 ;; *************** function _errorsMain *****************
  2695 ;; Defined at:
  2696 ;;		line 740 in file "motion_control.c"
  2697 ;; Parameters:    Size  Location     Type
  2698 ;;  errNum          1    wreg     PTR unsigned char 
  2699 ;;		 -> ErrorNames(5), 
  2700 ;; Auto vars:     Size  Location     Type
  2701 ;;  errNum          1    3[BANK0 ] PTR unsigned char 
  2702 ;;		 -> ErrorNames(5), 
  2703 ;;  Tx_count        2    1[BANK0 ] int 
  2704 ;; Return value:  Size  Location     Type
  2705 ;;                  1    wreg      void 
  2706 ;; Registers used:
  2707 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2708 ;; Tracked objects:
  2709 ;;		On entry : 0/0
  2710 ;;		On exit  : 0/0
  2711 ;;		Unchanged: 0/0
  2712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2714 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  2715 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  2716 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  2717 ;;Total ram usage:        4 bytes
  2718 ;; Hardware stack levels used:    1
  2719 ;; Hardware stack levels required when called:    2
  2720 ;; This function calls:
  2721 ;;		Nothing
  2722 ;; This function is called by:
  2723 ;;		_main
  2724 ;; This function uses a non-reentrant model
  2725 ;;
  2726                           
  2727                           
  2728                           ;psect for function _errorsMain
  2729  0750                     _errorsMain:	
  2730                           
  2731                           ;incstack = 0
  2732                           ; Regs used in _errorsMain: [wreg+fsr1l+fsr1h+status,2+status,0]
  2733                           ;errorsMain@errNum stored from wreg
  2734  0750  0020               	movlb	0	; select bank0
  2735  0751  00A3               	movwf	errorsMain@errNum
  2736                           
  2737                           ;motion_control.c: 741: int Tx_count=0;
  2738  0752  01A1               	clrf	errorsMain@Tx_count
  2739  0753  01A2               	clrf	errorsMain@Tx_count+1
  2740  0754                     l2057:	
  2741                           ;motion_control.c: 742: while(Tx_count!=4)
  2742                           
  2743  0754  3004               	movlw	4
  2744  0755  0621               	xorwf	errorsMain@Tx_count,w
  2745  0756  0422               	iorwf	errorsMain@Tx_count+1,w
  2746  0757  1903               	btfsc	3,2
  2747  0758  0008               	return
  2748  0759                     l224:	
  2749                           ;motion_control.c: 743: {
  2750                           ;motion_control.c: 744: while (!TX1STAbits.TRMT);
  2751                           
  2752  0759  0023               	movlb	3	; select bank3
  2753  075A  1C9E               	btfss	30,1	;volatile
  2754  075B  2F59               	goto	l224
  2755                           
  2756                           ;motion_control.c: 745: TX1REG = *errNum;
  2757  075C  0020               	movlb	0	; select bank0
  2758  075D  0823               	movf	errorsMain@errNum,w
  2759  075E  0086               	movwf	6
  2760  075F  0187               	clrf	7
  2761  0760  0801               	movf	1,w
  2762  0761  0023               	movlb	3	; select bank3
  2763  0762  009A               	movwf	26	;volatile
  2764                           
  2765                           ;motion_control.c: 746: *errNum++;
  2766  0763  3001               	movlw	1
  2767  0764  0020               	movlb	0	; select bank0
  2768  0765  00A0               	movwf	??_errorsMain
  2769  0766  0820               	movf	??_errorsMain,w
  2770  0767  07A3               	addwf	errorsMain@errNum,f
  2771                           
  2772                           ;motion_control.c: 747: Tx_count++;
  2773  0768  3001               	movlw	1
  2774  0769  07A1               	addwf	errorsMain@Tx_count,f
  2775  076A  3000               	movlw	0
  2776  076B  3DA2               	addwfc	errorsMain@Tx_count+1,f
  2777  076C  2F54               	goto	l2057
  2778  076D                     __end_of_errorsMain:	
  2779                           
  2780                           	psect	text5
  2781  06BF                     __ptext5:	
  2782 ;; *************** function _copyReceivedDataBuffer *****************
  2783 ;; Defined at:
  2784 ;;		line 770 in file "motion_control.c"
  2785 ;; Parameters:    Size  Location     Type
  2786 ;;		None
  2787 ;; Auto vars:     Size  Location     Type
  2788 ;;  dataBufferCo    2    1[BANK0 ] int 
  2789 ;; Return value:  Size  Location     Type
  2790 ;;                  1    wreg      void 
  2791 ;; Registers used:
  2792 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2793 ;; Tracked objects:
  2794 ;;		On entry : 0/0
  2795 ;;		On exit  : 0/0
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2799 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  2800 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  2801 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0
  2802 ;;Total ram usage:        3 bytes
  2803 ;; Hardware stack levels used:    1
  2804 ;; Hardware stack levels required when called:    2
  2805 ;; This function calls:
  2806 ;;		Nothing
  2807 ;; This function is called by:
  2808 ;;		_main
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           
  2813                           ;psect for function _copyReceivedDataBuffer
  2814  06BF                     _copyReceivedDataBuffer:	
  2815                           
  2816                           ;motion_control.c: 771: int dataBufferCounter=2;
  2817                           
  2818                           ;incstack = 0
  2819                           ; Regs used in _copyReceivedDataBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  2820  06BF  3002               	movlw	2
  2821  06C0  0020               	movlb	0	; select bank0
  2822  06C1  00A1               	movwf	copyReceivedDataBuffer@dataBufferCounter
  2823  06C2  3000               	movlw	0
  2824  06C3  00A2               	movwf	copyReceivedDataBuffer@dataBufferCounter+1
  2825                           
  2826                           ;motion_control.c: 772: for(dataBufferCounter=2;dataBufferCounter<9;dataBufferCounter++)
      +                          {
  2827  06C4  3002               	movlw	2
  2828  06C5  00A1               	movwf	copyReceivedDataBuffer@dataBufferCounter
  2829  06C6  3000               	movlw	0
  2830  06C7  00A2               	movwf	copyReceivedDataBuffer@dataBufferCounter+1
  2831  06C8                     L1:	
  2832  06C8  0822               	movf	copyReceivedDataBuffer@dataBufferCounter+1,w
  2833  06C9  3A80               	xorlw	128
  2834  06CA  00A0               	movwf	??_copyReceivedDataBuffer
  2835  06CB  3080               	movlw	128
  2836  06CC  0220               	subwf	??_copyReceivedDataBuffer,w
  2837  06CD  1D03               	skipz
  2838  06CE  2ED1               	goto	u1995
  2839  06CF  3009               	movlw	9
  2840  06D0  0221               	subwf	copyReceivedDataBuffer@dataBufferCounter,w
  2841  06D1                     u1995:	
  2842  06D1  1803               	btfsc	3,0
  2843  06D2  0008               	return
  2844                           
  2845                           ;motion_control.c: 773: tempReceivedDataBuffer[dataBufferCounter-2]=mainReceivedDataBuff
      +                          er[dataBufferCounter];
  2846  06D3  0020               	movlb	0	; select bank0
  2847  06D4  0821               	movf	copyReceivedDataBuffer@dataBufferCounter,w
  2848  06D5  3EB2               	addlw	(low (_mainReceivedDataBuffer| 0))& (0+255)
  2849  06D6  0086               	movwf	6
  2850  06D7  0187               	clrf	7
  2851  06D8  0801               	movf	1,w
  2852  06D9  00A0               	movwf	??_copyReceivedDataBuffer
  2853  06DA  0821               	movf	copyReceivedDataBuffer@dataBufferCounter,w
  2854  06DB  3EFE               	addlw	254
  2855  06DC  3EC4               	addlw	(low (_tempReceivedDataBuffer| 0))& (0+255)
  2856  06DD  0086               	movwf	6
  2857  06DE  0187               	clrf	7
  2858  06DF  0820               	movf	??_copyReceivedDataBuffer,w
  2859  06E0  0081               	movwf	1
  2860                           
  2861                           ;motion_control.c: 774: mainReceivedDataBuffer[dataBufferCounter]='#';
  2862  06E1  3023               	movlw	35
  2863  06E2  00A0               	movwf	??_copyReceivedDataBuffer
  2864  06E3  0821               	movf	copyReceivedDataBuffer@dataBufferCounter,w
  2865  06E4  3EB2               	addlw	(low (_mainReceivedDataBuffer| 0))& (0+255)
  2866  06E5  0086               	movwf	6
  2867  06E6  0187               	clrf	7
  2868  06E7  0820               	movf	??_copyReceivedDataBuffer,w
  2869  06E8  0081               	movwf	1
  2870  06E9  3001               	movlw	1
  2871  06EA  07A1               	addwf	copyReceivedDataBuffer@dataBufferCounter,f
  2872  06EB  3000               	movlw	0
  2873  06EC  3DA2               	addwfc	copyReceivedDataBuffer@dataBufferCounter+1,f
  2874  06ED  2EC8               	goto	L1
  2875  06EE                     __end_of_copyReceivedDataBuffer:	
  2876                           
  2877                           	psect	text6
  2878  0554                     __ptext6:	
  2879 ;; *************** function _applianceControl *****************
  2880 ;; Defined at:
  2881 ;;		line 559 in file "motion_control.c"
  2882 ;; Parameters:    Size  Location     Type
  2883 ;;  charSwitchMS    1    wreg     unsigned char 
  2884 ;;  charSwitchLS    1   14[BANK0 ] unsigned char 
  2885 ;;  charSwitchST    1   15[BANK0 ] unsigned char 
  2886 ;;  chDimmerSpee    1   16[BANK0 ] unsigned char 
  2887 ;;  chDimmerSpee    1   17[BANK0 ] unsigned char 
  2888 ;;  charParental    1   18[BANK0 ] unsigned char 
  2889 ;;  charFinalFra    1   19[BANK0 ] unsigned char 
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;  charSwitchMS    1   24[BANK0 ] unsigned char 
  2892 ;;  currentState    2   33[BANK0 ] int 
  2893 ;;  dimmerSpeedS    2   27[BANK0 ] unsigned char [2]
  2894 ;;  switchNumber    2   25[BANK0 ] unsigned char [2]
  2895 ;;  integerSwitc    2   31[BANK0 ] int 
  2896 ;;  integerSwitc    2   29[BANK0 ] int 
  2897 ;;  integerSpeed    2   22[BANK0 ] int 
  2898 ;; Return value:  Size  Location     Type
  2899 ;;                  1    wreg      void 
  2900 ;; Registers used:
  2901 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2902 ;; Tracked objects:
  2903 ;;		On entry : 0/0
  2904 ;;		On exit  : 0/0
  2905 ;;		Unchanged: 0/0
  2906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2907 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  2908 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0
  2909 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  2910 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0
  2911 ;;Total ram usage:       21 bytes
  2912 ;; Hardware stack levels used:    1
  2913 ;; Hardware stack levels required when called:    4
  2914 ;; This function calls:
  2915 ;;		_atoi
  2916 ;;		_sendAcknowledgment
  2917 ;; This function is called by:
  2918 ;;		_main
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           
  2923                           ;psect for function _applianceControl
  2924  0554                     _applianceControl:	
  2925                           
  2926                           ;incstack = 0
  2927                           ; Regs used in _applianceControl: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2928                           ;applianceControl@charSwitchMSB stored from wreg
  2929  0554  0020               	movlb	0	; select bank0
  2930  0555  00B8               	movwf	applianceControl@charSwitchMSB
  2931                           
  2932                           ;motion_control.c: 563: int integerSwitchNumber = 0;
  2933  0556  01BD               	clrf	applianceControl@integerSwitchNumber
  2934  0557  01BE               	clrf	applianceControl@integerSwitchNumber+1
  2935                           
  2936                           ;motion_control.c: 564: int integerSwitchState = 0;
  2937  0558  01BF               	clrf	applianceControl@integerSwitchState
  2938  0559  01C0               	clrf	applianceControl@integerSwitchState+1
  2939                           
  2940                           ;motion_control.c: 565: int integerSpeed = 0;
  2941  055A  01B6               	clrf	applianceControl@integerSpeed
  2942  055B  01B7               	clrf	applianceControl@integerSpeed+1
  2943                           
  2944                           ;motion_control.c: 566: int currentStateBufferPositions=0;
  2945  055C  01C1               	clrf	applianceControl@currentStateBufferPositions
  2946  055D  01C2               	clrf	applianceControl@currentStateBufferPositions+1
  2947                           
  2948                           ;motion_control.c: 569: char switchNumberStringBuffer[2]="#";
  2949  055E  0021               	movlb	1	; select bank1
  2950  055F  0851               	movf	(applianceControl@F3836+1)^(0+128),w
  2951  0560  0020               	movlb	0	; select bank0
  2952  0561  00BA               	movwf	applianceControl@switchNumberStringBuffer+1
  2953  0562  0021               	movlb	1	; select bank1
  2954  0563  0850               	movf	applianceControl@F3836^(0+128),w
  2955  0564  0020               	movlb	0	; select bank0
  2956  0565  00B9               	movwf	applianceControl@switchNumberStringBuffer
  2957                           
  2958                           ;motion_control.c: 570: char dimmerSpeedStringBuffer[2]="#";
  2959  0566  0021               	movlb	1	; select bank1
  2960  0567  084F               	movf	(applianceControl@F3838+1)^(0+128),w
  2961  0568  0020               	movlb	0	; select bank0
  2962  0569  00BC               	movwf	applianceControl@dimmerSpeedStringBuffer+1
  2963  056A  0021               	movlb	1	; select bank1
  2964  056B  084E               	movf	applianceControl@F3838^(0+128),w
  2965  056C  0020               	movlb	0	; select bank0
  2966  056D  00BB               	movwf	applianceControl@dimmerSpeedStringBuffer
  2967                           
  2968                           ;motion_control.c: 572: switchNumberStringBuffer[0]=charSwitchMSB;
  2969  056E  0838               	movf	applianceControl@charSwitchMSB,w
  2970  056F  00B4               	movwf	??_applianceControl
  2971  0570  0834               	movf	??_applianceControl,w
  2972  0571  00B9               	movwf	applianceControl@switchNumberStringBuffer
  2973                           
  2974                           ;motion_control.c: 573: switchNumberStringBuffer[1]=charSwitchLSB;
  2975  0572  082E               	movf	applianceControl@charSwitchLSB,w
  2976  0573  00B4               	movwf	??_applianceControl
  2977  0574  0834               	movf	??_applianceControl,w
  2978  0575  00BA               	movwf	applianceControl@switchNumberStringBuffer+1
  2979                           
  2980                           ;motion_control.c: 574: integerSwitchNumber = atoi(switchNumberStringBuffer);
  2981  0576  3039               	movlw	(low (applianceControl@switchNumberStringBuffer| 0))& (0+255)
  2982  0577  3186  261D  3185   	fcall	_atoi
  2983  057A  0020               	movlb	0	; select bank0
  2984  057B  0827               	movf	?_atoi+1,w
  2985  057C  00BE               	movwf	applianceControl@integerSwitchNumber+1
  2986  057D  0826               	movf	?_atoi,w
  2987  057E  00BD               	movwf	applianceControl@integerSwitchNumber
  2988                           
  2989                           ;motion_control.c: 578: integerSwitchState = charSwitchSTATE-'0';
  2990  057F  082F               	movf	applianceControl@charSwitchSTATE,w
  2991  0580  3ED0               	addlw	208
  2992  0581  00BF               	movwf	applianceControl@integerSwitchState
  2993  0582  30FF               	movlw	255
  2994  0583  1803               	skipnc
  2995  0584  3000               	movlw	0
  2996  0585  00C0               	movwf	applianceControl@integerSwitchState+1
  2997                           
  2998                           ;motion_control.c: 581: dimmerSpeedStringBuffer[0]=chDimmerSpeedMSB;
  2999  0586  0830               	movf	applianceControl@chDimmerSpeedMSB,w
  3000  0587  00B4               	movwf	??_applianceControl
  3001  0588  0834               	movf	??_applianceControl,w
  3002  0589  00BB               	movwf	applianceControl@dimmerSpeedStringBuffer
  3003                           
  3004                           ;motion_control.c: 582: dimmerSpeedStringBuffer[1]=chDimmerSpeedLSB;
  3005  058A  0831               	movf	applianceControl@chDimmerSpeedLSB,w
  3006  058B  00B4               	movwf	??_applianceControl
  3007  058C  0834               	movf	??_applianceControl,w
  3008  058D  00BC               	movwf	applianceControl@dimmerSpeedStringBuffer+1
  3009                           
  3010                           ;motion_control.c: 583: integerSpeed = atoi(dimmerSpeedStringBuffer);
  3011  058E  303B               	movlw	(low (applianceControl@dimmerSpeedStringBuffer| 0))& (0+255)
  3012  058F  3186  261D  3185   	fcall	_atoi
  3013  0592  0020               	movlb	0	; select bank0
  3014  0593  0827               	movf	?_atoi+1,w
  3015  0594  00B7               	movwf	applianceControl@integerSpeed+1
  3016  0595  0826               	movf	?_atoi,w
  3017  0596  00B6               	movwf	applianceControl@integerSpeed
  3018                           
  3019                           ;motion_control.c: 587: parentalLockBuffer[integerSwitchNumber] = charParentalControl;
  3020  0597  0832               	movf	applianceControl@charParentalControl,w
  3021  0598  00B4               	movwf	??_applianceControl
  3022  0599  083D               	movf	applianceControl@integerSwitchNumber,w
  3023  059A  3E69               	addlw	(low (_parentalLockBuffer| 0))& (0+255)
  3024  059B  0086               	movwf	6
  3025  059C  0187               	clrf	7
  3026  059D  0834               	movf	??_applianceControl,w
  3027  059E  0081               	movwf	1
  3028                           
  3029                           ;motion_control.c: 591: currentStateBufferPositions = ((1+4*(integerSwitchNumber))-5);
  3030  059F  083E               	movf	applianceControl@integerSwitchNumber+1,w
  3031  05A0  00B5               	movwf	??_applianceControl+1
  3032  05A1  083D               	movf	applianceControl@integerSwitchNumber,w
  3033  05A2  00B4               	movwf	??_applianceControl
  3034  05A3  35B4               	lslf	??_applianceControl,f
  3035  05A4  0DB5               	rlf	??_applianceControl+1,f
  3036  05A5  35B4               	lslf	??_applianceControl,f
  3037  05A6  0DB5               	rlf	??_applianceControl+1,f
  3038  05A7  0834               	movf	??_applianceControl,w
  3039  05A8  3EFC               	addlw	252
  3040  05A9  00C1               	movwf	applianceControl@currentStateBufferPositions
  3041  05AA  30FF               	movlw	255
  3042  05AB  3D35               	addwfc	??_applianceControl+1,w
  3043  05AC  00C2               	movwf	applianceControl@currentStateBufferPositions+1
  3044                           
  3045                           ;motion_control.c: 592: currentStateBuffer[currentStateBufferPositions++] = 'G';
  3046  05AD  3047               	movlw	71
  3047  05AE  00B4               	movwf	??_applianceControl
  3048  05AF  0841               	movf	applianceControl@currentStateBufferPositions,w
  3049  05B0  3E20               	addlw	(low (_currentStateBuffer| (0+256)))& (0+255)
  3050  05B1  0086               	movwf	6
  3051  05B2  3001               	movlw	1	; select bank2/3
  3052  05B3  0087               	movwf	7
  3053  05B4  0834               	movf	??_applianceControl,w
  3054  05B5  0081               	movwf	1
  3055  05B6  3001               	movlw	1
  3056  05B7  07C1               	addwf	applianceControl@currentStateBufferPositions,f
  3057  05B8  3000               	movlw	0
  3058  05B9  3DC2               	addwfc	applianceControl@currentStateBufferPositions+1,f
  3059                           
  3060                           ;motion_control.c: 593: currentStateBuffer[currentStateBufferPositions++] = charSwitchST
      +                          ATE;
  3061  05BA  082F               	movf	applianceControl@charSwitchSTATE,w
  3062  05BB  00B4               	movwf	??_applianceControl
  3063  05BC  0841               	movf	applianceControl@currentStateBufferPositions,w
  3064  05BD  3E20               	addlw	(low (_currentStateBuffer| (0+256)))& (0+255)
  3065  05BE  0086               	movwf	6
  3066  05BF  3001               	movlw	1	; select bank2/3
  3067  05C0  0087               	movwf	7
  3068  05C1  0834               	movf	??_applianceControl,w
  3069  05C2  0081               	movwf	1
  3070  05C3  3001               	movlw	1
  3071  05C4  07C1               	addwf	applianceControl@currentStateBufferPositions,f
  3072  05C5  3000               	movlw	0
  3073  05C6  3DC2               	addwfc	applianceControl@currentStateBufferPositions+1,f
  3074                           
  3075                           ;motion_control.c: 594: currentStateBuffer[currentStateBufferPositions++] = charSwitchMS
      +                          B;
  3076  05C7  0838               	movf	applianceControl@charSwitchMSB,w
  3077  05C8  00B4               	movwf	??_applianceControl
  3078  05C9  0841               	movf	applianceControl@currentStateBufferPositions,w
  3079  05CA  3E20               	addlw	(low (_currentStateBuffer| (0+256)))& (0+255)
  3080  05CB  0086               	movwf	6
  3081  05CC  3001               	movlw	1	; select bank2/3
  3082  05CD  0087               	movwf	7
  3083  05CE  0834               	movf	??_applianceControl,w
  3084  05CF  0081               	movwf	1
  3085  05D0  3001               	movlw	1
  3086  05D1  07C1               	addwf	applianceControl@currentStateBufferPositions,f
  3087  05D2  3000               	movlw	0
  3088  05D3  3DC2               	addwfc	applianceControl@currentStateBufferPositions+1,f
  3089                           
  3090                           ;motion_control.c: 595: currentStateBuffer[currentStateBufferPositions] = charSwitchLSB;
  3091  05D4  082E               	movf	applianceControl@charSwitchLSB,w
  3092  05D5  00B4               	movwf	??_applianceControl
  3093  05D6  0841               	movf	applianceControl@currentStateBufferPositions,w
  3094  05D7  3E20               	addlw	(low (_currentStateBuffer| (0+256)))& (0+255)
  3095  05D8  0086               	movwf	6
  3096  05D9  3001               	movlw	1	; select bank2/3
  3097  05DA  0087               	movwf	7
  3098  05DB  0834               	movf	??_applianceControl,w
  3099  05DC  0081               	movwf	1
  3100                           
  3101                           ;motion_control.c: 597: currentStateBufferPositions-=3;
  3102  05DD  30FD               	movlw	253
  3103  05DE  07C1               	addwf	applianceControl@currentStateBufferPositions,f
  3104  05DF  30FF               	movlw	255
  3105  05E0  3DC2               	addwfc	applianceControl@currentStateBufferPositions+1,f
  3106                           
  3107                           ;motion_control.c: 598: if(charFinalFrameState=='1')
  3108  05E1  3031               	movlw	49
  3109  05E2  0633               	xorwf	applianceControl@charFinalFrameState,w
  3110  05E3  1D03               	btfss	3,2
  3111  05E4  2E08               	goto	l2013
  3112                           
  3113                           ;motion_control.c: 599: {
  3114                           ;motion_control.c: 600: sendAcknowledgment(currentStateBuffer+currentStateBufferPosition
      +                          s);
  3115  05E5  0841               	movf	applianceControl@currentStateBufferPositions,w
  3116  05E6  3E20               	addlw	(low (_currentStateBuffer| (0+256)))& (0+255)
  3117  05E7  3187  2732  3185   	fcall	_sendAcknowledgment
  3118                           
  3119                           ;motion_control.c: 601: }
  3120                           ;motion_control.c: 603: switch(integerSwitchNumber){
  3121  05EA  2E08               	goto	l2013
  3122  05EB                     l2003:	
  3123                           ;motion_control.c: 604: case 1:
  3124                           
  3125                           
  3126                           ;motion_control.c: 605: {
  3127                           ;motion_control.c: 607: PORTFbits.RF1 = integerSwitchState;
  3128  05EB  0020               	movlb	0	; select bank0
  3129  05EC  0C3F               	rrf	applianceControl@integerSwitchState,w
  3130  05ED  0025               	movlb	5	; select bank5
  3131  05EE  1C03               	skipc
  3132  05EF  108C               	bcf	12,1	;volatile
  3133  05F0  1803               	skipnc
  3134  05F1  148C               	bsf	12,1	;volatile
  3135                           
  3136                           ;motion_control.c: 608: }
  3137                           ;motion_control.c: 609: break;
  3138  05F2  0008               	return
  3139  05F3                     l2005:	
  3140                           ;motion_control.c: 610: case 2:
  3141                           
  3142                           
  3143                           ;motion_control.c: 611: {
  3144                           ;motion_control.c: 612: PORTFbits.RF0 = integerSwitchState;
  3145  05F3  0020               	movlb	0	; select bank0
  3146  05F4  0C3F               	rrf	applianceControl@integerSwitchState,w
  3147  05F5  0025               	movlb	5	; select bank5
  3148  05F6  1C03               	skipc
  3149  05F7  100C               	bcf	12,0	;volatile
  3150  05F8  1803               	skipnc
  3151  05F9  140C               	bsf	12,0	;volatile
  3152                           
  3153                           ;motion_control.c: 613: break;
  3154  05FA  0008               	return
  3155  05FB                     l2007:	
  3156                           ;motion_control.c: 614: }
  3157                           ;motion_control.c: 615: case 3:
  3158                           
  3159                           
  3160                           ;motion_control.c: 616: {
  3161                           ;motion_control.c: 617: PORTAbits.RA3 = integerSwitchState;
  3162  05FB  0020               	movlb	0	; select bank0
  3163  05FC  0C3F               	rrf	applianceControl@integerSwitchState,w
  3164  05FD  1C03               	skipc
  3165  05FE  118C               	bcf	12,3	;volatile
  3166  05FF  1803               	skipnc
  3167  0600  158C               	bsf	12,3	;volatile
  3168                           
  3169                           ;motion_control.c: 619: }
  3170                           ;motion_control.c: 620: break;
  3171  0601  0008               	return
  3172  0602                     l2009:	
  3173                           ;motion_control.c: 622: case 4:
  3174                           
  3175                           
  3176                           ;motion_control.c: 623: {
  3177                           ;motion_control.c: 624: PORTAbits.RA2 = integerSwitchState;
  3178  0602  0C3F               	rrf	applianceControl@integerSwitchState,w
  3179  0603  1C03               	skipc
  3180  0604  110C               	bcf	12,2	;volatile
  3181  0605  1803               	skipnc
  3182  0606  150C               	bsf	12,2	;volatile
  3183                           
  3184                           ;motion_control.c: 629: }
  3185                           
  3186                           ;motion_control.c: 628: break;
  3187                           
  3188                           ;motion_control.c: 627: default:
  3189                           
  3190                           ;motion_control.c: 625: }
  3191                           ;motion_control.c: 626: break;
  3192  0607  0008               	return
  3193  0608                     l2013:	
  3194                           
  3195                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3196                           ; Switch size 1, requested type "space"
  3197                           ; Number of cases is 1, Range of values is 0 to 0
  3198                           ; switch strategies available:
  3199                           ; Name         Instructions Cycles
  3200                           ; simple_byte            4     3 (average)
  3201                           ; direct_byte            8     6 (fixed)
  3202                           ; jumptable            260     6 (fixed)
  3203                           ;	Chosen strategy is simple_byte
  3204  0608  0020               	movlb	0	; select bank0
  3205  0609  083E               	movf	applianceControl@integerSwitchNumber+1,w
  3206  060A  3A00               	xorlw	0	; case 0
  3207  060B  1903               	skipnz
  3208  060C  2E0E               	goto	l2345
  3209  060D  2E1C               	goto	l195
  3210  060E                     l2345:	
  3211                           
  3212                           ; Switch size 1, requested type "space"
  3213                           ; Number of cases is 4, Range of values is 1 to 4
  3214                           ; switch strategies available:
  3215                           ; Name         Instructions Cycles
  3216                           ; simple_byte           13     7 (average)
  3217                           ; direct_byte           17     9 (fixed)
  3218                           ; jumptable            263     9 (fixed)
  3219                           ;	Chosen strategy is simple_byte
  3220  060E  083D               	movf	applianceControl@integerSwitchNumber,w
  3221  060F  3A01               	xorlw	1	; case 1
  3222  0610  1903               	skipnz
  3223  0611  2DEB               	goto	l2003
  3224  0612  3A03               	xorlw	3	; case 2
  3225  0613  1903               	skipnz
  3226  0614  2DF3               	goto	l2005
  3227  0615  3A01               	xorlw	1	; case 3
  3228  0616  1903               	skipnz
  3229  0617  2DFB               	goto	l2007
  3230  0618  3A07               	xorlw	7	; case 4
  3231  0619  1903               	skipnz
  3232  061A  2E02               	goto	l2009
  3233  061B  2E1C               	goto	l195
  3234  061C                     l195:	
  3235  061C  0008               	return
  3236  061D                     __end_of_applianceControl:	
  3237                           
  3238                           	psect	text7
  3239  0732                     __ptext7:	
  3240 ;; *************** function _sendAcknowledgment *****************
  3241 ;; Defined at:
  3242 ;;		line 750 in file "motion_control.c"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;  currentState    1    wreg     PTR unsigned char 
  3245 ;;		 -> currentStateBuffer(30), 
  3246 ;; Auto vars:     Size  Location     Type
  3247 ;;  currentState    1    3[BANK0 ] PTR unsigned char 
  3248 ;;		 -> currentStateBuffer(30), 
  3249 ;;  Tx_count        2    1[BANK0 ] int 
  3250 ;; Return value:  Size  Location     Type
  3251 ;;                  1    wreg      void 
  3252 ;; Registers used:
  3253 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3260 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  3261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  3262 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  3263 ;;Total ram usage:        4 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; Hardware stack levels required when called:    2
  3266 ;; This function calls:
  3267 ;;		Nothing
  3268 ;; This function is called by:
  3269 ;;		_applianceControl
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           
  3274                           ;psect for function _sendAcknowledgment
  3275  0732                     _sendAcknowledgment:	
  3276                           
  3277                           ;incstack = 0
  3278                           ; Regs used in _sendAcknowledgment: [wreg+fsr1l+fsr1h+status,2+status,0]
  3279                           ;sendAcknowledgment@currentStateBuffer stored from wreg
  3280  0732  0020               	movlb	0	; select bank0
  3281  0733  00A3               	movwf	sendAcknowledgment@currentStateBuffer
  3282                           
  3283                           ;motion_control.c: 751: int Tx_count=0;
  3284  0734  01A1               	clrf	sendAcknowledgment@Tx_count
  3285  0735  01A2               	clrf	sendAcknowledgment@Tx_count+1
  3286  0736                     l1905:	
  3287                           ;motion_control.c: 752: while(Tx_count!=4)
  3288                           
  3289  0736  3004               	movlw	4
  3290  0737  0621               	xorwf	sendAcknowledgment@Tx_count,w
  3291  0738  0422               	iorwf	sendAcknowledgment@Tx_count+1,w
  3292  0739  1903               	btfsc	3,2
  3293  073A  0008               	return
  3294  073B                     l233:	
  3295                           ;motion_control.c: 753: {
  3296                           ;motion_control.c: 754: while (!TX1STAbits.TRMT);
  3297                           
  3298  073B  0023               	movlb	3	; select bank3
  3299  073C  1C9E               	btfss	30,1	;volatile
  3300  073D  2F3B               	goto	l233
  3301                           
  3302                           ;motion_control.c: 755: TX1REG = *currentStateBuffer;
  3303  073E  0020               	movlb	0	; select bank0
  3304  073F  0823               	movf	sendAcknowledgment@currentStateBuffer,w
  3305  0740  0086               	movwf	6
  3306  0741  3001               	movlw	1	; select bank2/3
  3307  0742  0087               	movwf	7
  3308  0743  0801               	movf	1,w
  3309  0744  0023               	movlb	3	; select bank3
  3310  0745  009A               	movwf	26	;volatile
  3311                           
  3312                           ;motion_control.c: 756: *currentStateBuffer++;
  3313  0746  3001               	movlw	1
  3314  0747  0020               	movlb	0	; select bank0
  3315  0748  00A0               	movwf	??_sendAcknowledgment
  3316  0749  0820               	movf	??_sendAcknowledgment,w
  3317  074A  07A3               	addwf	sendAcknowledgment@currentStateBuffer,f
  3318                           
  3319                           ;motion_control.c: 757: Tx_count++;
  3320  074B  3001               	movlw	1
  3321  074C  07A1               	addwf	sendAcknowledgment@Tx_count,f
  3322  074D  3000               	movlw	0
  3323  074E  3DA2               	addwfc	sendAcknowledgment@Tx_count+1,f
  3324  074F  2F36               	goto	l1905
  3325  0750                     __end_of_sendAcknowledgment:	
  3326                           
  3327                           	psect	text8
  3328  061D                     __ptext8:	
  3329 ;; *************** function _atoi *****************
  3330 ;; Defined at:
  3331 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  3332 ;; Parameters:    Size  Location     Type
  3333 ;;  s               1    wreg     PTR const unsigned char 
  3334 ;;		 -> applianceControl@dimmerSpeedStringBuffer(2), applianceControl@switchNumberStringBuffer(2), 
  3335 ;; Auto vars:     Size  Location     Type
  3336 ;;  s               1   13[BANK0 ] PTR const unsigned char 
  3337 ;;		 -> applianceControl@dimmerSpeedStringBuffer(2), applianceControl@switchNumberStringBuffer(2), 
  3338 ;;  a               2   11[BANK0 ] int 
  3339 ;;  sign            1   10[BANK0 ] unsigned char 
  3340 ;; Return value:  Size  Location     Type
  3341 ;;                  2    6[BANK0 ] int 
  3342 ;; Registers used:
  3343 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3344 ;; Tracked objects:
  3345 ;;		On entry : 0/0
  3346 ;;		On exit  : 0/0
  3347 ;;		Unchanged: 0/0
  3348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3349 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  3350 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0
  3351 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  3352 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0
  3353 ;;Total ram usage:        8 bytes
  3354 ;; Hardware stack levels used:    1
  3355 ;; Hardware stack levels required when called:    3
  3356 ;; This function calls:
  3357 ;;		___wmul
  3358 ;;		_isdigit
  3359 ;; This function is called by:
  3360 ;;		_applianceControl
  3361 ;; This function uses a non-reentrant model
  3362 ;;
  3363                           
  3364                           
  3365                           ;psect for function _atoi
  3366  061D                     _atoi:	
  3367                           
  3368                           ;incstack = 0
  3369                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3370                           ;atoi@s stored from wreg
  3371  061D  0020               	movlb	0	; select bank0
  3372  061E  00AD               	movwf	atoi@s
  3373  061F                     l1867:	
  3374  061F  082D               	movf	atoi@s,w
  3375  0620  0086               	movwf	6
  3376  0621  0187               	clrf	7
  3377  0622  3020               	movlw	32
  3378  0623  0601               	xorwf	1,w
  3379  0624  1D03               	btfss	3,2
  3380  0625  2E2B               	goto	l1869
  3381  0626                     l1865:	
  3382  0626  3001               	movlw	1
  3383  0627  00A8               	movwf	??_atoi
  3384  0628  0828               	movf	??_atoi,w
  3385  0629  07AD               	addwf	atoi@s,f
  3386  062A  2E1F               	goto	l1867
  3387  062B                     l1869:	
  3388  062B  082D               	movf	atoi@s,w
  3389  062C  0086               	movwf	6
  3390  062D  0187               	clrf	7
  3391  062E  3009               	movlw	9
  3392  062F  0601               	xorwf	1,w
  3393  0630  1903               	btfsc	3,2
  3394  0631  2E26               	goto	l1865
  3395  0632  01AB               	clrf	atoi@a
  3396  0633  01AC               	clrf	atoi@a+1
  3397  0634  01AA               	clrf	atoi@sign
  3398  0635  082D               	movf	atoi@s,w
  3399  0636  0086               	movwf	6
  3400  0637  0187               	clrf	7
  3401  0638  302D               	movlw	45
  3402  0639  0601               	xorwf	1,w
  3403  063A  1D03               	btfss	3,2
  3404  063B  2E41               	goto	l1877
  3405  063C  3001               	movlw	1
  3406  063D  00A8               	movwf	??_atoi
  3407  063E  0828               	movf	??_atoi,w
  3408  063F  07AA               	addwf	atoi@sign,f
  3409  0640  2E48               	goto	l1883
  3410  0641                     l1877:	
  3411  0641  082D               	movf	atoi@s,w
  3412  0642  0086               	movwf	6
  3413  0643  0187               	clrf	7
  3414  0644  302B               	movlw	43
  3415  0645  0601               	xorwf	1,w
  3416  0646  1D03               	btfss	3,2
  3417  0647  2E4C               	goto	l1885
  3418  0648                     l1883:	
  3419  0648  3001               	movlw	1
  3420  0649  00A8               	movwf	??_atoi
  3421  064A  0828               	movf	??_atoi,w
  3422  064B  07AD               	addwf	atoi@s,f
  3423  064C                     l1885:	
  3424  064C  082D               	movf	atoi@s,w
  3425  064D  0086               	movwf	6
  3426  064E  0187               	clrf	7
  3427  064F  0801               	movf	1,w
  3428  0650  3187  27EE  3186   	fcall	_isdigit
  3429  0653  1C03               	btfss	3,0
  3430  0654  2E73               	goto	l1887
  3431  0655  0020               	movlb	0	; select bank0
  3432  0656  082C               	movf	atoi@a+1,w
  3433  0657  00A1               	movwf	___wmul@multiplier+1
  3434  0658  082B               	movf	atoi@a,w
  3435  0659  00A0               	movwf	___wmul@multiplier
  3436  065A  300A               	movlw	10
  3437  065B  00A2               	movwf	___wmul@multiplicand
  3438  065C  3000               	movlw	0
  3439  065D  00A3               	movwf	___wmul@multiplicand+1
  3440  065E  3187  276D  3186   	fcall	___wmul
  3441  0661  0020               	movlb	0	; select bank0
  3442  0662  082D               	movf	atoi@s,w
  3443  0663  0086               	movwf	6
  3444  0664  0187               	clrf	7
  3445  0665  0801               	movf	1,w
  3446  0666  0720               	addwf	?___wmul,w
  3447  0667  00A8               	movwf	??_atoi
  3448  0668  0821               	movf	?___wmul+1,w
  3449  0669  1803               	skipnc
  3450  066A  0A21               	incf	?___wmul+1,w
  3451  066B  00A9               	movwf	??_atoi+1
  3452  066C  0828               	movf	??_atoi,w
  3453  066D  3ED0               	addlw	208
  3454  066E  00AB               	movwf	atoi@a
  3455  066F  30FF               	movlw	255
  3456  0670  3D29               	addwfc	??_atoi+1,w
  3457  0671  00AC               	movwf	atoi@a+1
  3458  0672  2E48               	goto	l1883
  3459  0673                     l1887:	
  3460  0673  0020               	movlb	0	; select bank0
  3461  0674  082A               	movf	atoi@sign,w
  3462  0675  1903               	btfsc	3,2
  3463  0676  2E83               	goto	l1893
  3464  0677  092B               	comf	atoi@a,w
  3465  0678  00A8               	movwf	??_atoi
  3466  0679  092C               	comf	atoi@a+1,w
  3467  067A  00A9               	movwf	??_atoi+1
  3468  067B  0AA8               	incf	??_atoi,f
  3469  067C  1903               	skipnz
  3470  067D  0AA9               	incf	??_atoi+1,f
  3471  067E  0828               	movf	??_atoi,w
  3472  067F  00A6               	movwf	?_atoi
  3473  0680  0829               	movf	??_atoi+1,w
  3474  0681  00A7               	movwf	?_atoi+1
  3475  0682  0008               	return
  3476  0683                     l1893:	
  3477  0683  082C               	movf	atoi@a+1,w
  3478  0684  00A7               	movwf	?_atoi+1
  3479  0685  082B               	movf	atoi@a,w
  3480  0686  00A6               	movwf	?_atoi
  3481  0687  0008               	return
  3482  0688                     __end_of_atoi:	
  3483                           
  3484                           	psect	text9
  3485  07EE                     __ptext9:	
  3486 ;; *************** function _isdigit *****************
  3487 ;; Defined at:
  3488 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3489 ;; Parameters:    Size  Location     Type
  3490 ;;  c               1    wreg     unsigned char 
  3491 ;; Auto vars:     Size  Location     Type
  3492 ;;  c               1    1[BANK0 ] unsigned char 
  3493 ;; Return value:  Size  Location     Type
  3494 ;;		None               void
  3495 ;; Registers used:
  3496 ;;		wreg, status,2, status,0
  3497 ;; Tracked objects:
  3498 ;;		On entry : 0/0
  3499 ;;		On exit  : 0/0
  3500 ;;		Unchanged: 0/0
  3501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3503 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  3504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  3505 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0
  3506 ;;Total ram usage:        2 bytes
  3507 ;; Hardware stack levels used:    1
  3508 ;; Hardware stack levels required when called:    2
  3509 ;; This function calls:
  3510 ;;		Nothing
  3511 ;; This function is called by:
  3512 ;;		_atoi
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           
  3517                           ;psect for function _isdigit
  3518  07EE                     _isdigit:	
  3519                           
  3520                           ;incstack = 0
  3521                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3522                           ;isdigit@c stored from wreg
  3523  07EE  0020               	movlb	0	; select bank0
  3524  07EF  00A1               	movwf	isdigit@c
  3525  07F0  01A0               	clrf	_isdigit$675
  3526  07F1  303A               	movlw	58
  3527  07F2  0221               	subwf	isdigit@c,w
  3528  07F3  1803               	skipnc
  3529  07F4  2FFB               	goto	l1859
  3530  07F5  3030               	movlw	48
  3531  07F6  0221               	subwf	isdigit@c,w
  3532  07F7  1C03               	skipc
  3533  07F8  2FFB               	goto	l1859
  3534  07F9  01A0               	clrf	_isdigit$675
  3535  07FA  0AA0               	incf	_isdigit$675,f
  3536  07FB                     l1859:	
  3537  07FB  0C20               	rrf	_isdigit$675,w
  3538  07FC  0008               	return
  3539  07FD                     __end_of_isdigit:	
  3540                           
  3541                           	psect	text10
  3542  076D                     __ptext10:	
  3543 ;; *************** function ___wmul *****************
  3544 ;; Defined at:
  3545 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3546 ;; Parameters:    Size  Location     Type
  3547 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3548 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3549 ;; Auto vars:     Size  Location     Type
  3550 ;;  product         2    4[BANK0 ] unsigned int 
  3551 ;; Return value:  Size  Location     Type
  3552 ;;                  2    0[BANK0 ] unsigned int 
  3553 ;; Registers used:
  3554 ;;		wreg, status,2, status,0
  3555 ;; Tracked objects:
  3556 ;;		On entry : 0/0
  3557 ;;		On exit  : 0/0
  3558 ;;		Unchanged: 0/0
  3559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3560 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  3561 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  3562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  3563 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  3564 ;;Total ram usage:        6 bytes
  3565 ;; Hardware stack levels used:    1
  3566 ;; Hardware stack levels required when called:    2
  3567 ;; This function calls:
  3568 ;;		Nothing
  3569 ;; This function is called by:
  3570 ;;		_atoi
  3571 ;; This function uses a non-reentrant model
  3572 ;;
  3573                           
  3574                           
  3575                           ;psect for function ___wmul
  3576  076D                     ___wmul:	
  3577                           
  3578                           ;incstack = 0
  3579                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3580  076D  0020               	movlb	0	; select bank0
  3581  076E  01A4               	clrf	___wmul@product
  3582  076F  01A5               	clrf	___wmul@product+1
  3583  0770                     l1839:	
  3584  0770  1C20               	btfss	___wmul@multiplier,0
  3585  0771  2F76               	goto	l266
  3586  0772  0822               	movf	___wmul@multiplicand,w
  3587  0773  07A4               	addwf	___wmul@product,f
  3588  0774  0823               	movf	___wmul@multiplicand+1,w
  3589  0775  3DA5               	addwfc	___wmul@product+1,f
  3590  0776                     l266:	
  3591  0776  3001               	movlw	1
  3592  0777                     u1865:	
  3593  0777  35A2               	lslf	___wmul@multiplicand,f
  3594  0778  0DA3               	rlf	___wmul@multiplicand+1,f
  3595  0779  0B89               	decfsz	9,f
  3596  077A  2F77               	goto	u1865
  3597  077B  3001               	movlw	1
  3598  077C                     u1875:	
  3599  077C  36A1               	lsrf	___wmul@multiplier+1,f
  3600  077D  0CA0               	rrf	___wmul@multiplier,f
  3601  077E  0B89               	decfsz	9,f
  3602  077F  2F7C               	goto	u1875
  3603  0780  0820               	movf	___wmul@multiplier,w
  3604  0781  0421               	iorwf	___wmul@multiplier+1,w
  3605  0782  1D03               	btfss	3,2
  3606  0783  2F70               	goto	l1839
  3607  0784  0825               	movf	___wmul@product+1,w
  3608  0785  00A1               	movwf	?___wmul+1
  3609  0786  0824               	movf	___wmul@product,w
  3610  0787  00A0               	movwf	?___wmul
  3611  0788  0008               	return
  3612  0789                     __end_of___wmul:	
  3613                           
  3614                           	psect	text11
  3615  07FD                     __ptext11:	
  3616 ;; *************** function _allPeripheralInit *****************
  3617 ;; Defined at:
  3618 ;;		line 664 in file "motion_control.c"
  3619 ;; Parameters:    Size  Location     Type
  3620 ;;		None
  3621 ;; Auto vars:     Size  Location     Type
  3622 ;;		None
  3623 ;; Return value:  Size  Location     Type
  3624 ;;                  1    wreg      void 
  3625 ;; Registers used:
  3626 ;;		wreg, status,2, status,0, pclath, cstack
  3627 ;; Tracked objects:
  3628 ;;		On entry : 0/0
  3629 ;;		On exit  : 0/0
  3630 ;;		Unchanged: 0/0
  3631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  3634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  3635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  3636 ;;Total ram usage:        0 bytes
  3637 ;; Hardware stack levels used:    1
  3638 ;; Hardware stack levels required when called:    3
  3639 ;; This function calls:
  3640 ;;		_EUSART_Initialize
  3641 ;; This function is called by:
  3642 ;;		_main
  3643 ;; This function uses a non-reentrant model
  3644 ;;
  3645                           
  3646                           
  3647                           ;psect for function _allPeripheralInit
  3648  07FD                     _allPeripheralInit:	
  3649                           
  3650                           ;motion_control.c: 665: EUSART_Initialize();
  3651                           
  3652                           ;incstack = 0
  3653                           ; Regs used in _allPeripheralInit: [wreg+status,2+status,0+pclath+cstack]
  3654  07FD  3187  27D8         	fcall	_EUSART_Initialize
  3655  07FF  0008               	return
  3656  0800                     __end_of_allPeripheralInit:	
  3657                           
  3658                           	psect	text12
  3659  07D8                     __ptext12:	
  3660 ;; *************** function _EUSART_Initialize *****************
  3661 ;; Defined at:
  3662 ;;		line 672 in file "motion_control.c"
  3663 ;; Parameters:    Size  Location     Type
  3664 ;;		None
  3665 ;; Auto vars:     Size  Location     Type
  3666 ;;		None
  3667 ;; Return value:  Size  Location     Type
  3668 ;;                  1    wreg      void 
  3669 ;; Registers used:
  3670 ;;		wreg
  3671 ;; Tracked objects:
  3672 ;;		On entry : 0/0
  3673 ;;		On exit  : 0/0
  3674 ;;		Unchanged: 0/0
  3675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  3678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  3679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  3680 ;;Total ram usage:        0 bytes
  3681 ;; Hardware stack levels used:    1
  3682 ;; Hardware stack levels required when called:    2
  3683 ;; This function calls:
  3684 ;;		Nothing
  3685 ;; This function is called by:
  3686 ;;		_allPeripheralInit
  3687 ;; This function uses a non-reentrant model
  3688 ;;
  3689                           
  3690                           
  3691                           ;psect for function _EUSART_Initialize
  3692  07D8                     _EUSART_Initialize:	
  3693                           
  3694                           ;motion_control.c: 673: PIE1bits.RC1IE = 0;
  3695                           
  3696                           ;incstack = 0
  3697                           ; Regs used in _EUSART_Initialize: [wreg]
  3698  07D8  0021               	movlb	1	; select bank1
  3699  07D9  1291               	bcf	17,5	;volatile
  3700                           
  3701                           ;motion_control.c: 674: PIE1bits.TX1IE = 0;
  3702  07DA  1211               	bcf	17,4	;volatile
  3703                           
  3704                           ;motion_control.c: 679: BAUD1CON = 0x0A;
  3705  07DB  300A               	movlw	10
  3706  07DC  0023               	movlb	3	; select bank3
  3707  07DD  009F               	movwf	31	;volatile
  3708                           
  3709                           ;motion_control.c: 682: RC1STA = 0x90;
  3710  07DE  3090               	movlw	144
  3711  07DF  009D               	movwf	29	;volatile
  3712                           
  3713                           ;motion_control.c: 685: TX1STA = 0x24;
  3714  07E0  3024               	movlw	36
  3715  07E1  009E               	movwf	30	;volatile
  3716                           
  3717                           ;motion_control.c: 690: SP1BRGL = 0xA0;
  3718  07E2  30A0               	movlw	160
  3719  07E3  009B               	movwf	27	;volatile
  3720                           
  3721                           ;motion_control.c: 692: SP1BRGH = 0x01;
  3722  07E4  3001               	movlw	1
  3723  07E5  009C               	movwf	28	;volatile
  3724                           
  3725                           ;motion_control.c: 695: GIE = 1;
  3726  07E6  178B               	bsf	11,7	;volatile
  3727                           
  3728                           ;motion_control.c: 698: PEIE = 1;
  3729  07E7  170B               	bsf	11,6	;volatile
  3730                           
  3731                           ;motion_control.c: 701: PIE1bits.RC1IE = 1;
  3732  07E8  0021               	movlb	1	; select bank1
  3733  07E9  1691               	bsf	17,5	;volatile
  3734                           
  3735                           ;motion_control.c: 704: TX1STAbits.TXEN = 1;
  3736  07EA  0023               	movlb	3	; select bank3
  3737  07EB  169E               	bsf	30,5	;volatile
  3738                           
  3739                           ;motion_control.c: 707: RC1STAbits.SPEN = 1;
  3740  07EC  179D               	bsf	29,7	;volatile
  3741  07ED  0008               	return
  3742  07EE                     __end_of_EUSART_Initialize:	
  3743                           
  3744                           	psect	text13
  3745  0FEB                     __ptext13:	
  3746 ;; *************** function _GPIO_pin_Initialize *****************
  3747 ;; Defined at:
  3748 ;;		line 637 in file "motion_control.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;		None
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;		None
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  1    wreg      void 
  3755 ;; Registers used:
  3756 ;;		status,2, status,0, pclath, cstack
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  3764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  3765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  3766 ;;Total ram usage:        0 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; Hardware stack levels required when called:    3
  3769 ;; This function calls:
  3770 ;;		_clearAllPorts
  3771 ;;		_pinINIT_extra
  3772 ;; This function is called by:
  3773 ;;		_main
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           
  3778                           ;psect for function _GPIO_pin_Initialize
  3779  0FEB                     _GPIO_pin_Initialize:	
  3780                           
  3781                           ;motion_control.c: 638: clearAllPorts();
  3782                           
  3783                           ;incstack = 0
  3784                           ; Regs used in _GPIO_pin_Initialize: [status,2+status,0+pclath+cstack]
  3785  0FEB  318F  27CF  318F   	fcall	_clearAllPorts
  3786                           
  3787                           ;motion_control.c: 639: pinINIT_extra();
  3788  0FEE  318F  27D6  318F   	fcall	_pinINIT_extra
  3789                           
  3790                           ;motion_control.c: 640: TRISFbits.TRISF7 = 1;
  3791  0FF1  0026               	movlb	6	; select bank6
  3792  0FF2  178C               	bsf	12,7	;volatile
  3793                           
  3794                           ;motion_control.c: 641: TRISFbits.TRISF5 = 1;
  3795  0FF3  168C               	bsf	12,5	;volatile
  3796                           
  3797                           ;motion_control.c: 642: TRISFbits.TRISF3 = 1;
  3798  0FF4  158C               	bsf	12,3	;volatile
  3799                           
  3800                           ;motion_control.c: 643: TRISFbits.TRISF2 = 1;
  3801  0FF5  150C               	bsf	12,2	;volatile
  3802                           
  3803                           ;motion_control.c: 646: TRISFbits.TRISF1 = 0;
  3804  0FF6  108C               	bcf	12,1	;volatile
  3805                           
  3806                           ;motion_control.c: 647: TRISFbits.TRISF0 = 0;
  3807  0FF7  100C               	bcf	12,0	;volatile
  3808                           
  3809                           ;motion_control.c: 648: TRISAbits.TRISA3 = 0;
  3810  0FF8  0021               	movlb	1	; select bank1
  3811  0FF9  118C               	bcf	12,3	;volatile
  3812                           
  3813                           ;motion_control.c: 649: TRISAbits.TRISA2 = 0;
  3814  0FFA  110C               	bcf	12,2	;volatile
  3815                           
  3816                           ;motion_control.c: 655: TRISCbits.TRISC6 = 0;
  3817  0FFB  130E               	bcf	14,6	;volatile
  3818                           
  3819                           ;motion_control.c: 656: TRISCbits.TRISC7 = 1;
  3820  0FFC  178E               	bsf	14,7	;volatile
  3821                           
  3822                           ;motion_control.c: 658: clearAllPorts();
  3823  0FFD  318F  27CF         	fcall	_clearAllPorts
  3824  0FFF  0008               	return
  3825  1000                     __end_of_GPIO_pin_Initialize:	
  3826                           
  3827                           	psect	text14
  3828  0FD6                     __ptext14:	
  3829 ;; *************** function _pinINIT_extra *****************
  3830 ;; Defined at:
  3831 ;;		line 788 in file "motion_control.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;		None
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;		None
  3836 ;; Return value:  Size  Location     Type
  3837 ;;                  1    wreg      void 
  3838 ;; Registers used:
  3839 ;;		status,2
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  3847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  3848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  3849 ;;Total ram usage:        0 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; Hardware stack levels required when called:    2
  3852 ;; This function calls:
  3853 ;;		Nothing
  3854 ;; This function is called by:
  3855 ;;		_GPIO_pin_Initialize
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858                           
  3859                           
  3860                           ;psect for function _pinINIT_extra
  3861  0FD6                     _pinINIT_extra:	
  3862                           
  3863                           ;motion_control.c: 789: ANSELG=0x00; WPUG = 0;
  3864                           
  3865                           ;incstack = 0
  3866                           ; Regs used in _pinINIT_extra: [status,2]
  3867  0FD6  0028               	movlb	8	; select bank8
  3868  0FD7  018D               	clrf	13	;volatile
  3869  0FD8  0029               	movlb	9	; select bank9
  3870  0FD9  018D               	clrf	13	;volatile
  3871                           
  3872                           ;motion_control.c: 791: ANSELF=0x00;
  3873  0FDA  0028               	movlb	8	; select bank8
  3874  0FDB  018C               	clrf	12	;volatile
  3875                           
  3876                           ;motion_control.c: 793: ANSELE=0x00; WPUE=0x00;
  3877  0FDC  0023               	movlb	3	; select bank3
  3878  0FDD  0190               	clrf	16	;volatile
  3879  0FDE  0024               	movlb	4	; select bank4
  3880  0FDF  0190               	clrf	16	;volatile
  3881                           
  3882                           ;motion_control.c: 795: ANSELD=0x00; WPUD=0x00;
  3883  0FE0  0023               	movlb	3	; select bank3
  3884  0FE1  018F               	clrf	15	;volatile
  3885  0FE2  0024               	movlb	4	; select bank4
  3886  0FE3  018F               	clrf	15	;volatile
  3887                           
  3888                           ;motion_control.c: 797: ANSELB=0x00; WPUB=0x00;
  3889  0FE4  0023               	movlb	3	; select bank3
  3890  0FE5  018D               	clrf	13	;volatile
  3891  0FE6  0024               	movlb	4	; select bank4
  3892  0FE7  018D               	clrf	13	;volatile
  3893                           
  3894                           ;motion_control.c: 799: ANSELA=0x00;
  3895  0FE8  0023               	movlb	3	; select bank3
  3896  0FE9  018C               	clrf	12	;volatile
  3897  0FEA  0008               	return
  3898  0FEB                     __end_of_pinINIT_extra:	
  3899                           
  3900                           	psect	text15
  3901  0FCF                     __ptext15:	
  3902 ;; *************** function _clearAllPorts *****************
  3903 ;; Defined at:
  3904 ;;		line 805 in file "motion_control.c"
  3905 ;; Parameters:    Size  Location     Type
  3906 ;;		None
  3907 ;; Auto vars:     Size  Location     Type
  3908 ;;		None
  3909 ;; Return value:  Size  Location     Type
  3910 ;;                  1    wreg      void 
  3911 ;; Registers used:
  3912 ;;		None
  3913 ;; Tracked objects:
  3914 ;;		On entry : 0/0
  3915 ;;		On exit  : 0/0
  3916 ;;		Unchanged: 0/0
  3917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  3920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  3921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  3922 ;;Total ram usage:        0 bytes
  3923 ;; Hardware stack levels used:    1
  3924 ;; Hardware stack levels required when called:    2
  3925 ;; This function calls:
  3926 ;;		Nothing
  3927 ;; This function is called by:
  3928 ;;		_GPIO_pin_Initialize
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           
  3933                           ;psect for function _clearAllPorts
  3934  0FCF                     _clearAllPorts:	
  3935                           
  3936                           ;motion_control.c: 806: PORTFbits.RF1=0;
  3937                           
  3938                           ;incstack = 0
  3939                           ; Regs used in _clearAllPorts: []
  3940  0FCF  0025               	movlb	5	; select bank5
  3941  0FD0  108C               	bcf	12,1	;volatile
  3942                           
  3943                           ;motion_control.c: 807: PORTFbits.RF0=0;
  3944  0FD1  100C               	bcf	12,0	;volatile
  3945                           
  3946                           ;motion_control.c: 808: PORTAbits.RA3=0;
  3947  0FD2  0020               	movlb	0	; select bank0
  3948  0FD3  118C               	bcf	12,3	;volatile
  3949                           
  3950                           ;motion_control.c: 809: PORTAbits.RA2=0;
  3951  0FD4  110C               	bcf	12,2	;volatile
  3952  0FD5  0008               	return
  3953  0FD6                     __end_of_clearAllPorts:	
  3954                           
  3955                           	psect	intentry
  3956  0004                     __pintentry:	
  3957 ;; *************** function _isr *****************
  3958 ;; Defined at:
  3959 ;;		line 151 in file "motion_control.c"
  3960 ;; Parameters:    Size  Location     Type
  3961 ;;		None
  3962 ;; Auto vars:     Size  Location     Type
  3963 ;;		None
  3964 ;; Return value:  Size  Location     Type
  3965 ;;                  1    wreg      void 
  3966 ;; Registers used:
  3967 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3968 ;; Tracked objects:
  3969 ;;		On entry : 0/0
  3970 ;;		On exit  : 0/0
  3971 ;;		Unchanged: 0/0
  3972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  3975 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0
  3976 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0
  3977 ;;Total ram usage:        2 bytes
  3978 ;; Hardware stack levels used:    1
  3979 ;; Hardware stack levels required when called:    1
  3980 ;; This function calls:
  3981 ;;		_errorsISR
  3982 ;; This function is called by:
  3983 ;;		Interrupt level 1
  3984 ;; This function uses a non-reentrant model
  3985 ;;
  3986                           
  3987  0004                     _isr:	
  3988                           
  3989                           ;incstack = 0
  3990  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3991                           
  3992                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3993  0005  3180               	pagesel	$
  3994  0006  0020               	movlb	0	; select bank0
  3995  0007  087F               	movf	127,w
  3996  0008  00F5               	movwf	??_isr+1
  3997                           
  3998                           ;motion_control.c: 154: if(RC1IF){
  3999  0009  1E91               	btfss	17,5	;volatile
  4000  000A  287E               	goto	i1l137
  4001                           
  4002                           ;motion_control.c: 155: if(RC1STAbits.OERR){
  4003  000B  0023               	movlb	3	; select bank3
  4004  000C  1C9D               	btfss	29,1	;volatile
  4005  000D  2825               	goto	i1l1503
  4006                           
  4007                           ;motion_control.c: 156: RC1STAbits.CREN = 0;
  4008  000E  121D               	bcf	29,4	;volatile
  4009                           
  4010                           ;motion_control.c: 157: RC1STAbits.CREN = 1;
  4011  000F  161D               	bsf	29,4	;volatile
  4012                           
  4013                           ;motion_control.c: 159: ErrorNames[0]='E'; ErrorNames[1]='R'; ErrorNames[2]='O'; ErrorNa
      +                          mes[3]='V';
  4014  0010  3045               	movlw	69
  4015  0011  00F4               	movwf	??_isr
  4016  0012  0874               	movf	??_isr,w
  4017  0013  0021               	movlb	1	; select bank1
  4018  0014  00D2               	movwf	_ErrorNames^(0+128)
  4019  0015  3052               	movlw	82
  4020  0016  00F4               	movwf	??_isr
  4021  0017  0874               	movf	??_isr,w
  4022  0018  00D3               	movwf	(_ErrorNames^(0+128)+1)
  4023  0019  304F               	movlw	79
  4024  001A  00F4               	movwf	??_isr
  4025  001B  0874               	movf	??_isr,w
  4026  001C  00D4               	movwf	(_ErrorNames^(0+128)+2)
  4027  001D  3056               	movlw	86
  4028  001E  00F4               	movwf	??_isr
  4029  001F  0874               	movf	??_isr,w
  4030  0020  00D5               	movwf	(_ErrorNames^(0+128)+3)
  4031                           
  4032                           ;motion_control.c: 160: errorsISR(ErrorNames);
  4033  0021  30D2               	movlw	(low (_ErrorNames| 0))& (0+255)
  4034  0022  3187  27BF  3180   	fcall	_errorsISR
  4035  0025                     i1l1503:	
  4036                           
  4037                           ;motion_control.c: 161: }
  4038                           ;motion_control.c: 163: mainReceivedDataBuffer[mainReceivedDataPosition]=RC1REG;
  4039  0025  0023               	movlb	3	; select bank3
  4040  0026  0819               	movf	25,w	;volatile
  4041  0027  00F4               	movwf	??_isr
  4042  0028  0878               	movf	_mainReceivedDataPosition,w
  4043  0029  3EB2               	addlw	(low (_mainReceivedDataBuffer| 0))& (0+255)
  4044  002A  0086               	movwf	6
  4045  002B  0187               	clrf	7
  4046  002C  0874               	movf	??_isr,w
  4047  002D  0081               	movwf	1
  4048                           
  4049                           ;motion_control.c: 167: if(mainReceivedDataBuffer[0]=='%'){
  4050  002E  3025               	movlw	37
  4051  002F  0021               	movlb	1	; select bank1
  4052  0030  0632               	xorwf	_mainReceivedDataBuffer^(0+128),w
  4053  0031  1D03               	btfss	3,2
  4054  0032  284B               	goto	i1l1515
  4055                           
  4056                           ;motion_control.c: 168: mainReceivedDataPosition++;
  4057  0033  3001               	movlw	1
  4058  0034  07F8               	addwf	_mainReceivedDataPosition,f
  4059  0035  3000               	movlw	0
  4060  0036  3DF9               	addwfc	_mainReceivedDataPosition+1,f
  4061                           
  4062                           ;motion_control.c: 169: if(mainReceivedDataPosition>15){
  4063  0037  0879               	movf	_mainReceivedDataPosition+1,w
  4064  0038  3A80               	xorlw	128
  4065  0039  00F4               	movwf	??_isr
  4066  003A  3080               	movlw	128
  4067  003B  0274               	subwf	??_isr,w
  4068  003C  1D03               	skipz
  4069  003D  2840               	goto	u122_25
  4070  003E  3010               	movlw	16
  4071  003F  0278               	subwf	_mainReceivedDataPosition,w
  4072  0040                     u122_25:	
  4073  0040  1C03               	skipc
  4074  0041  287E               	goto	i1l137
  4075                           
  4076                           ;motion_control.c: 170: mainDataReceived=1;
  4077  0042  3001               	movlw	1
  4078  0043  00F6               	movwf	_mainDataReceived
  4079  0044  3000               	movlw	0
  4080  0045  00F7               	movwf	_mainDataReceived+1
  4081                           
  4082                           ;motion_control.c: 171: mainReceivedDataPosition=0;
  4083  0046  01F8               	clrf	_mainReceivedDataPosition
  4084  0047  01F9               	clrf	_mainReceivedDataPosition+1
  4085                           
  4086                           ;motion_control.c: 172: RC1IF=0;
  4087  0048  0020               	movlb	0	; select bank0
  4088  0049  1291               	bcf	17,5	;volatile
  4089                           
  4090                           ;motion_control.c: 173: }
  4091                           ;motion_control.c: 174: }
  4092  004A  287E               	goto	i1l137
  4093  004B                     i1l1515:	
  4094                           
  4095                           ;motion_control.c: 175: else if(mainReceivedDataBuffer[0]=='M' )
  4096  004B  304D               	movlw	77
  4097  004C  0021               	movlb	1	; select bank1
  4098  004D  0632               	xorwf	_mainReceivedDataBuffer^(0+128),w
  4099  004E  1D03               	btfss	3,2
  4100  004F  2865               	goto	i1l134
  4101                           
  4102                           ;motion_control.c: 176: {
  4103                           ;motion_control.c: 178: if(mainReceivedDataBuffer[mainReceivedDataPosition] == '|'){
  4104  0050  0878               	movf	_mainReceivedDataPosition,w
  4105  0051  3EB2               	addlw	(low (_mainReceivedDataBuffer| 0))& (0+255)
  4106  0052  0086               	movwf	6
  4107  0053  0187               	clrf	7
  4108  0054  307C               	movlw	124
  4109  0055  0601               	xorwf	1,w
  4110  0056  1D03               	btfss	3,2
  4111  0057  2860               	goto	i1l1525
  4112                           
  4113                           ;motion_control.c: 179: mainDataReceived=1;
  4114  0058  3001               	movlw	1
  4115  0059  00F6               	movwf	_mainDataReceived
  4116  005A  3000               	movlw	0
  4117  005B  00F7               	movwf	_mainDataReceived+1
  4118                           
  4119                           ;motion_control.c: 180: mainReceivedDataPosition=0;
  4120  005C  01F8               	clrf	_mainReceivedDataPosition
  4121  005D  01F9               	clrf	_mainReceivedDataPosition+1
  4122                           
  4123                           ;motion_control.c: 181: RC1IF=0;
  4124  005E  0020               	movlb	0	; select bank0
  4125  005F  1291               	bcf	17,5	;volatile
  4126  0060                     i1l1525:	
  4127                           
  4128                           ;motion_control.c: 183: }
  4129                           ;motion_control.c: 184: mainReceivedDataPosition++;
  4130  0060  3001               	movlw	1
  4131  0061  07F8               	addwf	_mainReceivedDataPosition,f
  4132  0062  3000               	movlw	0
  4133  0063  3DF9               	addwfc	_mainReceivedDataPosition+1,f
  4134                           
  4135                           ;motion_control.c: 185: }
  4136  0064  287E               	goto	i1l137
  4137  0065                     i1l134:	
  4138                           
  4139                           ;motion_control.c: 186: else{
  4140                           ;motion_control.c: 187: RC1STAbits.CREN = 0;
  4141  0065  0023               	movlb	3	; select bank3
  4142  0066  121D               	bcf	29,4	;volatile
  4143                           
  4144                           ;motion_control.c: 188: RC1STAbits.CREN = 1;
  4145  0067  161D               	bsf	29,4	;volatile
  4146                           
  4147                           ;motion_control.c: 189: mainReceivedDataPosition=0;
  4148  0068  01F8               	clrf	_mainReceivedDataPosition
  4149  0069  01F9               	clrf	_mainReceivedDataPosition+1
  4150                           
  4151                           ;motion_control.c: 191: ErrorNames[0]='E'; ErrorNames[1]='R'; ErrorNames[2]='R'; ErrorNa
      +                          mes[3]='X';
  4152  006A  3045               	movlw	69
  4153  006B  00F4               	movwf	??_isr
  4154  006C  0874               	movf	??_isr,w
  4155  006D  0021               	movlb	1	; select bank1
  4156  006E  00D2               	movwf	_ErrorNames^(0+128)
  4157  006F  3052               	movlw	82
  4158  0070  00F4               	movwf	??_isr
  4159  0071  0874               	movf	??_isr,w
  4160  0072  00D3               	movwf	(_ErrorNames^(0+128)+1)
  4161  0073  3052               	movlw	82
  4162  0074  00F4               	movwf	??_isr
  4163  0075  0874               	movf	??_isr,w
  4164  0076  00D4               	movwf	(_ErrorNames^(0+128)+2)
  4165  0077  3058               	movlw	88
  4166  0078  00F4               	movwf	??_isr
  4167  0079  0874               	movf	??_isr,w
  4168  007A  00D5               	movwf	(_ErrorNames^(0+128)+3)
  4169                           
  4170                           ;motion_control.c: 192: errorsISR(ErrorNames);
  4171  007B  30D2               	movlw	(low (_ErrorNames| 0))& (0+255)
  4172  007C  3187  27BF         	fcall	_errorsISR
  4173  007E                     i1l137:	
  4174  007E  0875               	movf	??_isr+1,w
  4175  007F  0020               	movlb	0	; select bank0
  4176  0080  00FF               	movwf	127
  4177  0081  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4178  0082  0009               	retfie
  4179  0083                     __end_of_isr:	
  4180                           
  4181                           	psect	text17
  4182  07BF                     __ptext17:	
  4183 ;; *************** function _errorsISR *****************
  4184 ;; Defined at:
  4185 ;;		line 730 in file "motion_control.c"
  4186 ;; Parameters:    Size  Location     Type
  4187 ;;  errNum          1    wreg     PTR unsigned char 
  4188 ;;		 -> ErrorNames(5), 
  4189 ;; Auto vars:     Size  Location     Type
  4190 ;;  errNum          1    3[COMMON] PTR unsigned char 
  4191 ;;		 -> ErrorNames(5), 
  4192 ;;  Tx_count        2    1[COMMON] int 
  4193 ;; Return value:  Size  Location     Type
  4194 ;;                  1    wreg      void 
  4195 ;; Registers used:
  4196 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4197 ;; Tracked objects:
  4198 ;;		On entry : 0/0
  4199 ;;		On exit  : 0/0
  4200 ;;		Unchanged: 0/0
  4201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  4203 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0
  4204 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0
  4205 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0
  4206 ;;Total ram usage:        4 bytes
  4207 ;; Hardware stack levels used:    1
  4208 ;; This function calls:
  4209 ;;		Nothing
  4210 ;; This function is called by:
  4211 ;;		_isr
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           
  4216                           ;psect for function _errorsISR
  4217  07BF                     _errorsISR:	
  4218                           
  4219                           ;incstack = 0
  4220                           ; Regs used in _errorsISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4221                           ;errorsISR@errNum stored from wreg
  4222  07BF  00F3               	movwf	errorsISR@errNum
  4223                           
  4224                           ;motion_control.c: 731: int Tx_count=0;
  4225  07C0  01F1               	clrf	errorsISR@Tx_count
  4226  07C1  01F2               	clrf	errorsISR@Tx_count+1
  4227  07C2                     i1l1357:	
  4228                           ;motion_control.c: 732: while(Tx_count!=4)
  4229                           
  4230  07C2  3004               	movlw	4
  4231  07C3  0671               	xorwf	errorsISR@Tx_count,w
  4232  07C4  0472               	iorwf	errorsISR@Tx_count+1,w
  4233  07C5  1903               	btfsc	3,2
  4234  07C6  0008               	return
  4235  07C7                     i1l215:	
  4236                           ;motion_control.c: 733: {
  4237                           ;motion_control.c: 734: while (!TX1STAbits.TRMT);
  4238                           
  4239  07C7  0023               	movlb	3	; select bank3
  4240  07C8  1C9E               	btfss	30,1	;volatile
  4241  07C9  2FC7               	goto	i1l215
  4242                           
  4243                           ;motion_control.c: 735: TX1REG = *errNum;
  4244  07CA  0873               	movf	errorsISR@errNum,w
  4245  07CB  0086               	movwf	6
  4246  07CC  0187               	clrf	7
  4247  07CD  0801               	movf	1,w
  4248  07CE  009A               	movwf	26	;volatile
  4249                           
  4250                           ;motion_control.c: 736: *errNum++;
  4251  07CF  3001               	movlw	1
  4252  07D0  00F0               	movwf	??_errorsISR
  4253  07D1  0870               	movf	??_errorsISR,w
  4254  07D2  07F3               	addwf	errorsISR@errNum,f
  4255                           
  4256                           ;motion_control.c: 737: Tx_count++;
  4257  07D3  3001               	movlw	1
  4258  07D4  07F1               	addwf	errorsISR@Tx_count,f
  4259  07D5  3000               	movlw	0
  4260  07D6  3DF2               	addwfc	errorsISR@Tx_count+1,f
  4261  07D7  2FC2               	goto	i1l1357
  4262  07D8                     __end_of_errorsISR:	
  4263  007E                     btemp	set	126	;btemp
  4264  007E                     int$flags	set	126
  4265  007E                     wtemp0	set	126


Data Sizes:
    Strings     31
    Constant    0
    Data        92
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     41      78
    BANK1            80      4      67
    BANK2            80      0      30
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            32      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_91(CODE[3]), STR_78(CODE[3]), STR_67(CODE[3]), STR_56(CODE[3]), 
		 -> STR_43(CODE[3]), STR_30(CODE[3]), STR_22(CODE[3]), STR_14(CODE[3]), 
		 -> STR_1(CODE[3]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 24
		 -> sendFinalBufferToGAteway(BANK0[24]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 24
		 -> sendFinalBufferToGAteway(BANK0[24]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_103(CODE[6]), STR_102(CODE[2]), STR_101(CODE[2]), STR_100(CODE[2]), 
		 -> STR_99(CODE[2]), STR_98(CODE[2]), STR_97(CODE[2]), STR_96(CODE[2]), 
		 -> STR_95(CODE[7]), STR_94(CODE[2]), STR_93(CODE[2]), STR_92(CODE[2]), 
		 -> STR_90(CODE[6]), STR_89(CODE[2]), STR_88(CODE[2]), STR_87(CODE[2]), 
		 -> STR_86(CODE[2]), STR_85(CODE[2]), STR_84(CODE[2]), STR_83(CODE[2]), 
		 -> STR_82(CODE[7]), STR_81(CODE[2]), STR_80(CODE[2]), STR_79(CODE[2]), 
		 -> STR_77(CODE[6]), STR_76(CODE[2]), STR_75(CODE[2]), STR_74(CODE[2]), 
		 -> STR_73(CODE[2]), STR_72(CODE[2]), STR_71(CODE[7]), STR_70(CODE[2]), 
		 -> STR_69(CODE[2]), STR_68(CODE[2]), STR_66(CODE[6]), STR_65(CODE[2]), 
		 -> STR_64(CODE[2]), STR_63(CODE[2]), STR_62(CODE[2]), STR_61(CODE[2]), 
		 -> STR_60(CODE[7]), STR_59(CODE[2]), STR_58(CODE[2]), STR_57(CODE[2]), 
		 -> STR_55(CODE[6]), STR_54(CODE[2]), STR_53(CODE[2]), STR_52(CODE[2]), 
		 -> STR_51(CODE[2]), STR_50(CODE[2]), STR_49(CODE[2]), STR_48(CODE[2]), 
		 -> STR_47(CODE[7]), STR_46(CODE[2]), STR_45(CODE[2]), STR_44(CODE[2]), 
		 -> STR_42(CODE[6]), STR_41(CODE[2]), STR_40(CODE[2]), STR_39(CODE[2]), 
		 -> STR_38(CODE[2]), STR_37(CODE[2]), STR_36(CODE[2]), STR_35(CODE[2]), 
		 -> STR_34(CODE[7]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_29(CODE[2]), STR_28(CODE[2]), STR_27(CODE[2]), STR_26(CODE[5]), 
		 -> STR_25(CODE[2]), STR_24(CODE[2]), STR_23(CODE[2]), STR_21(CODE[2]), 
		 -> STR_20(CODE[2]), STR_19(CODE[2]), STR_18(CODE[5]), STR_17(CODE[2]), 
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_13(CODE[6]), STR_12(CODE[2]), 
		 -> STR_11(CODE[2]), STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[7]), STR_4(CODE[2]), 
		 -> STR_3(CODE[2]), STR_2(CODE[2]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 24
		 -> sendFinalBufferToGAteway(BANK0[24]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 24
		 -> sendFinalBufferToGAteway(BANK0[24]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 2
		 -> applianceControl@dimmerSpeedStringBuffer(BANK0[2]), applianceControl@switchNumberStringBuffer(BANK0[2]), 

    sendAcknowledgmentTOMotion@currentStateBufferMotion	PTR unsigned char  size(1) Largest target is 24
		 -> sendFinalBufferToGAteway(BANK0[24]), 

    sendAcknowledgment@currentStateBuffer	PTR unsigned char  size(1) Largest target is 30
		 -> currentStateBuffer(BANK2[30]), 

    errorsMain@errNum	PTR unsigned char  size(1) Largest target is 5
		 -> ErrorNames(BANK1[5]), 

    errorsISR@errNum	PTR unsigned char  size(1) Largest target is 5
		 -> ErrorNames(BANK1[5]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 24
		 -> sendFinalBufferToGAteway(BANK0[24]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 24
		 -> sendFinalBufferToGAteway(BANK0[24]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_errorsISR

Critical Paths under _main in BANK0

    _main->_applianceControl
    _applianceControl->_atoi
    _atoi->___wmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0   14849
                                             35 BANK0      6     6      0
                                              0 BANK1      4     4      0
                _GPIO_pin_Initialize
                  _allPeripheralInit
                   _applianceControl
             _copyReceivedDataBuffer
                         _errorsMain
         _sendAcknowledgmentTOMotion
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2    1099
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _strcat                                               5     3      2   10483
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _sendAcknowledgmentTOMotion                           4     4      0     368
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _errorsMain                                           4     4      0     104
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _copyReceivedDataBuffer                               3     3      0     164
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _applianceControl                                    21    15      6    2257
                                             14 BANK0     21    15      6
                               _atoi
                 _sendAcknowledgment
 ---------------------------------------------------------------------------------
 (2) _sendAcknowledgment                                   4     4      0     104
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2     789
                                              6 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     290
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _allPeripheralInit                                    0     0      0       0
                  _EUSART_Initialize
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GPIO_pin_Initialize                                  0     0      0       0
                      _clearAllPorts
                      _pinINIT_extra
 ---------------------------------------------------------------------------------
 (2) _pinINIT_extra                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clearAllPorts                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0     107
                                              4 COMMON     2     2      0
                          _errorsISR
 ---------------------------------------------------------------------------------
 (5) _errorsISR                                            4     4      0     107
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GPIO_pin_Initialize
     _clearAllPorts
     _pinINIT_extra
   _allPeripheralInit
     _EUSART_Initialize
   _applianceControl
     _atoi
       ___wmul
       _isdigit
     _sendAcknowledgment
   _copyReceivedDataBuffer
   _errorsMain
   _sendAcknowledgmentTOMotion
   _strcat
   _strcpy

 _isr (ROOT)
   _errorsISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      BB       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     29      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      4      43       8       83.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      1E      10       37.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            20      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               20      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
DATA                 0      0      BB      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 16 18:26:56 2019

                        __size_of_allPeripheralInit 0003                                         __CFG_CP$OFF 0000  
                                                _M1 004F                                                  _M2 004D  
                                                _M3 004B                                                  _M4 0049  
                                                _M5 00DD                                 ___wmul@multiplicand 0022  
                      applianceControl@integerSpeed 0036                                                 l224 0759  
                                               l233 073B                                                 l242 07AB  
                                               l149 0203                                                 l266 0776  
                                               l195 061C                                                 _GIE 005F  
                         __size_of_applianceControl 00C9                                                 _isr 0004  
                                      __CFG_BORV$LO 0000                                                 wreg 0009  
                                      __CFG_FOSC$HS 0000                                        __CFG_LVP$OFF 0000  
                                              l2003 05EB                                                l2005 05F3  
                                              l2013 0608                                                l2101 01E6  
                                              l2007 05FB                                                l2031 06F4  
                                              l2009 0602                                                l2033 06FF  
                                              l2025 078F                                                l2121 0258  
                                              l2107 0206                                                l2037 0707  
                                              l2205 0423                                                l2141 02B3  
                                              l2125 0260                                                l2047 07A8  
                                              l2223 04B6                                                l2063 00F0  
                                              l2057 0754                                                l2209 0429  
                                              l2153 0300                                                l2137 02AD  
                                              l2243 054D                                                l2227 04BE  
                                              l2173 035B                                                l2157 0308  
                                              l2191 03C3                                                l2087 01B7  
                                              l2079 0134                                                l2345 060E  
                                              l2169 0355                                                l2187 03BB  
                                              l1905 0736                                                l1839 0770  
                                              l1865 0626                                                l1859 07FB  
                                              l1883 0648                                                l1867 061F  
                                              l1893 0683                                                l1885 064C  
                                              l1877 0641                                                l1869 062B  
                                              l1887 0673                                                ?_isr 0070  
                                              STR_1 1012                                                STR_2 1015  
                                              STR_3 101B                                                STR_4 1015  
                                              STR_5 1000                                                STR_6 1015  
                                              STR_7 1019                                                STR_8 1015  
                                              STR_9 1019                                                u2165 01E4  
                                              u2175 0201                                                u2707 0239  
                                              u2717 0245                                                u2807 02E1  
                                              u2727 0251                                                u1865 0777  
                                              u2817 02ED                                                u2737 0276  
                                              u1875 077C                                                u2827 02F9  
                                              u2747 0282                                                _PEIE 005E  
                                              u2837 031E                                                u2757 028E  
                                              u2677 00CE                                                u2847 032A  
                                              u2767 029A                                                u2687 0221  
                                              u2857 0336                                                u2777 02A6  
                                              u2697 022D                                                u1995 06D1  
                                              u2867 0342                                                u2787 02C9  
                                              u2877 034E                                                u2797 02D5  
                                              _WPUB 020D                                                _WPUD 020F  
                                              _WPUE 0210                                                _WPUG 048D  
                                      __CFG_WRT$OFF 0000                                                _atoi 061D  
                                              _main 00C8                                                fsr0h 0005  
                                              fsr1h 0007                                                indf0 0000  
                                              fsr0l 0004                                                indf1 0001  
                                              fsr1l 0006                                                btemp 007E  
                                              start 0083                                       __CFG_IESO$OFF 0000  
                sendAcknowledgmentTOMotion@Tx_count 0021                              __size_of_pinINIT_extra 0015  
                                             ??_isr 0074                 applianceControl@charParentalControl 0032  
                                             ?_atoi 0026                                               ?_main 0070  
                                             STR_10 1015                                               STR_11 1019  
                                             STR_12 1015                                               STR_20 1017  
                                             STR_21 100B                                               STR_13 1007  
                                             STR_30 1012                                               STR_22 1012  
                                             STR_14 1012                                               STR_31 1015  
                                             STR_23 1015                                               STR_15 1015  
                                             STR_40 1019                                               STR_24 101B  
                                             STR_16 101B                                               STR_32 101D  
                                             STR_41 1015                                               STR_33 1015  
                                             STR_25 1015                                               STR_17 1015  
                                     __CFG_WDTE$OFF 0000                                               STR_50 1015  
                                             STR_26 100D                                               STR_34 1000  
                                             STR_42 1007                                               STR_18 100D  
                                             STR_35 1015                                               STR_27 1015  
                                             STR_19 1015                                               STR_51 1019  
                                             STR_43 1012                                               STR_52 1015  
                                             STR_44 1015                                               STR_36 1017  
                                             STR_28 1019                                               STR_37 1015  
                                             STR_53 1019                                               STR_45 101D  
                                             STR_29 100B                                               STR_54 1015  
                                             STR_46 1015                                               STR_38 1019  
                                             STR_39 1015                                               STR_47 1000  
                                             STR_55 1007                                               STR_48 1015  
                                             STR_49 1019                                               _RC1IF 008D  
                                             i1l134 0065                                               i1l215 07C7  
                                             i1l137 007E                                      __CFG_FCMEN$OFF 0000  
                                   __end_of_isdigit 07FD                                               atoi@a 002B  
                                             atoi@s 002D                                      __CFG_BOREN$OFF 0000  
                                             status 0003                                               wtemp0 007E  
                             __end_of_clearAllPorts 0FD6                                 _GPIO_pin_Initialize 0FEB  
                                    __CFG_MCLRE$OFF 0000                        ??_sendAcknowledgmentTOMotion 0020  
                                   __initialization 0085                             ?_copyReceivedDataBuffer 0070  
                                      __end_of_atoi 0688                                        __end_of_main 0554  
                                    _MotionDataFlag 00D9                                          _ErrorNames 00D2  
                                    __CFG_LPBOR$OFF 0000                                              ??_atoi 0028  
                                            ??_main 0043                                ?_GPIO_pin_Initialize 0070  
                                     _pinINIT_extra 0FD6                                              _ANSELA 018C  
                                            _ANSELB 018D                                              _ANSELD 018F  
                                            _ANSELE 0190                                              _ANSELF 040C  
                                            _ANSELG 040D                                              _RC1REG 0199  
                                            _RC1STA 019D                 __size_of_sendAcknowledgmentTOMotion 001B  
                                            i1l1503 0025                                              i1l1515 004B  
                                            i1l1357 07C2                                              i1l1525 0060  
                                            u122_25 0040                                              _TX1REG 019A  
                                            _TX1STA 019E                                      __CFG_PWRTE$OFF 0000  
                    __end_of_copyReceivedDataBuffer 06EE                         __size_of_sendAcknowledgment 001E  
                                            ___wmul 076D                                              _strcat 06EE  
                                            _strcpy 0789                               ??_GPIO_pin_Initialize 0020  
                          _mainReceivedDataPosition 0078                                    _applianceControl 0554  
                                      __pdataCOMMON 007A                                           ??_isdigit 0020  
                                    ?_pinINIT_extra 0070                             __end_of__initialization 00C4  
                                    __pcstackCOMMON 0070                                        __pidataBANK0 0FBE  
                                      __pidataBANK1 0688                                        __pidataBANK2 0714  
                                        __pbssBANK0 0049                                          __pbssBANK1 00D7  
                                _MotionDatareceived 00DB                                     __CFG_VCAPEN$OFF 0000  
                __end_of_sendAcknowledgmentTOMotion 07BF                          _sendAcknowledgmentTOMotion 07A4  
                                __size_of_errorsISR 0019                                          __pmaintext 00C8  
                                           ?___wmul 0020                                          __pintentry 0004  
                        sendAcknowledgment@Tx_count 0021                                     ??_pinINIT_extra 0020  
                                           ?_strcat 0020                                             ?_strcpy 0020  
                                           _SP1BRGH 019C                                             _SP1BRGL 019B  
       applianceControl@currentStateBufferPositions 0041                    applianceControl@chDimmerSpeedLSB 0031  
                  applianceControl@chDimmerSpeedMSB 0030                                     __size_of___wmul 001C  
                          _sendFinalBufferToGAteway 0051                                     __CFG_STVREN$OFF 0000  
                                        _errorsMain 0750                                             __ptext1 0789  
                                           __ptext2 06EE                                             __ptext3 07A4  
                                           __ptext4 0750                                             __ptext5 06BF  
                                           __ptext6 0554                                             __ptext7 0732  
                                           __ptext8 061D                                             __ptext9 07EE  
                                   __size_of_strcat 0026                                     __size_of_strcpy 001B  
                                           _isdigit 07EE                                        __size_of_isr 007F  
                                 __end_of_errorsISR 07D8                        _tempReceivedMotionDataBuffer 00A0  
              sendAcknowledgment@currentStateBuffer 0023                                             main@man 00E1  
                                           clrloop0 0FC4                                end_of_initialization 00C4  
                                           init_ram 0FC9                                             initloop 0FCA  
                                 _EUSART_Initialize 07D8                                   _levelofDimmer_LSB 007A  
                                 _levelofDimmer_MSB 007B                            __end_of_applianceControl 061D  
                applianceControl@integerSwitchState 003F                                  ?_EUSART_Initialize 0070  
                               ??_EUSART_Initialize 0020                                           _PORTAbits 000C  
                                         _PORTFbits 028C                                           _TRISAbits 008C  
                            __size_of_clearAllPorts 0007                                           _TRISCbits 008E  
                                         _TRISFbits 030C                           __end_of_EUSART_Initialize 07EE  
          applianceControl@switchNumberStringBuffer 0039                          __end_of_sendAcknowledgment 0750  
                       __end_of_GPIO_pin_Initialize 1000                                      __end_of___wmul 0789  
                            _mainReceivedDataBuffer 00B2                                       __pidataCOMMON 0002  
                                       ?_errorsMain 0070                                      __end_of_strcat 0714  
                                    __end_of_strcpy 07A4                                 start_initialization 0085  
                                       __end_of_isr 0083                               applianceControl@F3836 00D0  
                             applianceControl@F3838 00CE                         ?_sendAcknowledgmentTOMotion 0070  
                                     _clearAllPorts 0FCF             copyReceivedDataBuffer@dataBufferCounter 0021  
                                          ??___wmul 0024                                         __pdataBANK0 0069  
                                       __pdataBANK1 00A0                                         __pdataBANK2 0120  
                                          ??_strcat 0022                                            ??_strcpy 0022  
                                  _mainDataReceived 0076                                         __pbssCOMMON 0076  
                                         ___latbits 0002                                       __pcstackBANK0 0020  
                                     __pcstackBANK1 00DF                                   errorsISR@Tx_count 0071  
                          ??_copyReceivedDataBuffer 0020                          __size_of_EUSART_Initialize 0016  
                                errorsMain@Tx_count 0021                                 __size_of_errorsMain 001D  
                                    ?_clearAllPorts 0070                                     errorsISR@errNum 0073  
                                  errorsMain@errNum 0023                                            _BAUD1CON 019F  
                             __end_of_pinINIT_extra 0FEB                                            ?_isdigit 0070  
               applianceControl@charFinalFrameState 0033                                           _errorsISR 07BF  
sendAcknowledgmentTOMotion@currentStateBufferMotion 0023             applianceControl@dimmerSpeedStringBuffer 003B  
                                    ___wmul@product 0024                                           clear_ram0 0FC3  
                                          _PIE1bits 0091                                   ?_applianceControl 002E  
                                ??_applianceControl 0034                                   ___wmul@multiplier 0020  
                     applianceControl@charSwitchLSB 002E                       applianceControl@charSwitchMSB 0038  
                                        ?_errorsISR 0070                     __size_of_copyReceivedDataBuffer 002F  
                                   ??_clearAllPorts 0020                    _start_PWM_Generation_in_ISR_FLAG 00D7  
                                 _allPeripheralInit 07FD                                        ??_errorsMain 0020  
                                _sendAcknowledgment 0732                                         _isdigit$675 0020  
                                ?_allPeripheralInit 0070                                          strcat@from 0020  
                                  __size_of_isdigit 000F                                 ?_sendAcknowledgment 0070  
                                          __ptext10 076D                                            __ptext11 07FD  
                                          __ptext12 07D8                                            __ptext13 0FEB  
                                          __ptext14 0FD6                                            __ptext15 0FCF  
                                          __ptext17 07BF                                 ??_allPeripheralInit 0020  
                   applianceControl@charSwitchSTATE 002F                                          strcpy@from 0020  
                             main@dataBufferCounter 00DF                                       __size_of_atoi 006B  
                                     __size_of_main 048C                                  __end_of_errorsMain 076D  
                                _currentStateBuffer 0120                                          _RC1STAbits 019D  
                              ??_sendAcknowledgment 0020                           __end_of_allPeripheralInit 0800  
                                          int$flags 007E                                            atoi@sign 002A  
                            _copyReceivedDataBuffer 06BF                              _tempReceivedDataBuffer 00C4  
                      __size_of_GPIO_pin_Initialize 0015                                      __pstringtext10 0000  
                                          isdigit@c 0021                                         ??_errorsISR 0070  
                                          intlevel1 0000                                   __CFG_CLKOUTEN$OFF 0000  
               applianceControl@integerSwitchNumber 003D                                  _parentalLockBuffer 0069  
                                     __pstringtext1 1000                                       __pstringtext2 1007  
                                     __pstringtext3 100D                                       __pstringtext4 1012  
                                     __pstringtext5 1015                                       __pstringtext6 1017  
                                     __pstringtext7 1019                                       __pstringtext8 101B  
                                     __pstringtext9 101D                                            strcat@cp 0023  
                                          strcat@to 0024                                            strcpy@cp 0023  
                                          strcpy@to 0024                                          _TX1STAbits 019E  
