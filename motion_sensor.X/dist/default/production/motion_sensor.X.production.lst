

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 04 18:38:00 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1526
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	idataBANK2,global,class=CODE,delta=2
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    25                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    26                           	psect	inittext,global,class=CODE,delta=2
    27                           	psect	clrtext,global,class=CODE,delta=2
    28                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    30                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    31                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text3,local,class=CODE,merge=1,delta=2
    34                           	psect	text4,local,class=CODE,merge=1,delta=2
    35                           	psect	text5,local,class=CODE,merge=1,delta=2
    36                           	psect	text6,local,class=CODE,merge=1,delta=2
    37                           	psect	text7,local,class=CODE,merge=1,delta=2
    38                           	psect	text8,local,class=CODE,merge=1,delta=2
    39                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text12,local,class=CODE,merge=1,delta=2
    43                           	psect	text13,local,class=CODE,merge=1,delta=2
    44                           	psect	text14,local,class=CODE,merge=1,delta=2
    45                           	psect	text15,local,class=CODE,merge=1,delta=2
    46                           	psect	text16,local,class=CODE,merge=1,delta=2
    47                           	psect	intentry,global,class=CODE,delta=2
    48                           	psect	text18,local,class=CODE,merge=1,delta=2
    49                           	dabs	1,0x7E,2
    50  0000                     
    51                           ; Version 1.45
    52                           ; Generated 16/11/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC16F1526 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     	;# 
    86  0001                     	;# 
    87  0002                     	;# 
    88  0003                     	;# 
    89  0004                     	;# 
    90  0005                     	;# 
    91  0006                     	;# 
    92  0007                     	;# 
    93  0008                     	;# 
    94  0009                     	;# 
    95  000A                     	;# 
    96  000B                     	;# 
    97  000C                     	;# 
    98  000D                     	;# 
    99  000E                     	;# 
   100  000F                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0013                     	;# 
   105  0014                     	;# 
   106  0015                     	;# 
   107  0016                     	;# 
   108  0016                     	;# 
   109  0017                     	;# 
   110  0018                     	;# 
   111  0019                     	;# 
   112  001A                     	;# 
   113  001B                     	;# 
   114  001C                     	;# 
   115  008C                     	;# 
   116  008D                     	;# 
   117  008E                     	;# 
   118  008F                     	;# 
   119  0090                     	;# 
   120  0091                     	;# 
   121  0092                     	;# 
   122  0093                     	;# 
   123  0094                     	;# 
   124  0095                     	;# 
   125  0096                     	;# 
   126  0097                     	;# 
   127  0099                     	;# 
   128  009A                     	;# 
   129  009B                     	;# 
   130  009B                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009E                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  010F                     	;# 
   138  0110                     	;# 
   139  0116                     	;# 
   140  0117                     	;# 
   141  011D                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144  018F                     	;# 
   145  0190                     	;# 
   146  0191                     	;# 
   147  0191                     	;# 
   148  0192                     	;# 
   149  0193                     	;# 
   150  0193                     	;# 
   151  0194                     	;# 
   152  0195                     	;# 
   153  0196                     	;# 
   154  0197                     	;# 
   155  0199                     	;# 
   156  0199                     	;# 
   157  0199                     	;# 
   158  019A                     	;# 
   159  019A                     	;# 
   160  019A                     	;# 
   161  019B                     	;# 
   162  019B                     	;# 
   163  019B                     	;# 
   164  019B                     	;# 
   165  019B                     	;# 
   166  019C                     	;# 
   167  019C                     	;# 
   168  019C                     	;# 
   169  019D                     	;# 
   170  019D                     	;# 
   171  019D                     	;# 
   172  019E                     	;# 
   173  019E                     	;# 
   174  019E                     	;# 
   175  019F                     	;# 
   176  019F                     	;# 
   177  019F                     	;# 
   178  020D                     	;# 
   179  020F                     	;# 
   180  0210                     	;# 
   181  0211                     	;# 
   182  0211                     	;# 
   183  0212                     	;# 
   184  0212                     	;# 
   185  0213                     	;# 
   186  0213                     	;# 
   187  0214                     	;# 
   188  0214                     	;# 
   189  0215                     	;# 
   190  0215                     	;# 
   191  0215                     	;# 
   192  0216                     	;# 
   193  0216                     	;# 
   194  0217                     	;# 
   195  0217                     	;# 
   196  0219                     	;# 
   197  021A                     	;# 
   198  021B                     	;# 
   199  021C                     	;# 
   200  021D                     	;# 
   201  021E                     	;# 
   202  021F                     	;# 
   203  028C                     	;# 
   204  028D                     	;# 
   205  0291                     	;# 
   206  0291                     	;# 
   207  0292                     	;# 
   208  0293                     	;# 
   209  0298                     	;# 
   210  0298                     	;# 
   211  0299                     	;# 
   212  029A                     	;# 
   213  029D                     	;# 
   214  029E                     	;# 
   215  029F                     	;# 
   216  030C                     	;# 
   217  030D                     	;# 
   218  0311                     	;# 
   219  0311                     	;# 
   220  0312                     	;# 
   221  0313                     	;# 
   222  0318                     	;# 
   223  0318                     	;# 
   224  0319                     	;# 
   225  031A                     	;# 
   226  031C                     	;# 
   227  031C                     	;# 
   228  031D                     	;# 
   229  031E                     	;# 
   230  038C                     	;# 
   231  038D                     	;# 
   232  0394                     	;# 
   233  0395                     	;# 
   234  0396                     	;# 
   235  040C                     	;# 
   236  040D                     	;# 
   237  0411                     	;# 
   238  0411                     	;# 
   239  0412                     	;# 
   240  0413                     	;# 
   241  0414                     	;# 
   242  0415                     	;# 
   243  0416                     	;# 
   244  0417                     	;# 
   245  0418                     	;# 
   246  0418                     	;# 
   247  0419                     	;# 
   248  041A                     	;# 
   249  041B                     	;# 
   250  041C                     	;# 
   251  041D                     	;# 
   252  041E                     	;# 
   253  048D                     	;# 
   254  0491                     	;# 
   255  0491                     	;# 
   256  0492                     	;# 
   257  0492                     	;# 
   258  0493                     	;# 
   259  0493                     	;# 
   260  0493                     	;# 
   261  0494                     	;# 
   262  0494                     	;# 
   263  0495                     	;# 
   264  0495                     	;# 
   265  0496                     	;# 
   266  0496                     	;# 
   267  0497                     	;# 
   268  0497                     	;# 
   269  0595                     	;# 
   270  0596                     	;# 
   271  0597                     	;# 
   272  059C                     	;# 
   273  059D                     	;# 
   274  059E                     	;# 
   275  0611                     	;# 
   276  0611                     	;# 
   277  0612                     	;# 
   278  0613                     	;# 
   279  0614                     	;# 
   280  0614                     	;# 
   281  0615                     	;# 
   282  0616                     	;# 
   283  0617                     	;# 
   284  0617                     	;# 
   285  0618                     	;# 
   286  0619                     	;# 
   287  061A                     	;# 
   288  061A                     	;# 
   289  061B                     	;# 
   290  061C                     	;# 
   291  061D                     	;# 
   292  061D                     	;# 
   293  061E                     	;# 
   294  061F                     	;# 
   295  0FE4                     	;# 
   296  0FE5                     	;# 
   297  0FE6                     	;# 
   298  0FE7                     	;# 
   299  0FE8                     	;# 
   300  0FE9                     	;# 
   301  0FEA                     	;# 
   302  0FEB                     	;# 
   303  0FED                     	;# 
   304  0FEE                     	;# 
   305  0FEF                     	;# 
   306                           
   307                           	psect	idataCOMMON
   308  0002                     __pidataCOMMON:	
   309                           
   310                           ;initializer for _levelofDimmer_LSB
   311  0002  3430               	retlw	48
   312                           
   313                           ;initializer for _levelofDimmer_MSB
   314  0003  3430               	retlw	48
   315                           
   316                           	psect	idataBANK0
   317  07E5                     __pidataBANK0:	
   318                           
   319                           ;initializer for _parentalLockBuffer
   320  07E5  3430               	retlw	48
   321  07E6  3430               	retlw	48
   322  07E7  3430               	retlw	48
   323  07E8  3430               	retlw	48
   324  07E9  3430               	retlw	48
   325                           
   326                           ;initializer for applianceControl@F3832
   327  07EA  3423               	retlw	35
   328  07EB  3400               	retlw	0
   329                           
   330                           ;initializer for applianceControl@F3830
   331  07EC  3423               	retlw	35
   332  07ED  3400               	retlw	0
   333                           
   334                           ;initializer for _ErrorNames
   335  07EE  3423               	retlw	35
   336  07EF  3423               	retlw	35
   337  07F0  3423               	retlw	35
   338  07F1  3423               	retlw	35
   339  07F2  3400               	retlw	0
   340                           
   341                           	psect	idataBANK1
   342  072A                     __pidataBANK1:	
   343                           
   344                           ;initializer for _mainReceivedDataBuffer
   345  072A  3423               	retlw	35
   346  072B  3400               	retlw	0
   347  072C  3400               	retlw	0
   348  072D  3400               	retlw	0
   349  072E  3400               	retlw	0
   350  072F  3400               	retlw	0
   351  0730  3400               	retlw	0
   352  0731  3400               	retlw	0
   353  0732  3400               	retlw	0
   354  0733  3400               	retlw	0
   355  0734  3400               	retlw	0
   356  0735  3400               	retlw	0
   357  0736  3400               	retlw	0
   358  0737  3400               	retlw	0
   359  0738  3400               	retlw	0
   360  0739  3400               	retlw	0
   361  073A  3400               	retlw	0
   362  073B  3400               	retlw	0
   363                           
   364                           ;initializer for _tempReceivedDataBuffer
   365  073C  3423               	retlw	35
   366  073D  3400               	retlw	0
   367  073E  3400               	retlw	0
   368  073F  3400               	retlw	0
   369  0740  3400               	retlw	0
   370  0741  3400               	retlw	0
   371  0742  3400               	retlw	0
   372  0743  3400               	retlw	0
   373  0744  3400               	retlw	0
   374  0745  3400               	retlw	0
   375                           
   376                           	psect	idataBANK2
   377  0697                     __pidataBANK2:	
   378                           
   379                           ;initializer for _currentStateBuffer
   380  0697  3423               	retlw	35
   381  0698  3400               	retlw	0
   382  0699  3400               	retlw	0
   383  069A  3400               	retlw	0
   384  069B  3400               	retlw	0
   385  069C  3400               	retlw	0
   386  069D  3400               	retlw	0
   387  069E  3400               	retlw	0
   388  069F  3400               	retlw	0
   389  06A0  3400               	retlw	0
   390  06A1  3400               	retlw	0
   391  06A2  3400               	retlw	0
   392  06A3  3400               	retlw	0
   393  06A4  3400               	retlw	0
   394  06A5  3400               	retlw	0
   395  06A6  3400               	retlw	0
   396  06A7  3400               	retlw	0
   397  06A8  3400               	retlw	0
   398  06A9  3400               	retlw	0
   399  06AA  3400               	retlw	0
   400  06AB  3400               	retlw	0
   401  06AC  3400               	retlw	0
   402  06AD  3400               	retlw	0
   403  06AE  3400               	retlw	0
   404  06AF  3400               	retlw	0
   405  06B0  3400               	retlw	0
   406  06B1  3400               	retlw	0
   407  06B2  3400               	retlw	0
   408  06B3  3400               	retlw	0
   409  06B4  3400               	retlw	0
   410  000C                     _PORTAbits	set	12
   411  005E                     _PEIE	set	94
   412  005F                     _GIE	set	95
   413  008D                     _RC1IF	set	141
   414  0091                     _PIE1bits	set	145
   415  008E                     _TRISCbits	set	142
   416  008C                     _TRISAbits	set	140
   417  018C                     _ANSELA	set	396
   418  018D                     _ANSELB	set	397
   419  018F                     _ANSELD	set	399
   420  0190                     _ANSELE	set	400
   421  019E                     _TX1STAbits	set	414
   422  019C                     _SP1BRGH	set	412
   423  019B                     _SP1BRGL	set	411
   424  019E                     _TX1STA	set	414
   425  019D                     _RC1STA	set	413
   426  019F                     _BAUD1CON	set	415
   427  019A                     _TX1REG	set	410
   428  0199                     _RC1REG	set	409
   429  019D                     _RC1STAbits	set	413
   430  020D                     _WPUB	set	525
   431  020F                     _WPUD	set	527
   432  0210                     _WPUE	set	528
   433  028C                     _PORTFbits	set	652
   434  030C                     _TRISFbits	set	780
   435  040C                     _ANSELF	set	1036
   436  040D                     _ANSELG	set	1037
   437  048D                     _WPUG	set	1165
   438                           
   439                           	psect	stringtext1
   440  07F3                     __pstringtext1:	
   441  07F3                     STR_6:	
   442  07F3  3441               	retlw	65	;'A'
   443  07F4  3443               	retlw	67	;'C'
   444  07F5  344B               	retlw	75	;'K'
   445  07F6  3441               	retlw	65	;'A'
   446  07F7  3443               	retlw	67	;'C'
   447  07F8  3454               	retlw	84	;'T'
   448  07F9  3400               	retlw	0
   449                           
   450                           	psect	stringtext2
   451  1000                     __pstringtext2:	
   452  1000                     STR_12:	
   453  1000  3431               	retlw	49	;'1'
   454  1001  3430               	retlw	48	;'0'
   455  1002  3430               	retlw	48	;'0'
   456  1003  3430               	retlw	48	;'0'
   457  1004  3400               	retlw	0
   458                           
   459                           	psect	stringtext3
   460  1005                     __pstringtext3:	
   461  1005                     STR_1:	
   462  1005  344D               	retlw	77	;'M'
   463  1006  344F               	retlw	79	;'O'
   464  1007  3454               	retlw	84	;'T'
   465  1008  344E               	retlw	78	;'N'
   466  1009  3400               	retlw	0
   467                           
   468                           	psect	stringtext4
   469  100A                     __pstringtext4:	
   470  100A                     STR_2:	
   471  100A  344D               	retlw	77	;'M'
   472  100B  3454               	retlw	84	;'T'
   473  100C  3400               	retlw	0
   474                           
   475                           	psect	stringtext5
   476  100D                     __pstringtext5:	
   477  100D                     STR_3:	
   478  100D  342E               	retlw	46	;'.'
   479  100E  3400               	retlw	0
   480                           
   481                           	psect	stringtext6
   482  100F                     __pstringtext6:	
   483  100F                     STR_10:	
   484  100F  3431               	retlw	49	;'1'
   485  1010  3400               	retlw	0
   486                           
   487                           	psect	stringtext7
   488  1011                     __pstringtext7:	
   489  1011                     STR_4:	
   490  1011  3433               	retlw	51	;'3'
   491  1012  3400               	retlw	0
   492                           
   493                           	psect	stringtext8
   494  1013                     __pstringtext8:	
   495  1013                     STR_28:	
   496  1013  3434               	retlw	52	;'4'
   497  1014  3400               	retlw	0
   498                           
   499                           	psect	stringtext9
   500  1015                     __pstringtext9:	
   501  1015                     STR_13:	
   502  1015  347C               	retlw	124	;'|'
   503  1016  3400               	retlw	0
   504                           
   505                           	psect	stringtext10
   506  0000                     __pstringtext10:	
   507  100D                     
   508                           ; #config settings
   509  0000                     
   510                           	psect	cinit
   511  008D                     start_initialization:	
   512  008D                     __initialization:	
   513                           
   514                           ; Initialize objects allocated to COMMON
   515  008D  3180  2002  3180   	fcall	__pidataCOMMON	;fetch initializer
   516  0090  00FA               	movwf	__pdataCOMMON& (0+127)
   517  0091  3180  2003  3180   	fcall	__pidataCOMMON+1	;fetch initializer
   518  0094  00FB               	movwf	(__pdataCOMMON+1)& (0+127)
   519                           
   520                           ; Initialize objects allocated to BANK0
   521  0095  30E5               	movlw	low __pidataBANK0
   522  0096  0084               	movwf	4
   523  0097  3087               	movlw	(high __pidataBANK0)| (0+128)
   524  0098  0085               	movwf	5
   525  0099  305D               	movlw	low __pdataBANK0
   526  009A  0086               	movwf	6
   527  009B  3000               	movlw	high __pdataBANK0
   528  009C  0087               	movwf	7
   529  009D  300E               	movlw	14
   530  009E  3187  27FA  3180   	fcall	init_ram
   531                           
   532                           ; Initialize objects allocated to BANK1
   533  00A1  302A               	movlw	low __pidataBANK1
   534  00A2  0084               	movwf	4
   535  00A3  3087               	movlw	(high __pidataBANK1)| (0+128)
   536  00A4  0085               	movwf	5
   537  00A5  30A0               	movlw	low __pdataBANK1
   538  00A6  0086               	movwf	6
   539  00A7  3000               	movlw	high __pdataBANK1
   540  00A8  0087               	movwf	7
   541  00A9  301C               	movlw	28
   542  00AA  3187  27FA  3180   	fcall	init_ram
   543                           
   544                           ; Initialize objects allocated to BANK2
   545  00AD  3097               	movlw	low __pidataBANK2
   546  00AE  0084               	movwf	4
   547  00AF  3086               	movlw	(high __pidataBANK2)| (0+128)
   548  00B0  0085               	movwf	5
   549  00B1  3020               	movlw	low __pdataBANK2
   550  00B2  0086               	movwf	6
   551  00B3  3001               	movlw	high __pdataBANK2
   552  00B4  0087               	movwf	7
   553  00B5  301E               	movlw	30
   554  00B6  3187  27FA  3180   	fcall	init_ram
   555                           
   556                           ; Clear objects allocated to COMMON
   557  00B9  01F6               	clrf	__pbssCOMMON& (0+127)
   558  00BA  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   559  00BB  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   560  00BC  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   561                           
   562                           ; Clear objects allocated to BANK0
   563  00BD  304D               	movlw	low __pbssBANK0
   564  00BE  0084               	movwf	4
   565  00BF  3000               	movlw	high __pbssBANK0
   566  00C0  0085               	movwf	5
   567  00C1  3010               	movlw	16
   568  00C2  318F  27F3  3180   	fcall	clear_ram0
   569                           
   570                           ; Clear objects allocated to BANK1
   571  00C5  30BC               	movlw	low __pbssBANK1
   572  00C6  0084               	movwf	4
   573  00C7  3000               	movlw	high __pbssBANK1
   574  00C8  0085               	movwf	5
   575  00C9  3018               	movlw	24
   576  00CA  318F  27F3         	fcall	clear_ram0
   577  00CC                     end_of_initialization:	
   578                           ;End of C runtime variable initialization code
   579                           
   580  00CC                     __end_of__initialization:	
   581  00CC  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   582  00CD  0020               	movlb	0
   583  00CE  3180  28D0         	ljmp	_main	;jump to C main() function
   584                           
   585                           	psect	bssCOMMON
   586  0076                     __pbssCOMMON:	
   587  0076                     _MotionDatareceived:	
   588  0076                     	ds	2
   589  0078                     _mainReceivedDataPosition:	
   590  0078                     	ds	2
   591                           
   592                           	psect	dataCOMMON
   593  007A                     __pdataCOMMON:	
   594  007A                     _levelofDimmer_LSB:	
   595  007A                     	ds	1
   596  007B                     _levelofDimmer_MSB:	
   597  007B                     	ds	1
   598                           
   599                           	psect	bssBANK0
   600  004D                     __pbssBANK0:	
   601  004D                     _start_PWM_Generation_in_ISR_FLAG:	
   602  004D                     	ds	2
   603  004F                     _MotionDataFlag:	
   604  004F                     	ds	2
   605  0051                     _mainDataReceived:	
   606  0051                     	ds	2
   607  0053                     _M5:	
   608  0053                     	ds	2
   609  0055                     _M4:	
   610  0055                     	ds	2
   611  0057                     _M3:	
   612  0057                     	ds	2
   613  0059                     _M2:	
   614  0059                     	ds	2
   615  005B                     _M1:	
   616  005B                     	ds	2
   617                           
   618                           	psect	dataBANK0
   619  005D                     __pdataBANK0:	
   620  005D                     _parentalLockBuffer:	
   621  005D                     	ds	5
   622  0062                     applianceControl@F3832:	
   623  0062                     	ds	2
   624  0064                     applianceControl@F3830:	
   625  0064                     	ds	2
   626  0066                     _ErrorNames:	
   627  0066                     	ds	5
   628                           
   629                           	psect	bssBANK1
   630  00BC                     __pbssBANK1:	
   631  00BC                     _sendFinalBufferToGAteway:	
   632  00BC                     	ds	24
   633                           
   634                           	psect	dataBANK1
   635  00A0                     __pdataBANK1:	
   636  00A0                     _mainReceivedDataBuffer:	
   637  00A0                     	ds	18
   638  00B2                     _tempReceivedDataBuffer:	
   639  00B2                     	ds	10
   640                           
   641                           	psect	dataBANK2
   642  0120                     __pdataBANK2:	
   643  0120                     _currentStateBuffer:	
   644  0120                     	ds	30
   645                           
   646                           	psect	inittext
   647  07FA                     init_ram:	
   648  07FA  00FE               	movwf	126
   649  07FB                     initloop:	
   650  07FB  0012               	moviw fsr0++
   651  07FC  001E               	movwi fsr1++
   652  07FD  0BFE               	decfsz	126,f
   653  07FE  2FFB               	goto	initloop
   654  07FF  3400               	retlw	0
   655                           
   656                           	psect	clrtext
   657  0FF3                     clear_ram0:	
   658                           ;	Called with FSR0 containing the base address, and
   659                           ;	WREG with the size to clear
   660                           
   661  0FF3  0064               	clrwdt	;clear the watchdog before getting into this loop
   662  0FF4                     clrloop0:	
   663  0FF4  0180               	clrf	0	;clear RAM location pointed to by FSR
   664  0FF5  3101               	addfsr 0,1
   665  0FF6  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   666  0FF7  2FF4               	goto	clrloop0	;have we reached the end yet?
   667  0FF8  3400               	retlw	0	;all done for this memory range, return
   668                           
   669                           	psect	cstackCOMMON
   670  0070                     __pcstackCOMMON:	
   671  0070                     ?_isdigit:	
   672  0070                     ?_GPIO_pin_Initialize:	
   673                           ; 1 bit 
   674                           
   675  0070                     ?_allPeripheralInit:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0070                     ?_copyReceivedDataBuffer:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  0070                     ?_errorsMain:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  0070                     ?_sendAcknowledgmentTOMotion:	
   685                           ; 1 bytes @ 0x0
   686                           
   687  0070                     ?_sendAcknowledgment:	
   688                           ; 1 bytes @ 0x0
   689                           
   690  0070                     ?_clearAllPorts:	
   691                           ; 1 bytes @ 0x0
   692                           
   693  0070                     ?_pinINIT_extra:	
   694                           ; 1 bytes @ 0x0
   695                           
   696  0070                     ?_EUSART_Initialize:	
   697                           ; 1 bytes @ 0x0
   698                           
   699  0070                     ?_isr:	
   700                           ; 1 bytes @ 0x0
   701                           
   702  0070                     ?i1_errorsISR:	
   703                           ; 1 bytes @ 0x0
   704                           
   705  0070                     ?_main:	
   706                           ; 1 bytes @ 0x0
   707                           
   708  0070                     i1errorsISR@errNum:	
   709                           ; 2 bytes @ 0x0
   710                           
   711                           
   712                           ; 2 bytes @ 0x0
   713  0070                     	ds	2
   714  0072                     ??i1_errorsISR:	
   715  0072                     i1errorsISR@Tx_count:	
   716                           ; 1 bytes @ 0x2
   717                           
   718                           
   719                           ; 2 bytes @ 0x2
   720  0072                     	ds	2
   721  0074                     ??_isr:	
   722                           
   723                           ; 1 bytes @ 0x4
   724  0074                     	ds	2
   725                           
   726                           	psect	cstackBANK0
   727  0020                     __pcstackBANK0:	
   728  0020                     ?_errorsISR:	
   729  0020                     ??_GPIO_pin_Initialize:	
   730                           ; 1 bytes @ 0x0
   731                           
   732  0020                     ??_allPeripheralInit:	
   733                           ; 1 bytes @ 0x0
   734                           
   735  0020                     ??_copyReceivedDataBuffer:	
   736                           ; 1 bytes @ 0x0
   737                           
   738  0020                     ??_errorsMain:	
   739                           ; 1 bytes @ 0x0
   740                           
   741  0020                     ?_strcpy:	
   742                           ; 1 bytes @ 0x0
   743                           
   744  0020                     ?_strcat:	
   745                           ; 1 bytes @ 0x0
   746                           
   747  0020                     ??_sendAcknowledgmentTOMotion:	
   748                           ; 1 bytes @ 0x0
   749                           
   750  0020                     ??_sendAcknowledgment:	
   751                           ; 1 bytes @ 0x0
   752                           
   753  0020                     ??_clearAllPorts:	
   754                           ; 1 bytes @ 0x0
   755                           
   756  0020                     ??_pinINIT_extra:	
   757                           ; 1 bytes @ 0x0
   758                           
   759  0020                     ??_EUSART_Initialize:	
   760                           ; 1 bytes @ 0x0
   761                           
   762  0020                     ??_isdigit:	
   763                           ; 1 bytes @ 0x0
   764                           
   765  0020                     ?___wmul:	
   766                           ; 1 bytes @ 0x0
   767                           
   768  0020                     _isdigit$614:	
   769                           ; 2 bytes @ 0x0
   770                           
   771  0020                     errorsISR@errNum:	
   772                           ; 1 bytes @ 0x0
   773                           
   774  0020                     ___wmul@multiplier:	
   775                           ; 2 bytes @ 0x0
   776                           
   777  0020                     strcat@from:	
   778                           ; 2 bytes @ 0x0
   779                           
   780  0020                     strcpy@from:	
   781                           ; 2 bytes @ 0x0
   782                           
   783                           
   784                           ; 2 bytes @ 0x0
   785  0020                     	ds	1
   786  0021                     isdigit@c:	
   787  0021                     errorsMain@Tx_count:	
   788                           ; 1 bytes @ 0x1
   789                           
   790  0021                     sendAcknowledgment@Tx_count:	
   791                           ; 2 bytes @ 0x1
   792                           
   793  0021                     sendAcknowledgmentTOMotion@Tx_count:	
   794                           ; 2 bytes @ 0x1
   795                           
   796  0021                     copyReceivedDataBuffer@dataBufferCounter:	
   797                           ; 2 bytes @ 0x1
   798                           
   799                           
   800                           ; 2 bytes @ 0x1
   801  0021                     	ds	1
   802  0022                     ??_errorsISR:	
   803  0022                     ??_strcpy:	
   804                           ; 1 bytes @ 0x2
   805                           
   806  0022                     ??_strcat:	
   807                           ; 1 bytes @ 0x2
   808                           
   809  0022                     errorsISR@Tx_count:	
   810                           ; 1 bytes @ 0x2
   811                           
   812  0022                     ___wmul@multiplicand:	
   813                           ; 2 bytes @ 0x2
   814                           
   815                           
   816                           ; 2 bytes @ 0x2
   817  0022                     	ds	1
   818  0023                     errorsMain@errNum:	
   819  0023                     sendAcknowledgment@currentStateBuffer:	
   820                           ; 1 bytes @ 0x3
   821                           
   822  0023                     sendAcknowledgmentTOMotion@currentStateBufferMotion:	
   823                           ; 1 bytes @ 0x3
   824                           
   825  0023                     strcat@cp:	
   826                           ; 1 bytes @ 0x3
   827                           
   828  0023                     strcpy@cp:	
   829                           ; 1 bytes @ 0x3
   830                           
   831                           
   832                           ; 1 bytes @ 0x3
   833  0023                     	ds	1
   834  0024                     ??___wmul:	
   835  0024                     strcat@to:	
   836                           ; 1 bytes @ 0x4
   837                           
   838  0024                     strcpy@to:	
   839                           ; 1 bytes @ 0x4
   840                           
   841  0024                     ___wmul@product:	
   842                           ; 1 bytes @ 0x4
   843                           
   844                           
   845                           ; 2 bytes @ 0x4
   846  0024                     	ds	2
   847  0026                     ?_atoi:	
   848                           
   849                           ; 2 bytes @ 0x6
   850  0026                     	ds	2
   851  0028                     ??_atoi:	
   852                           
   853                           ; 1 bytes @ 0x8
   854  0028                     	ds	2
   855  002A                     atoi@sign:	
   856                           
   857                           ; 1 bytes @ 0xA
   858  002A                     	ds	1
   859  002B                     atoi@a:	
   860                           
   861                           ; 2 bytes @ 0xB
   862  002B                     	ds	2
   863  002D                     atoi@s:	
   864                           
   865                           ; 1 bytes @ 0xD
   866  002D                     	ds	1
   867  002E                     ?_applianceControl:	
   868  002E                     applianceControl@charSwitchLSB:	
   869                           ; 1 bytes @ 0xE
   870                           
   871                           
   872                           ; 1 bytes @ 0xE
   873  002E                     	ds	1
   874  002F                     applianceControl@charSwitchSTATE:	
   875                           
   876                           ; 1 bytes @ 0xF
   877  002F                     	ds	1
   878  0030                     applianceControl@chDimmerSpeedMSB:	
   879                           
   880                           ; 1 bytes @ 0x10
   881  0030                     	ds	1
   882  0031                     applianceControl@chDimmerSpeedLSB:	
   883                           
   884                           ; 1 bytes @ 0x11
   885  0031                     	ds	1
   886  0032                     applianceControl@charParentalControl:	
   887                           
   888                           ; 1 bytes @ 0x12
   889  0032                     	ds	1
   890  0033                     applianceControl@charFinalFrameState:	
   891                           
   892                           ; 1 bytes @ 0x13
   893  0033                     	ds	1
   894  0034                     ??_applianceControl:	
   895                           
   896                           ; 1 bytes @ 0x14
   897  0034                     	ds	2
   898  0036                     applianceControl@integerSpeed:	
   899                           
   900                           ; 2 bytes @ 0x16
   901  0036                     	ds	2
   902  0038                     applianceControl@charSwitchMSB:	
   903                           
   904                           ; 1 bytes @ 0x18
   905  0038                     	ds	1
   906  0039                     applianceControl@switchNumberStringBuffer:	
   907                           
   908                           ; 2 bytes @ 0x19
   909  0039                     	ds	2
   910  003B                     applianceControl@dimmerSpeedStringBuffer:	
   911                           
   912                           ; 2 bytes @ 0x1B
   913  003B                     	ds	2
   914  003D                     applianceControl@integerSwitchNumber:	
   915                           
   916                           ; 2 bytes @ 0x1D
   917  003D                     	ds	2
   918  003F                     applianceControl@integerSwitchState:	
   919                           
   920                           ; 2 bytes @ 0x1F
   921  003F                     	ds	2
   922  0041                     applianceControl@currentStateBufferPositions:	
   923                           
   924                           ; 2 bytes @ 0x21
   925  0041                     	ds	2
   926  0043                     ??_main:	
   927                           
   928                           ; 1 bytes @ 0x23
   929  0043                     	ds	6
   930  0049                     main@dataBufferCounter:	
   931                           
   932                           ; 2 bytes @ 0x29
   933  0049                     	ds	2
   934  004B                     main@man:	
   935                           
   936                           ; 2 bytes @ 0x2B
   937  004B                     	ds	2
   938                           
   939                           	psect	maintext
   940  00D0                     __pmaintext:	
   941 ;;
   942 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
   943 ;;
   944 ;; *************** function _main *****************
   945 ;; Defined at:
   946 ;;		line 201 in file "motion_control.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;		None
   949 ;; Auto vars:     Size  Location     Type
   950 ;;  dataBufferCo    2   41[BANK0 ] int 
   951 ;;  man             2   43[BANK0 ] int 
   952 ;; Return value:  Size  Location     Type
   953 ;;                  2  139[None  ] int 
   954 ;; Registers used:
   955 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   956 ;; Tracked objects:
   957 ;;		On entry : B1F/0
   958 ;;		On exit  : 0/0
   959 ;;		Unchanged: 0/0
   960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
   961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
   962 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0
   963 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0
   964 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0
   965 ;;Total ram usage:       10 bytes
   966 ;; Hardware stack levels required when called:    5
   967 ;; This function calls:
   968 ;;		_GPIO_pin_Initialize
   969 ;;		_allPeripheralInit
   970 ;;		_applianceControl
   971 ;;		_copyReceivedDataBuffer
   972 ;;		_errorsISR
   973 ;;		_errorsMain
   974 ;;		_sendAcknowledgmentTOMotion
   975 ;;		_strcat
   976 ;;		_strcpy
   977 ;; This function is called by:
   978 ;;		Startup code after reset
   979 ;; This function uses a non-reentrant model
   980 ;;
   981                           
   982                           
   983                           ;psect for function _main
   984  00D0                     _main:	
   985                           
   986                           ;motion_control.c: 202: _delay((unsigned long)((2000)*(16000000/4000.0)));
   987                           
   988                           ;incstack = 0
   989                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   990  00D0  3029               	movlw	41
   991  00D1  0020               	movlb	0	; select bank0
   992  00D2  00C4               	movwf	??_main+1
   993  00D3  3096               	movlw	150
   994  00D4  00C3               	movwf	??_main
   995  00D5  307F               	movlw	127
   996  00D6                     u2327:	
   997  00D6  0B89               	decfsz	9,f
   998  00D7  28D6               	goto	u2327
   999  00D8  0BC3               	decfsz	??_main,f
  1000  00D9  28D6               	goto	u2327
  1001  00DA  0BC4               	decfsz	??_main+1,f
  1002  00DB  28D6               	goto	u2327
  1003                           
  1004                           ;motion_control.c: 203: M1=1; M2=1; M3=1; M4=1; M5=1;
  1005  00DC  3001               	movlw	1
  1006  00DD  0020               	movlb	0	; select bank0
  1007  00DE  00DB               	movwf	_M1
  1008  00DF  3000               	movlw	0
  1009  00E0  00DC               	movwf	_M1+1
  1010  00E1  3001               	movlw	1
  1011  00E2  00D9               	movwf	_M2
  1012  00E3  3000               	movlw	0
  1013  00E4  00DA               	movwf	_M2+1
  1014  00E5  3001               	movlw	1
  1015  00E6  00D7               	movwf	_M3
  1016  00E7  3000               	movlw	0
  1017  00E8  00D8               	movwf	_M3+1
  1018  00E9  3001               	movlw	1
  1019  00EA  00D5               	movwf	_M4
  1020  00EB  3000               	movlw	0
  1021  00EC  00D6               	movwf	_M4+1
  1022  00ED  3001               	movlw	1
  1023  00EE  00D3               	movwf	_M5
  1024  00EF  3000               	movlw	0
  1025  00F0  00D4               	movwf	_M5+1
  1026                           
  1027                           ;motion_control.c: 206: GPIO_pin_Initialize();
  1028  00F1  3187  27AC  3180   	fcall	_GPIO_pin_Initialize
  1029                           
  1030                           ;motion_control.c: 207: allPeripheralInit();
  1031  00F4  318F  27F0  3180   	fcall	_allPeripheralInit
  1032  00F7                     l1918:	
  1033                           ;motion_control.c: 209: while(1){
  1034                           
  1035                           
  1036                           ;motion_control.c: 210: if(mainDataReceived==1){
  1037  00F7  0020               	movlb	0	; select bank0
  1038  00F8  0351               	decf	_mainDataReceived,w
  1039  00F9  0452               	iorwf	_mainDataReceived+1,w
  1040  00FA  1D03               	btfss	3,2
  1041  00FB  2997               	goto	l1964
  1042                           
  1043                           ;motion_control.c: 212: mainDataReceived=0;
  1044  00FC  01D1               	clrf	_mainDataReceived
  1045  00FD  01D2               	clrf	_mainDataReceived+1
  1046                           
  1047                           ;motion_control.c: 213: if(mainReceivedDataBuffer[0]=='%' && mainReceivedDataBuffer[1]==
      +                          '%' && mainReceivedDataBuffer[14]=='@' && mainReceivedDataBuffer[15]=='@'){
  1048  00FE  3025               	movlw	37
  1049  00FF  0021               	movlb	1	; select bank1
  1050  0100  0620               	xorwf	_mainReceivedDataBuffer^(0+128),w
  1051  0101  1D03               	btfss	3,2
  1052  0102  293C               	goto	l1934
  1053  0103  3025               	movlw	37
  1054  0104  0621               	xorwf	(_mainReceivedDataBuffer^(0+128)+1),w
  1055  0105  1D03               	btfss	3,2
  1056  0106  293C               	goto	l1934
  1057  0107  3040               	movlw	64
  1058  0108  062E               	xorwf	(_mainReceivedDataBuffer^(0+128)+14),w
  1059  0109  1D03               	btfss	3,2
  1060  010A  293C               	goto	l1934
  1061  010B  3040               	movlw	64
  1062  010C  062F               	xorwf	(_mainReceivedDataBuffer^(0+128)+15),w
  1063  010D  1D03               	btfss	3,2
  1064  010E  293C               	goto	l1934
  1065                           
  1066                           ;motion_control.c: 214: copyReceivedDataBuffer();
  1067  010F  3186  2642  3180   	fcall	_copyReceivedDataBuffer
  1068                           
  1069                           ;motion_control.c: 216: applianceControl(tempReceivedDataBuffer[0],
  1070                           ;motion_control.c: 217: tempReceivedDataBuffer[1],
  1071                           ;motion_control.c: 218: tempReceivedDataBuffer[2],
  1072                           ;motion_control.c: 219: tempReceivedDataBuffer[3],
  1073                           ;motion_control.c: 220: tempReceivedDataBuffer[4],
  1074                           ;motion_control.c: 221: tempReceivedDataBuffer[5],
  1075                           ;motion_control.c: 222: tempReceivedDataBuffer[6]);
  1076  0112  0021               	movlb	1	; select bank1
  1077  0113  0833               	movf	(_tempReceivedDataBuffer^(0+128)+1),w
  1078  0114  0020               	movlb	0	; select bank0
  1079  0115  00C3               	movwf	??_main
  1080  0116  0843               	movf	??_main,w
  1081  0117  00AE               	movwf	applianceControl@charSwitchLSB
  1082  0118  0021               	movlb	1	; select bank1
  1083  0119  0834               	movf	(_tempReceivedDataBuffer^(0+128)+2),w
  1084  011A  0020               	movlb	0	; select bank0
  1085  011B  00C4               	movwf	??_main+1
  1086  011C  0844               	movf	??_main+1,w
  1087  011D  00AF               	movwf	applianceControl@charSwitchSTATE
  1088  011E  0021               	movlb	1	; select bank1
  1089  011F  0835               	movf	(_tempReceivedDataBuffer^(0+128)+3),w
  1090  0120  0020               	movlb	0	; select bank0
  1091  0121  00C5               	movwf	??_main+2
  1092  0122  0845               	movf	??_main+2,w
  1093  0123  00B0               	movwf	applianceControl@chDimmerSpeedMSB
  1094  0124  0021               	movlb	1	; select bank1
  1095  0125  0836               	movf	(_tempReceivedDataBuffer^(0+128)+4),w
  1096  0126  0020               	movlb	0	; select bank0
  1097  0127  00C6               	movwf	??_main+3
  1098  0128  0846               	movf	??_main+3,w
  1099  0129  00B1               	movwf	applianceControl@chDimmerSpeedLSB
  1100  012A  0021               	movlb	1	; select bank1
  1101  012B  0837               	movf	(_tempReceivedDataBuffer^(0+128)+5),w
  1102  012C  0020               	movlb	0	; select bank0
  1103  012D  00C7               	movwf	??_main+4
  1104  012E  0847               	movf	??_main+4,w
  1105  012F  00B2               	movwf	applianceControl@charParentalControl
  1106  0130  0021               	movlb	1	; select bank1
  1107  0131  0838               	movf	(_tempReceivedDataBuffer^(0+128)+6),w
  1108  0132  0020               	movlb	0	; select bank0
  1109  0133  00C8               	movwf	??_main+5
  1110  0134  0848               	movf	??_main+5,w
  1111  0135  00B3               	movwf	applianceControl@charFinalFrameState
  1112  0136  0021               	movlb	1	; select bank1
  1113  0137  0832               	movf	_tempReceivedDataBuffer^(0+128),w
  1114  0138  3185  2516  3180   	fcall	_applianceControl
  1115                           
  1116                           ;motion_control.c: 224: }
  1117  013B  2997               	goto	l1964
  1118  013C                     l1934:	
  1119                           
  1120                           ;motion_control.c: 225: else if(mainReceivedDataBuffer[0]=='R' && mainReceivedDataBuffer
      +                          [1]=='T' && mainReceivedDataBuffer[9]=='1'){
  1121  013C  3052               	movlw	82
  1122  013D  0021               	movlb	1	; select bank1
  1123  013E  0620               	xorwf	_mainReceivedDataBuffer^(0+128),w
  1124  013F  1D03               	btfss	3,2
  1125  0140  2956               	goto	l1944
  1126  0141  3054               	movlw	84
  1127  0142  0621               	xorwf	(_mainReceivedDataBuffer^(0+128)+1),w
  1128  0143  1D03               	btfss	3,2
  1129  0144  2956               	goto	l1944
  1130  0145  3031               	movlw	49
  1131  0146  0629               	xorwf	(_mainReceivedDataBuffer^(0+128)+9),w
  1132  0147  1D03               	btfss	3,2
  1133  0148  2956               	goto	l1944
  1134                           
  1135                           ;motion_control.c: 226: MotionDataFlag = 1;
  1136  0149  3001               	movlw	1
  1137  014A  0020               	movlb	0	; select bank0
  1138  014B  00CF               	movwf	_MotionDataFlag
  1139  014C  3000               	movlw	0
  1140  014D  00D0               	movwf	_MotionDataFlag+1
  1141                           
  1142                           ;motion_control.c: 227: errorsISR("MOTN");
  1143  014E  3005               	movlw	low (STR_1| (0+32768))
  1144  014F  00A0               	movwf	errorsISR@errNum
  1145  0150  3090               	movlw	high (STR_1| (0+32768))
  1146  0151  00A1               	movwf	errorsISR@errNum+1
  1147  0152  3187  270D  3180   	fcall	_errorsISR
  1148                           
  1149                           ;motion_control.c: 228: }
  1150  0155  2997               	goto	l1964
  1151  0156                     l1944:	
  1152                           
  1153                           ;motion_control.c: 229: else
  1154                           ;motion_control.c: 230: {
  1155                           ;motion_control.c: 231: ErrorNames[0]='E'; ErrorNames[1]='R'; ErrorNames[2]='L'; ErrorNa
      +                          mes[3]='S';
  1156  0156  3045               	movlw	69
  1157  0157  0020               	movlb	0	; select bank0
  1158  0158  00C3               	movwf	??_main
  1159  0159  0843               	movf	??_main,w
  1160  015A  00E6               	movwf	_ErrorNames
  1161  015B  3052               	movlw	82
  1162  015C  00C3               	movwf	??_main
  1163  015D  0843               	movf	??_main,w
  1164  015E  00E7               	movwf	_ErrorNames+1
  1165  015F  304C               	movlw	76
  1166  0160  00C3               	movwf	??_main
  1167  0161  0843               	movf	??_main,w
  1168  0162  00E8               	movwf	_ErrorNames+2
  1169  0163  3053               	movlw	83
  1170  0164  00C3               	movwf	??_main
  1171  0165  0843               	movf	??_main,w
  1172  0166  00E9               	movwf	_ErrorNames+3
  1173                           
  1174                           ;motion_control.c: 232: errorsMain(ErrorNames);
  1175  0167  3066               	movlw	(low (_ErrorNames| 0))& (0+255)
  1176  0168  3186  26F0  3180   	fcall	_errorsMain
  1177                           
  1178                           ;motion_control.c: 233: RC1STAbits.SPEN=0;
  1179  016B  0023               	movlb	3	; select bank3
  1180  016C  139D               	bcf	29,7	;volatile
  1181                           
  1182                           ;motion_control.c: 234: RC1STAbits.CREN = 0;
  1183  016D  121D               	bcf	29,4	;volatile
  1184                           
  1185                           ;motion_control.c: 235: for(int dataBufferCounter = 0; dataBufferCounter< 15; dataBuffer
      +                          Counter++)
  1186  016E  0020               	movlb	0	; select bank0
  1187  016F  01C9               	clrf	main@dataBufferCounter
  1188  0170  01CA               	clrf	main@dataBufferCounter+1
  1189  0171  084A               	movf	main@dataBufferCounter+1,w
  1190  0172  3A80               	xorlw	128
  1191  0173  00C3               	movwf	??_main
  1192  0174  3080               	movlw	128
  1193  0175  0243               	subwf	??_main,w
  1194  0176  1D03               	skipz
  1195  0177  297A               	goto	u1955
  1196  0178  300F               	movlw	15
  1197  0179  0249               	subwf	main@dataBufferCounter,w
  1198  017A                     u1955:	
  1199  017A  1803               	btfsc	3,0
  1200  017B  2994               	goto	l147
  1201  017C                     l1958:	
  1202                           
  1203                           ;motion_control.c: 236: {
  1204                           ;motion_control.c: 237: mainReceivedDataBuffer[dataBufferCounter] = '#';
  1205  017C  3023               	movlw	35
  1206  017D  0020               	movlb	0	; select bank0
  1207  017E  00C3               	movwf	??_main
  1208  017F  0849               	movf	main@dataBufferCounter,w
  1209  0180  3EA0               	addlw	(low (_mainReceivedDataBuffer| 0))& (0+255)
  1210  0181  0086               	movwf	6
  1211  0182  0187               	clrf	7
  1212  0183  0843               	movf	??_main,w
  1213  0184  0081               	movwf	1
  1214  0185  3001               	movlw	1
  1215  0186  07C9               	addwf	main@dataBufferCounter,f
  1216  0187  3000               	movlw	0
  1217  0188  3DCA               	addwfc	main@dataBufferCounter+1,f
  1218  0189  084A               	movf	main@dataBufferCounter+1,w
  1219  018A  3A80               	xorlw	128
  1220  018B  00C3               	movwf	??_main
  1221  018C  3080               	movlw	128
  1222  018D  0243               	subwf	??_main,w
  1223  018E  1D03               	skipz
  1224  018F  2992               	goto	u1965
  1225  0190  300F               	movlw	15
  1226  0191  0249               	subwf	main@dataBufferCounter,w
  1227  0192                     u1965:	
  1228  0192  1C03               	skipc
  1229  0193  297C               	goto	l1958
  1230  0194                     l147:	
  1231                           
  1232                           ;motion_control.c: 238: }
  1233                           ;motion_control.c: 239: RC1STAbits.CREN = 1;
  1234  0194  0023               	movlb	3	; select bank3
  1235  0195  161D               	bsf	29,4	;volatile
  1236                           
  1237                           ;motion_control.c: 240: RC1STAbits.SPEN=1;
  1238  0196  179D               	bsf	29,7	;volatile
  1239  0197                     l1964:	
  1240                           
  1241                           ;motion_control.c: 241: }
  1242                           ;motion_control.c: 242: }
  1243                           ;motion_control.c: 248: int man = 1;
  1244  0197  3001               	movlw	1
  1245  0198  0020               	movlb	0	; select bank0
  1246  0199  00CB               	movwf	main@man
  1247  019A  3000               	movlw	0
  1248  019B  00CC               	movwf	main@man+1
  1249                           
  1250                           ;motion_control.c: 249: if(parentalLockBuffer[1] == '0' && PORTFbits.RF7 == 0 && M1 == 0
      +                          )
  1251  019C  3030               	movlw	48
  1252  019D  065E               	xorwf	_parentalLockBuffer+1,w
  1253  019E  1D03               	btfss	3,2
  1254  019F  29EE               	goto	l1982
  1255  01A0  0025               	movlb	5	; select bank5
  1256  01A1  1B8C               	btfsc	12,7	;volatile
  1257  01A2  29EE               	goto	l1982
  1258  01A3  0020               	movlb	0	; select bank0
  1259  01A4  085B               	movf	_M1,w
  1260  01A5  045C               	iorwf	_M1+1,w
  1261  01A6  1D03               	btfss	3,2
  1262  01A7  29EE               	goto	l1982
  1263                           
  1264                           ;motion_control.c: 250: {
  1265                           ;motion_control.c: 251: if(man == 1)
  1266  01A8  034B               	decf	main@man,w
  1267  01A9  044C               	iorwf	main@man+1,w
  1268  01AA  1D03               	btfss	3,2
  1269  01AB  29E7               	goto	l1978
  1270                           
  1271                           ;motion_control.c: 252: {
  1272                           ;motion_control.c: 253: _delay((unsigned long)((5)*(16000000/4000.0)));
  1273  01AC  301A               	movlw	26
  1274  01AD  0020               	movlb	0	; select bank0
  1275  01AE  00C3               	movwf	??_main
  1276  01AF  30F8               	movlw	248
  1277  01B0                     u2337:	
  1278  01B0  0B89               	decfsz	9,f
  1279  01B1  29B0               	goto	u2337
  1280  01B2  0BC3               	decfsz	??_main,f
  1281  01B3  29B0               	goto	u2337
  1282  01B4  0000               	nop
  1283                           
  1284                           ;motion_control.c: 254: TX1REG = 'R';_delay((unsigned long)((1)*(16000000/4000.0)));
  1285  01B5  3052               	movlw	82
  1286  01B6  0023               	movlb	3	; select bank3
  1287  01B7  009A               	movwf	26	;volatile
  1288  01B8  3006               	movlw	6
  1289  01B9  0020               	movlb	0	; select bank0
  1290  01BA  00C3               	movwf	??_main
  1291  01BB  3030               	movlw	48
  1292  01BC                     u2347:	
  1293  01BC  0B89               	decfsz	9,f
  1294  01BD  29BC               	goto	u2347
  1295  01BE  0BC3               	decfsz	??_main,f
  1296  01BF  29BC               	goto	u2347
  1297  01C0  0000               	nop
  1298                           
  1299                           ;motion_control.c: 255: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
  1300  01C1  3030               	movlw	48
  1301  01C2  0023               	movlb	3	; select bank3
  1302  01C3  009A               	movwf	26	;volatile
  1303  01C4  3006               	movlw	6
  1304  01C5  0020               	movlb	0	; select bank0
  1305  01C6  00C3               	movwf	??_main
  1306  01C7  3030               	movlw	48
  1307  01C8                     u2357:	
  1308  01C8  0B89               	decfsz	9,f
  1309  01C9  29C8               	goto	u2357
  1310  01CA  0BC3               	decfsz	??_main,f
  1311  01CB  29C8               	goto	u2357
  1312  01CC  0000               	nop
  1313                           
  1314                           ;motion_control.c: 256: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
  1315  01CD  3030               	movlw	48
  1316  01CE  0023               	movlb	3	; select bank3
  1317  01CF  009A               	movwf	26	;volatile
  1318  01D0  3006               	movlw	6
  1319  01D1  0020               	movlb	0	; select bank0
  1320  01D2  00C3               	movwf	??_main
  1321  01D3  3030               	movlw	48
  1322  01D4                     u2367:	
  1323  01D4  0B89               	decfsz	9,f
  1324  01D5  29D4               	goto	u2367
  1325  01D6  0BC3               	decfsz	??_main,f
  1326  01D7  29D4               	goto	u2367
  1327  01D8  0000               	nop
  1328                           
  1329                           ;motion_control.c: 257: TX1REG = '1';_delay((unsigned long)((1)*(16000000/4000.0)));
  1330  01D9  3031               	movlw	49
  1331  01DA  0023               	movlb	3	; select bank3
  1332  01DB  009A               	movwf	26	;volatile
  1333  01DC  3006               	movlw	6
  1334  01DD  0020               	movlb	0	; select bank0
  1335  01DE  00C3               	movwf	??_main
  1336  01DF  3030               	movlw	48
  1337  01E0                     u2377:	
  1338  01E0  0B89               	decfsz	9,f
  1339  01E1  29E0               	goto	u2377
  1340  01E2  0BC3               	decfsz	??_main,f
  1341  01E3  29E0               	goto	u2377
  1342  01E4  0000               	nop
  1343                           
  1344                           ;motion_control.c: 258: PORTFbits.RF1=0;
  1345  01E5  0025               	movlb	5	; select bank5
  1346  01E6  108C               	bcf	12,1	;volatile
  1347  01E7                     l1978:	
  1348                           
  1349                           ;motion_control.c: 259: }
  1350                           ;motion_control.c: 260: man=0;
  1351  01E7  0020               	movlb	0	; select bank0
  1352  01E8  01CB               	clrf	main@man
  1353  01E9  01CC               	clrf	main@man+1
  1354                           
  1355                           ;motion_control.c: 261: M1=1;
  1356  01EA  3001               	movlw	1
  1357  01EB  00DB               	movwf	_M1
  1358  01EC  3000               	movlw	0
  1359  01ED  00DC               	movwf	_M1+1
  1360  01EE                     l1982:	
  1361                           
  1362                           ;motion_control.c: 263: }
  1363                           ;motion_control.c: 265: if(parentalLockBuffer[1] == '0' && PORTFbits.RF7 == 1 && M1 == 1
      +                          )
  1364  01EE  3030               	movlw	48
  1365  01EF  0020               	movlb	0	; select bank0
  1366  01F0  065E               	xorwf	_parentalLockBuffer+1,w
  1367  01F1  1D03               	btfss	3,2
  1368  01F2  2A3F               	goto	l1998
  1369  01F3  0025               	movlb	5	; select bank5
  1370  01F4  1F8C               	btfss	12,7	;volatile
  1371  01F5  2A3F               	goto	l1998
  1372  01F6  0020               	movlb	0	; select bank0
  1373  01F7  035B               	decf	_M1,w
  1374  01F8  045C               	iorwf	_M1+1,w
  1375  01F9  1D03               	btfss	3,2
  1376  01FA  2A3F               	goto	l1998
  1377                           
  1378                           ;motion_control.c: 266: {
  1379                           ;motion_control.c: 268: if(man==1)
  1380  01FB  034B               	decf	main@man,w
  1381  01FC  044C               	iorwf	main@man+1,w
  1382  01FD  1D03               	btfss	3,2
  1383  01FE  2A3A               	goto	l1994
  1384                           
  1385                           ;motion_control.c: 269: {
  1386                           ;motion_control.c: 270: _delay((unsigned long)((5)*(16000000/4000.0)));
  1387  01FF  301A               	movlw	26
  1388  0200  0020               	movlb	0	; select bank0
  1389  0201  00C3               	movwf	??_main
  1390  0202  30F8               	movlw	248
  1391  0203                     u2387:	
  1392  0203  0B89               	decfsz	9,f
  1393  0204  2A03               	goto	u2387
  1394  0205  0BC3               	decfsz	??_main,f
  1395  0206  2A03               	goto	u2387
  1396  0207  0000               	nop
  1397                           
  1398                           ;motion_control.c: 271: TX1REG = 'R';_delay((unsigned long)((1)*(16000000/4000.0)));
  1399  0208  3052               	movlw	82
  1400  0209  0023               	movlb	3	; select bank3
  1401  020A  009A               	movwf	26	;volatile
  1402  020B  3006               	movlw	6
  1403  020C  0020               	movlb	0	; select bank0
  1404  020D  00C3               	movwf	??_main
  1405  020E  3030               	movlw	48
  1406  020F                     u2397:	
  1407  020F  0B89               	decfsz	9,f
  1408  0210  2A0F               	goto	u2397
  1409  0211  0BC3               	decfsz	??_main,f
  1410  0212  2A0F               	goto	u2397
  1411  0213  0000               	nop
  1412                           
  1413                           ;motion_control.c: 272: TX1REG = '1';_delay((unsigned long)((1)*(16000000/4000.0)));
  1414  0214  3031               	movlw	49
  1415  0215  0023               	movlb	3	; select bank3
  1416  0216  009A               	movwf	26	;volatile
  1417  0217  3006               	movlw	6
  1418  0218  0020               	movlb	0	; select bank0
  1419  0219  00C3               	movwf	??_main
  1420  021A  3030               	movlw	48
  1421  021B                     u2407:	
  1422  021B  0B89               	decfsz	9,f
  1423  021C  2A1B               	goto	u2407
  1424  021D  0BC3               	decfsz	??_main,f
  1425  021E  2A1B               	goto	u2407
  1426  021F  0000               	nop
  1427                           
  1428                           ;motion_control.c: 273: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
  1429  0220  3030               	movlw	48
  1430  0221  0023               	movlb	3	; select bank3
  1431  0222  009A               	movwf	26	;volatile
  1432  0223  3006               	movlw	6
  1433  0224  0020               	movlb	0	; select bank0
  1434  0225  00C3               	movwf	??_main
  1435  0226  3030               	movlw	48
  1436  0227                     u2417:	
  1437  0227  0B89               	decfsz	9,f
  1438  0228  2A27               	goto	u2417
  1439  0229  0BC3               	decfsz	??_main,f
  1440  022A  2A27               	goto	u2417
  1441  022B  0000               	nop
  1442                           
  1443                           ;motion_control.c: 274: TX1REG = '1';_delay((unsigned long)((1)*(16000000/4000.0)));
  1444  022C  3031               	movlw	49
  1445  022D  0023               	movlb	3	; select bank3
  1446  022E  009A               	movwf	26	;volatile
  1447  022F  3006               	movlw	6
  1448  0230  0020               	movlb	0	; select bank0
  1449  0231  00C3               	movwf	??_main
  1450  0232  3030               	movlw	48
  1451  0233                     u2427:	
  1452  0233  0B89               	decfsz	9,f
  1453  0234  2A33               	goto	u2427
  1454  0235  0BC3               	decfsz	??_main,f
  1455  0236  2A33               	goto	u2427
  1456  0237  0000               	nop
  1457                           
  1458                           ;motion_control.c: 275: PORTFbits.RF1=1;
  1459  0238  0025               	movlb	5	; select bank5
  1460  0239  148C               	bsf	12,1	;volatile
  1461  023A                     l1994:	
  1462                           
  1463                           ;motion_control.c: 276: }
  1464                           ;motion_control.c: 277: man=0;
  1465  023A  0020               	movlb	0	; select bank0
  1466  023B  01CB               	clrf	main@man
  1467  023C  01CC               	clrf	main@man+1
  1468                           
  1469                           ;motion_control.c: 278: M1=0;
  1470  023D  01DB               	clrf	_M1
  1471  023E  01DC               	clrf	_M1+1
  1472  023F                     l1998:	
  1473                           
  1474                           ;motion_control.c: 279: }
  1475                           ;motion_control.c: 283: if(parentalLockBuffer[2] == '0' && PORTFbits.RF5 == 0 && M2 == 0
      +                          )
  1476  023F  3030               	movlw	48
  1477  0240  0020               	movlb	0	; select bank0
  1478  0241  065F               	xorwf	_parentalLockBuffer+2,w
  1479  0242  1D03               	btfss	3,2
  1480  0243  2A92               	goto	l2014
  1481  0244  0025               	movlb	5	; select bank5
  1482  0245  1A8C               	btfsc	12,5	;volatile
  1483  0246  2A92               	goto	l2014
  1484  0247  0020               	movlb	0	; select bank0
  1485  0248  0859               	movf	_M2,w
  1486  0249  045A               	iorwf	_M2+1,w
  1487  024A  1D03               	btfss	3,2
  1488  024B  2A92               	goto	l2014
  1489                           
  1490                           ;motion_control.c: 284: {
  1491                           ;motion_control.c: 285: if(man==1)
  1492  024C  034B               	decf	main@man,w
  1493  024D  044C               	iorwf	main@man+1,w
  1494  024E  1D03               	btfss	3,2
  1495  024F  2A8B               	goto	l2010
  1496                           
  1497                           ;motion_control.c: 286: {
  1498                           ;motion_control.c: 287: _delay((unsigned long)((5)*(16000000/4000.0)));
  1499  0250  301A               	movlw	26
  1500  0251  0020               	movlb	0	; select bank0
  1501  0252  00C3               	movwf	??_main
  1502  0253  30F8               	movlw	248
  1503  0254                     u2437:	
  1504  0254  0B89               	decfsz	9,f
  1505  0255  2A54               	goto	u2437
  1506  0256  0BC3               	decfsz	??_main,f
  1507  0257  2A54               	goto	u2437
  1508  0258  0000               	nop
  1509                           
  1510                           ;motion_control.c: 288: TX1REG = 'R';_delay((unsigned long)((1)*(16000000/4000.0)));
  1511  0259  3052               	movlw	82
  1512  025A  0023               	movlb	3	; select bank3
  1513  025B  009A               	movwf	26	;volatile
  1514  025C  3006               	movlw	6
  1515  025D  0020               	movlb	0	; select bank0
  1516  025E  00C3               	movwf	??_main
  1517  025F  3030               	movlw	48
  1518  0260                     u2447:	
  1519  0260  0B89               	decfsz	9,f
  1520  0261  2A60               	goto	u2447
  1521  0262  0BC3               	decfsz	??_main,f
  1522  0263  2A60               	goto	u2447
  1523  0264  0000               	nop
  1524                           
  1525                           ;motion_control.c: 289: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
  1526  0265  3030               	movlw	48
  1527  0266  0023               	movlb	3	; select bank3
  1528  0267  009A               	movwf	26	;volatile
  1529  0268  3006               	movlw	6
  1530  0269  0020               	movlb	0	; select bank0
  1531  026A  00C3               	movwf	??_main
  1532  026B  3030               	movlw	48
  1533  026C                     u2457:	
  1534  026C  0B89               	decfsz	9,f
  1535  026D  2A6C               	goto	u2457
  1536  026E  0BC3               	decfsz	??_main,f
  1537  026F  2A6C               	goto	u2457
  1538  0270  0000               	nop
  1539                           
  1540                           ;motion_control.c: 290: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
  1541  0271  3030               	movlw	48
  1542  0272  0023               	movlb	3	; select bank3
  1543  0273  009A               	movwf	26	;volatile
  1544  0274  3006               	movlw	6
  1545  0275  0020               	movlb	0	; select bank0
  1546  0276  00C3               	movwf	??_main
  1547  0277  3030               	movlw	48
  1548  0278                     u2467:	
  1549  0278  0B89               	decfsz	9,f
  1550  0279  2A78               	goto	u2467
  1551  027A  0BC3               	decfsz	??_main,f
  1552  027B  2A78               	goto	u2467
  1553  027C  0000               	nop
  1554                           
  1555                           ;motion_control.c: 291: TX1REG = '2';_delay((unsigned long)((1)*(16000000/4000.0)));
  1556  027D  3032               	movlw	50
  1557  027E  0023               	movlb	3	; select bank3
  1558  027F  009A               	movwf	26	;volatile
  1559  0280  3006               	movlw	6
  1560  0281  0020               	movlb	0	; select bank0
  1561  0282  00C3               	movwf	??_main
  1562  0283  3030               	movlw	48
  1563  0284                     u2477:	
  1564  0284  0B89               	decfsz	9,f
  1565  0285  2A84               	goto	u2477
  1566  0286  0BC3               	decfsz	??_main,f
  1567  0287  2A84               	goto	u2477
  1568  0288  0000               	nop
  1569                           
  1570                           ;motion_control.c: 292: PORTFbits.RF0=0;
  1571  0289  0025               	movlb	5	; select bank5
  1572  028A  100C               	bcf	12,0	;volatile
  1573  028B                     l2010:	
  1574                           
  1575                           ;motion_control.c: 293: }
  1576                           ;motion_control.c: 294: man=0;
  1577  028B  0020               	movlb	0	; select bank0
  1578  028C  01CB               	clrf	main@man
  1579  028D  01CC               	clrf	main@man+1
  1580                           
  1581                           ;motion_control.c: 295: M2=1;
  1582  028E  3001               	movlw	1
  1583  028F  00D9               	movwf	_M2
  1584  0290  3000               	movlw	0
  1585  0291  00DA               	movwf	_M2+1
  1586  0292                     l2014:	
  1587                           
  1588                           ;motion_control.c: 296: }
  1589                           ;motion_control.c: 298: if(parentalLockBuffer[2] == '0' && PORTFbits.RF5 == 1 && M2 == 1
      +                           )
  1590  0292  3030               	movlw	48
  1591  0293  0020               	movlb	0	; select bank0
  1592  0294  065F               	xorwf	_parentalLockBuffer+2,w
  1593  0295  1D03               	btfss	3,2
  1594  0296  2AE3               	goto	l2030
  1595  0297  0025               	movlb	5	; select bank5
  1596  0298  1E8C               	btfss	12,5	;volatile
  1597  0299  2AE3               	goto	l2030
  1598  029A  0020               	movlb	0	; select bank0
  1599  029B  0359               	decf	_M2,w
  1600  029C  045A               	iorwf	_M2+1,w
  1601  029D  1D03               	btfss	3,2
  1602  029E  2AE3               	goto	l2030
  1603                           
  1604                           ;motion_control.c: 299: {
  1605                           ;motion_control.c: 300: if(man==1)
  1606  029F  034B               	decf	main@man,w
  1607  02A0  044C               	iorwf	main@man+1,w
  1608  02A1  1D03               	btfss	3,2
  1609  02A2  2ADE               	goto	l2026
  1610                           
  1611                           ;motion_control.c: 301: {
  1612                           ;motion_control.c: 302: _delay((unsigned long)((5)*(16000000/4000.0)));
  1613  02A3  301A               	movlw	26
  1614  02A4  0020               	movlb	0	; select bank0
  1615  02A5  00C3               	movwf	??_main
  1616  02A6  30F8               	movlw	248
  1617  02A7                     u2487:	
  1618  02A7  0B89               	decfsz	9,f
  1619  02A8  2AA7               	goto	u2487
  1620  02A9  0BC3               	decfsz	??_main,f
  1621  02AA  2AA7               	goto	u2487
  1622  02AB  0000               	nop
  1623                           
  1624                           ;motion_control.c: 303: TX1REG = 'R';_delay((unsigned long)((1)*(16000000/4000.0)));
  1625  02AC  3052               	movlw	82
  1626  02AD  0023               	movlb	3	; select bank3
  1627  02AE  009A               	movwf	26	;volatile
  1628  02AF  3006               	movlw	6
  1629  02B0  0020               	movlb	0	; select bank0
  1630  02B1  00C3               	movwf	??_main
  1631  02B2  3030               	movlw	48
  1632  02B3                     u2497:	
  1633  02B3  0B89               	decfsz	9,f
  1634  02B4  2AB3               	goto	u2497
  1635  02B5  0BC3               	decfsz	??_main,f
  1636  02B6  2AB3               	goto	u2497
  1637  02B7  0000               	nop
  1638                           
  1639                           ;motion_control.c: 304: TX1REG = '1';_delay((unsigned long)((1)*(16000000/4000.0)));
  1640  02B8  3031               	movlw	49
  1641  02B9  0023               	movlb	3	; select bank3
  1642  02BA  009A               	movwf	26	;volatile
  1643  02BB  3006               	movlw	6
  1644  02BC  0020               	movlb	0	; select bank0
  1645  02BD  00C3               	movwf	??_main
  1646  02BE  3030               	movlw	48
  1647  02BF                     u2507:	
  1648  02BF  0B89               	decfsz	9,f
  1649  02C0  2ABF               	goto	u2507
  1650  02C1  0BC3               	decfsz	??_main,f
  1651  02C2  2ABF               	goto	u2507
  1652  02C3  0000               	nop
  1653                           
  1654                           ;motion_control.c: 305: TX1REG = '0';_delay((unsigned long)((1)*(16000000/4000.0)));
  1655  02C4  3030               	movlw	48
  1656  02C5  0023               	movlb	3	; select bank3
  1657  02C6  009A               	movwf	26	;volatile
  1658  02C7  3006               	movlw	6
  1659  02C8  0020               	movlb	0	; select bank0
  1660  02C9  00C3               	movwf	??_main
  1661  02CA  3030               	movlw	48
  1662  02CB                     u2517:	
  1663  02CB  0B89               	decfsz	9,f
  1664  02CC  2ACB               	goto	u2517
  1665  02CD  0BC3               	decfsz	??_main,f
  1666  02CE  2ACB               	goto	u2517
  1667  02CF  0000               	nop
  1668                           
  1669                           ;motion_control.c: 306: TX1REG = '2';_delay((unsigned long)((1)*(16000000/4000.0)));
  1670  02D0  3032               	movlw	50
  1671  02D1  0023               	movlb	3	; select bank3
  1672  02D2  009A               	movwf	26	;volatile
  1673  02D3  3006               	movlw	6
  1674  02D4  0020               	movlb	0	; select bank0
  1675  02D5  00C3               	movwf	??_main
  1676  02D6  3030               	movlw	48
  1677  02D7                     u2527:	
  1678  02D7  0B89               	decfsz	9,f
  1679  02D8  2AD7               	goto	u2527
  1680  02D9  0BC3               	decfsz	??_main,f
  1681  02DA  2AD7               	goto	u2527
  1682  02DB  0000               	nop
  1683                           
  1684                           ;motion_control.c: 307: PORTFbits.RF0=1;
  1685  02DC  0025               	movlb	5	; select bank5
  1686  02DD  140C               	bsf	12,0	;volatile
  1687  02DE                     l2026:	
  1688                           
  1689                           ;motion_control.c: 308: }
  1690                           ;motion_control.c: 309: man=0;
  1691  02DE  0020               	movlb	0	; select bank0
  1692  02DF  01CB               	clrf	main@man
  1693  02E0  01CC               	clrf	main@man+1
  1694                           
  1695                           ;motion_control.c: 310: M2=0;
  1696  02E1  01D9               	clrf	_M2
  1697  02E2  01DA               	clrf	_M2+1
  1698  02E3                     l2030:	
  1699                           
  1700                           ;motion_control.c: 311: }
  1701                           ;motion_control.c: 316: if(parentalLockBuffer[3] == '0' && PORTFbits.RF3 == 0 && M3 == 0
      +                           && mainReceivedDataBuffer[9]=='1')
  1702  02E3  3030               	movlw	48
  1703  02E4  0020               	movlb	0	; select bank0
  1704  02E5  0660               	xorwf	_parentalLockBuffer+3,w
  1705  02E6  1D03               	btfss	3,2
  1706  02E7  2B71               	goto	l2050
  1707  02E8  0025               	movlb	5	; select bank5
  1708  02E9  198C               	btfsc	12,3	;volatile
  1709  02EA  2B71               	goto	l2050
  1710  02EB  0020               	movlb	0	; select bank0
  1711  02EC  0857               	movf	_M3,w
  1712  02ED  0458               	iorwf	_M3+1,w
  1713  02EE  1D03               	btfss	3,2
  1714  02EF  2B71               	goto	l2050
  1715  02F0  3031               	movlw	49
  1716  02F1  0021               	movlb	1	; select bank1
  1717  02F2  0629               	xorwf	(_mainReceivedDataBuffer^(0+128)+9),w
  1718  02F3  1D03               	btfss	3,2
  1719  02F4  2B71               	goto	l2050
  1720                           
  1721                           ;motion_control.c: 317: {
  1722                           ;motion_control.c: 318: if(man == 1)
  1723  02F5  0020               	movlb	0	; select bank0
  1724  02F6  034B               	decf	main@man,w
  1725  02F7  044C               	iorwf	main@man+1,w
  1726  02F8  1D03               	btfss	3,2
  1727  02F9  2B6B               	goto	l2046
  1728                           
  1729                           ;motion_control.c: 319: {
  1730                           ;motion_control.c: 321: strcpy(sendFinalBufferToGAteway,"MT");
  1731  02FA  300A               	movlw	low (STR_2| (0+32768))
  1732  02FB  00A0               	movwf	strcpy@from
  1733  02FC  3090               	movlw	high (STR_2| (0+32768))
  1734  02FD  00A1               	movwf	strcpy@from+1
  1735  02FE  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1736  02FF  3187  2762  3180   	fcall	_strcpy
  1737                           
  1738                           ;motion_control.c: 322: strcat(sendFinalBufferToGAteway,".");
  1739  0302  300D               	movlw	low (STR_3| (0+32768))
  1740  0303  0020               	movlb	0	; select bank0
  1741  0304  00A0               	movwf	strcat@from
  1742  0305  3090               	movlw	high (STR_3| (0+32768))
  1743  0306  00A1               	movwf	strcat@from+1
  1744  0307  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1745  0308  3186  2671  3180   	fcall	_strcat
  1746                           
  1747                           ;motion_control.c: 323: strcat(sendFinalBufferToGAteway,"3");
  1748  030B  3011               	movlw	low (STR_4| (0+32768))
  1749  030C  0020               	movlb	0	; select bank0
  1750  030D  00A0               	movwf	strcat@from
  1751  030E  3090               	movlw	high (STR_4| (0+32768))
  1752  030F  00A1               	movwf	strcat@from+1
  1753  0310  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1754  0311  3186  2671  3180   	fcall	_strcat
  1755                           
  1756                           ;motion_control.c: 324: strcat(sendFinalBufferToGAteway,".");
  1757  0314  300D               	movlw	low (STR_3| (0+32768))
  1758  0315  0020               	movlb	0	; select bank0
  1759  0316  00A0               	movwf	strcat@from
  1760  0317  3090               	movlw	high (STR_3| (0+32768))
  1761  0318  00A1               	movwf	strcat@from+1
  1762  0319  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1763  031A  3186  2671  3180   	fcall	_strcat
  1764                           
  1765                           ;motion_control.c: 325: strcat(sendFinalBufferToGAteway,"ACKACT");
  1766  031D  30F3               	movlw	low (STR_6| (0+32768))
  1767  031E  0020               	movlb	0	; select bank0
  1768  031F  00A0               	movwf	strcat@from
  1769  0320  3087               	movlw	high (STR_6| (0+32768))
  1770  0321  00A1               	movwf	strcat@from+1
  1771  0322  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1772  0323  3186  2671  3180   	fcall	_strcat
  1773                           
  1774                           ;motion_control.c: 326: strcat(sendFinalBufferToGAteway,".");
  1775  0326  300D               	movlw	low (STR_3| (0+32768))
  1776  0327  0020               	movlb	0	; select bank0
  1777  0328  00A0               	movwf	strcat@from
  1778  0329  3090               	movlw	high (STR_3| (0+32768))
  1779  032A  00A1               	movwf	strcat@from+1
  1780  032B  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1781  032C  3186  2671  3180   	fcall	_strcat
  1782                           
  1783                           ;motion_control.c: 327: strcat(sendFinalBufferToGAteway,"0");
  1784  032F  3003               	movlw	low ((STR_12+3)| (0+32768))
  1785  0330  0020               	movlb	0	; select bank0
  1786  0331  00A0               	movwf	strcat@from
  1787  0332  3090               	movlw	high ((STR_12+3)| (0+32768))
  1788  0333  00A1               	movwf	strcat@from+1
  1789  0334  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1790  0335  3186  2671  3180   	fcall	_strcat
  1791                           
  1792                           ;motion_control.c: 328: strcat(sendFinalBufferToGAteway,".");
  1793  0338  300D               	movlw	low (STR_3| (0+32768))
  1794  0339  0020               	movlb	0	; select bank0
  1795  033A  00A0               	movwf	strcat@from
  1796  033B  3090               	movlw	high (STR_3| (0+32768))
  1797  033C  00A1               	movwf	strcat@from+1
  1798  033D  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1799  033E  3186  2671  3180   	fcall	_strcat
  1800                           
  1801                           ;motion_control.c: 329: strcat(sendFinalBufferToGAteway,"1");
  1802  0341  300F               	movlw	low (STR_10| (0+32768))
  1803  0342  0020               	movlb	0	; select bank0
  1804  0343  00A0               	movwf	strcat@from
  1805  0344  3090               	movlw	high (STR_10| (0+32768))
  1806  0345  00A1               	movwf	strcat@from+1
  1807  0346  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1808  0347  3186  2671  3180   	fcall	_strcat
  1809                           
  1810                           ;motion_control.c: 330: strcat(sendFinalBufferToGAteway,".");
  1811  034A  300D               	movlw	low (STR_3| (0+32768))
  1812  034B  0020               	movlb	0	; select bank0
  1813  034C  00A0               	movwf	strcat@from
  1814  034D  3090               	movlw	high (STR_3| (0+32768))
  1815  034E  00A1               	movwf	strcat@from+1
  1816  034F  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1817  0350  3186  2671  3180   	fcall	_strcat
  1818                           
  1819                           ;motion_control.c: 331: strcat(sendFinalBufferToGAteway,"1000");
  1820  0353  3000               	movlw	low (STR_12| (0+32768))
  1821  0354  0020               	movlb	0	; select bank0
  1822  0355  00A0               	movwf	strcat@from
  1823  0356  3090               	movlw	high (STR_12| (0+32768))
  1824  0357  00A1               	movwf	strcat@from+1
  1825  0358  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1826  0359  3186  2671  3180   	fcall	_strcat
  1827                           
  1828                           ;motion_control.c: 332: strcat(sendFinalBufferToGAteway,"|");
  1829  035C  3015               	movlw	low (STR_13| (0+32768))
  1830  035D  0020               	movlb	0	; select bank0
  1831  035E  00A0               	movwf	strcat@from
  1832  035F  3090               	movlw	high (STR_13| (0+32768))
  1833  0360  00A1               	movwf	strcat@from+1
  1834  0361  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1835  0362  3186  2671  3180   	fcall	_strcat
  1836                           
  1837                           ;motion_control.c: 333: sendAcknowledgmentTOMotion(sendFinalBufferToGAteway);
  1838  0365  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1839  0366  3186  26D3  3180   	fcall	_sendAcknowledgmentTOMotion
  1840                           
  1841                           ;motion_control.c: 335: PORTAbits.RA3=0;
  1842  0369  0020               	movlb	0	; select bank0
  1843  036A  118C               	bcf	12,3	;volatile
  1844  036B                     l2046:	
  1845                           
  1846                           ;motion_control.c: 336: }
  1847                           ;motion_control.c: 337: man=0;
  1848  036B  01CB               	clrf	main@man
  1849  036C  01CC               	clrf	main@man+1
  1850                           
  1851                           ;motion_control.c: 338: M3=1;
  1852  036D  3001               	movlw	1
  1853  036E  00D7               	movwf	_M3
  1854  036F  3000               	movlw	0
  1855  0370  00D8               	movwf	_M3+1
  1856  0371                     l2050:	
  1857                           
  1858                           ;motion_control.c: 340: }
  1859                           ;motion_control.c: 342: if(parentalLockBuffer[3] == '0' && PORTFbits.RF3 == 1 && M3 == 1
      +                           && mainReceivedDataBuffer[9]=='1')
  1860  0371  3030               	movlw	48
  1861  0372  0020               	movlb	0	; select bank0
  1862  0373  0660               	xorwf	_parentalLockBuffer+3,w
  1863  0374  1D03               	btfss	3,2
  1864  0375  2BFF               	goto	l2072
  1865  0376  0025               	movlb	5	; select bank5
  1866  0377  1D8C               	btfss	12,3	;volatile
  1867  0378  2BFF               	goto	l2072
  1868  0379  0020               	movlb	0	; select bank0
  1869  037A  0357               	decf	_M3,w
  1870  037B  0458               	iorwf	_M3+1,w
  1871  037C  1D03               	btfss	3,2
  1872  037D  2BFF               	goto	l2072
  1873  037E  3031               	movlw	49
  1874  037F  0021               	movlb	1	; select bank1
  1875  0380  0629               	xorwf	(_mainReceivedDataBuffer^(0+128)+9),w
  1876  0381  1D03               	btfss	3,2
  1877  0382  2BFF               	goto	l2072
  1878                           
  1879                           ;motion_control.c: 343: {
  1880                           ;motion_control.c: 344: MotionDataFlag = 0;
  1881  0383  0020               	movlb	0	; select bank0
  1882  0384  01CF               	clrf	_MotionDataFlag
  1883  0385  01D0               	clrf	_MotionDataFlag+1
  1884                           
  1885                           ;motion_control.c: 345: if(man==1)
  1886  0386  034B               	decf	main@man,w
  1887  0387  044C               	iorwf	main@man+1,w
  1888  0388  1D03               	btfss	3,2
  1889  0389  2BFB               	goto	l2068
  1890                           
  1891                           ;motion_control.c: 346: {
  1892                           ;motion_control.c: 348: strcat(sendFinalBufferToGAteway,"MT");
  1893  038A  300A               	movlw	low (STR_2| (0+32768))
  1894  038B  00A0               	movwf	strcat@from
  1895  038C  3090               	movlw	high (STR_2| (0+32768))
  1896  038D  00A1               	movwf	strcat@from+1
  1897  038E  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1898  038F  3186  2671  3180   	fcall	_strcat
  1899                           
  1900                           ;motion_control.c: 349: strcat(sendFinalBufferToGAteway,".");
  1901  0392  300D               	movlw	low (STR_3| (0+32768))
  1902  0393  0020               	movlb	0	; select bank0
  1903  0394  00A0               	movwf	strcat@from
  1904  0395  3090               	movlw	high (STR_3| (0+32768))
  1905  0396  00A1               	movwf	strcat@from+1
  1906  0397  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1907  0398  3186  2671  3180   	fcall	_strcat
  1908                           
  1909                           ;motion_control.c: 350: strcat(sendFinalBufferToGAteway,"3");
  1910  039B  3011               	movlw	low (STR_4| (0+32768))
  1911  039C  0020               	movlb	0	; select bank0
  1912  039D  00A0               	movwf	strcat@from
  1913  039E  3090               	movlw	high (STR_4| (0+32768))
  1914  039F  00A1               	movwf	strcat@from+1
  1915  03A0  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1916  03A1  3186  2671  3180   	fcall	_strcat
  1917                           
  1918                           ;motion_control.c: 351: strcat(sendFinalBufferToGAteway,".");
  1919  03A4  300D               	movlw	low (STR_3| (0+32768))
  1920  03A5  0020               	movlb	0	; select bank0
  1921  03A6  00A0               	movwf	strcat@from
  1922  03A7  3090               	movlw	high (STR_3| (0+32768))
  1923  03A8  00A1               	movwf	strcat@from+1
  1924  03A9  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1925  03AA  3186  2671  3180   	fcall	_strcat
  1926                           
  1927                           ;motion_control.c: 352: strcat(sendFinalBufferToGAteway,"ACKACT");
  1928  03AD  30F3               	movlw	low (STR_6| (0+32768))
  1929  03AE  0020               	movlb	0	; select bank0
  1930  03AF  00A0               	movwf	strcat@from
  1931  03B0  3087               	movlw	high (STR_6| (0+32768))
  1932  03B1  00A1               	movwf	strcat@from+1
  1933  03B2  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1934  03B3  3186  2671  3180   	fcall	_strcat
  1935                           
  1936                           ;motion_control.c: 353: strcat(sendFinalBufferToGAteway,".");
  1937  03B6  300D               	movlw	low (STR_3| (0+32768))
  1938  03B7  0020               	movlb	0	; select bank0
  1939  03B8  00A0               	movwf	strcat@from
  1940  03B9  3090               	movlw	high (STR_3| (0+32768))
  1941  03BA  00A1               	movwf	strcat@from+1
  1942  03BB  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1943  03BC  3186  2671  3180   	fcall	_strcat
  1944                           
  1945                           ;motion_control.c: 354: strcat(sendFinalBufferToGAteway,"1");
  1946  03BF  300F               	movlw	low (STR_10| (0+32768))
  1947  03C0  0020               	movlb	0	; select bank0
  1948  03C1  00A0               	movwf	strcat@from
  1949  03C2  3090               	movlw	high (STR_10| (0+32768))
  1950  03C3  00A1               	movwf	strcat@from+1
  1951  03C4  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1952  03C5  3186  2671  3180   	fcall	_strcat
  1953                           
  1954                           ;motion_control.c: 355: strcat(sendFinalBufferToGAteway,".");
  1955  03C8  300D               	movlw	low (STR_3| (0+32768))
  1956  03C9  0020               	movlb	0	; select bank0
  1957  03CA  00A0               	movwf	strcat@from
  1958  03CB  3090               	movlw	high (STR_3| (0+32768))
  1959  03CC  00A1               	movwf	strcat@from+1
  1960  03CD  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1961  03CE  3186  2671  3180   	fcall	_strcat
  1962                           
  1963                           ;motion_control.c: 356: strcat(sendFinalBufferToGAteway,"1");
  1964  03D1  300F               	movlw	low (STR_10| (0+32768))
  1965  03D2  0020               	movlb	0	; select bank0
  1966  03D3  00A0               	movwf	strcat@from
  1967  03D4  3090               	movlw	high (STR_10| (0+32768))
  1968  03D5  00A1               	movwf	strcat@from+1
  1969  03D6  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1970  03D7  3186  2671  3180   	fcall	_strcat
  1971                           
  1972                           ;motion_control.c: 357: strcat(sendFinalBufferToGAteway,".");
  1973  03DA  300D               	movlw	low (STR_3| (0+32768))
  1974  03DB  0020               	movlb	0	; select bank0
  1975  03DC  00A0               	movwf	strcat@from
  1976  03DD  3090               	movlw	high (STR_3| (0+32768))
  1977  03DE  00A1               	movwf	strcat@from+1
  1978  03DF  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1979  03E0  3186  2671  3180   	fcall	_strcat
  1980                           
  1981                           ;motion_control.c: 358: strcat(sendFinalBufferToGAteway,"1000");strcat(sendFinalBufferTo
      +                          GAteway,"|");
  1982  03E3  3000               	movlw	low (STR_12| (0+32768))
  1983  03E4  0020               	movlb	0	; select bank0
  1984  03E5  00A0               	movwf	strcat@from
  1985  03E6  3090               	movlw	high (STR_12| (0+32768))
  1986  03E7  00A1               	movwf	strcat@from+1
  1987  03E8  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1988  03E9  3186  2671  3180   	fcall	_strcat
  1989  03EC  3015               	movlw	low (STR_13| (0+32768))
  1990  03ED  0020               	movlb	0	; select bank0
  1991  03EE  00A0               	movwf	strcat@from
  1992  03EF  3090               	movlw	high (STR_13| (0+32768))
  1993  03F0  00A1               	movwf	strcat@from+1
  1994  03F1  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1995  03F2  3186  2671  3180   	fcall	_strcat
  1996                           
  1997                           ;motion_control.c: 359: sendAcknowledgmentTOMotion(sendFinalBufferToGAteway);
  1998  03F5  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  1999  03F6  3186  26D3  3180   	fcall	_sendAcknowledgmentTOMotion
  2000                           
  2001                           ;motion_control.c: 361: PORTAbits.RA3=1;
  2002  03F9  0020               	movlb	0	; select bank0
  2003  03FA  158C               	bsf	12,3	;volatile
  2004  03FB                     l2068:	
  2005                           
  2006                           ;motion_control.c: 362: }
  2007                           ;motion_control.c: 363: man=0;
  2008  03FB  01CB               	clrf	main@man
  2009  03FC  01CC               	clrf	main@man+1
  2010                           
  2011                           ;motion_control.c: 364: M3=0;
  2012  03FD  01D7               	clrf	_M3
  2013  03FE  01D8               	clrf	_M3+1
  2014  03FF                     l2072:	
  2015                           
  2016                           ;motion_control.c: 366: }
  2017                           ;motion_control.c: 371: if(parentalLockBuffer[4] == '0' && PORTFbits.RF2 == 0 && M4 == 0
      +                           && mainReceivedDataBuffer[9]=='1' )
  2018  03FF  3030               	movlw	48
  2019  0400  0020               	movlb	0	; select bank0
  2020  0401  0661               	xorwf	_parentalLockBuffer+4,w
  2021  0402  1D03               	btfss	3,2
  2022  0403  2C8D               	goto	l2092
  2023  0404  0025               	movlb	5	; select bank5
  2024  0405  190C               	btfsc	12,2	;volatile
  2025  0406  2C8D               	goto	l2092
  2026  0407  0020               	movlb	0	; select bank0
  2027  0408  0855               	movf	_M4,w
  2028  0409  0456               	iorwf	_M4+1,w
  2029  040A  1D03               	btfss	3,2
  2030  040B  2C8D               	goto	l2092
  2031  040C  3031               	movlw	49
  2032  040D  0021               	movlb	1	; select bank1
  2033  040E  0629               	xorwf	(_mainReceivedDataBuffer^(0+128)+9),w
  2034  040F  1D03               	btfss	3,2
  2035  0410  2C8D               	goto	l2092
  2036                           
  2037                           ;motion_control.c: 372: {
  2038                           ;motion_control.c: 373: if(man==1)
  2039  0411  0020               	movlb	0	; select bank0
  2040  0412  034B               	decf	main@man,w
  2041  0413  044C               	iorwf	main@man+1,w
  2042  0414  1D03               	btfss	3,2
  2043  0415  2C87               	goto	l2088
  2044                           
  2045                           ;motion_control.c: 374: {
  2046                           ;motion_control.c: 375: strcpy(sendFinalBufferToGAteway,"MT");
  2047  0416  300A               	movlw	low (STR_2| (0+32768))
  2048  0417  00A0               	movwf	strcpy@from
  2049  0418  3090               	movlw	high (STR_2| (0+32768))
  2050  0419  00A1               	movwf	strcpy@from+1
  2051  041A  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2052  041B  3187  2762  3180   	fcall	_strcpy
  2053                           
  2054                           ;motion_control.c: 376: strcat(sendFinalBufferToGAteway,".");
  2055  041E  300D               	movlw	low (STR_3| (0+32768))
  2056  041F  0020               	movlb	0	; select bank0
  2057  0420  00A0               	movwf	strcat@from
  2058  0421  3090               	movlw	high (STR_3| (0+32768))
  2059  0422  00A1               	movwf	strcat@from+1
  2060  0423  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2061  0424  3186  2671  3180   	fcall	_strcat
  2062                           
  2063                           ;motion_control.c: 377: strcat(sendFinalBufferToGAteway,"4");
  2064  0427  3013               	movlw	low (STR_28| (0+32768))
  2065  0428  0020               	movlb	0	; select bank0
  2066  0429  00A0               	movwf	strcat@from
  2067  042A  3090               	movlw	high (STR_28| (0+32768))
  2068  042B  00A1               	movwf	strcat@from+1
  2069  042C  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2070  042D  3186  2671  3180   	fcall	_strcat
  2071                           
  2072                           ;motion_control.c: 378: strcat(sendFinalBufferToGAteway,".");
  2073  0430  300D               	movlw	low (STR_3| (0+32768))
  2074  0431  0020               	movlb	0	; select bank0
  2075  0432  00A0               	movwf	strcat@from
  2076  0433  3090               	movlw	high (STR_3| (0+32768))
  2077  0434  00A1               	movwf	strcat@from+1
  2078  0435  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2079  0436  3186  2671  3180   	fcall	_strcat
  2080                           
  2081                           ;motion_control.c: 379: strcat(sendFinalBufferToGAteway,"ACKACT");
  2082  0439  30F3               	movlw	low (STR_6| (0+32768))
  2083  043A  0020               	movlb	0	; select bank0
  2084  043B  00A0               	movwf	strcat@from
  2085  043C  3087               	movlw	high (STR_6| (0+32768))
  2086  043D  00A1               	movwf	strcat@from+1
  2087  043E  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2088  043F  3186  2671  3180   	fcall	_strcat
  2089                           
  2090                           ;motion_control.c: 380: strcat(sendFinalBufferToGAteway,".");
  2091  0442  300D               	movlw	low (STR_3| (0+32768))
  2092  0443  0020               	movlb	0	; select bank0
  2093  0444  00A0               	movwf	strcat@from
  2094  0445  3090               	movlw	high (STR_3| (0+32768))
  2095  0446  00A1               	movwf	strcat@from+1
  2096  0447  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2097  0448  3186  2671  3180   	fcall	_strcat
  2098                           
  2099                           ;motion_control.c: 381: strcat(sendFinalBufferToGAteway,"0");
  2100  044B  3003               	movlw	low ((STR_12+3)| (0+32768))
  2101  044C  0020               	movlb	0	; select bank0
  2102  044D  00A0               	movwf	strcat@from
  2103  044E  3090               	movlw	high ((STR_12+3)| (0+32768))
  2104  044F  00A1               	movwf	strcat@from+1
  2105  0450  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2106  0451  3186  2671  3180   	fcall	_strcat
  2107                           
  2108                           ;motion_control.c: 382: strcat(sendFinalBufferToGAteway,".");
  2109  0454  300D               	movlw	low (STR_3| (0+32768))
  2110  0455  0020               	movlb	0	; select bank0
  2111  0456  00A0               	movwf	strcat@from
  2112  0457  3090               	movlw	high (STR_3| (0+32768))
  2113  0458  00A1               	movwf	strcat@from+1
  2114  0459  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2115  045A  3186  2671  3180   	fcall	_strcat
  2116                           
  2117                           ;motion_control.c: 383: strcat(sendFinalBufferToGAteway,"1");
  2118  045D  300F               	movlw	low (STR_10| (0+32768))
  2119  045E  0020               	movlb	0	; select bank0
  2120  045F  00A0               	movwf	strcat@from
  2121  0460  3090               	movlw	high (STR_10| (0+32768))
  2122  0461  00A1               	movwf	strcat@from+1
  2123  0462  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2124  0463  3186  2671  3180   	fcall	_strcat
  2125                           
  2126                           ;motion_control.c: 384: strcat(sendFinalBufferToGAteway,".");
  2127  0466  300D               	movlw	low (STR_3| (0+32768))
  2128  0467  0020               	movlb	0	; select bank0
  2129  0468  00A0               	movwf	strcat@from
  2130  0469  3090               	movlw	high (STR_3| (0+32768))
  2131  046A  00A1               	movwf	strcat@from+1
  2132  046B  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2133  046C  3186  2671  3180   	fcall	_strcat
  2134                           
  2135                           ;motion_control.c: 385: strcat(sendFinalBufferToGAteway,"1000");strcat(sendFinalBufferTo
      +                          GAteway,"|");
  2136  046F  3000               	movlw	low (STR_12| (0+32768))
  2137  0470  0020               	movlb	0	; select bank0
  2138  0471  00A0               	movwf	strcat@from
  2139  0472  3090               	movlw	high (STR_12| (0+32768))
  2140  0473  00A1               	movwf	strcat@from+1
  2141  0474  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2142  0475  3186  2671  3180   	fcall	_strcat
  2143  0478  3015               	movlw	low (STR_13| (0+32768))
  2144  0479  0020               	movlb	0	; select bank0
  2145  047A  00A0               	movwf	strcat@from
  2146  047B  3090               	movlw	high (STR_13| (0+32768))
  2147  047C  00A1               	movwf	strcat@from+1
  2148  047D  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2149  047E  3186  2671  3180   	fcall	_strcat
  2150                           
  2151                           ;motion_control.c: 386: sendAcknowledgmentTOMotion(sendFinalBufferToGAteway);
  2152  0481  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2153  0482  3186  26D3  3180   	fcall	_sendAcknowledgmentTOMotion
  2154                           
  2155                           ;motion_control.c: 388: PORTAbits.RA2=0;
  2156  0485  0020               	movlb	0	; select bank0
  2157  0486  110C               	bcf	12,2	;volatile
  2158  0487                     l2088:	
  2159                           
  2160                           ;motion_control.c: 389: }
  2161                           ;motion_control.c: 390: man=0;
  2162  0487  01CB               	clrf	main@man
  2163  0488  01CC               	clrf	main@man+1
  2164                           
  2165                           ;motion_control.c: 391: M4=1;
  2166  0489  3001               	movlw	1
  2167  048A  00D5               	movwf	_M4
  2168  048B  3000               	movlw	0
  2169  048C  00D6               	movwf	_M4+1
  2170  048D                     l2092:	
  2171                           
  2172                           ;motion_control.c: 393: }
  2173                           ;motion_control.c: 395: if(parentalLockBuffer[4] == '0' && PORTFbits.RF2 == 1 && M4 == 1
      +                           )
  2174  048D  3030               	movlw	48
  2175  048E  0020               	movlb	0	; select bank0
  2176  048F  0661               	xorwf	_parentalLockBuffer+4,w
  2177  0490  1D03               	btfss	3,2
  2178  0491  28F7               	goto	l1918
  2179  0492  0025               	movlb	5	; select bank5
  2180  0493  1D0C               	btfss	12,2	;volatile
  2181  0494  28F7               	goto	l1918
  2182  0495  0020               	movlb	0	; select bank0
  2183  0496  0355               	decf	_M4,w
  2184  0497  0456               	iorwf	_M4+1,w
  2185  0498  1D03               	btfss	3,2
  2186  0499  28F7               	goto	l1918
  2187                           
  2188                           ;motion_control.c: 396: {
  2189                           ;motion_control.c: 397: MotionDataFlag = 0;
  2190  049A  01CF               	clrf	_MotionDataFlag
  2191  049B  01D0               	clrf	_MotionDataFlag+1
  2192                           
  2193                           ;motion_control.c: 398: if(man==1)
  2194  049C  034B               	decf	main@man,w
  2195  049D  044C               	iorwf	main@man+1,w
  2196  049E  1D03               	btfss	3,2
  2197  049F  2D11               	goto	l2108
  2198                           
  2199                           ;motion_control.c: 399: {
  2200                           ;motion_control.c: 400: strcpy(sendFinalBufferToGAteway,"MT");
  2201  04A0  300A               	movlw	low (STR_2| (0+32768))
  2202  04A1  00A0               	movwf	strcpy@from
  2203  04A2  3090               	movlw	high (STR_2| (0+32768))
  2204  04A3  00A1               	movwf	strcpy@from+1
  2205  04A4  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2206  04A5  3187  2762  3180   	fcall	_strcpy
  2207                           
  2208                           ;motion_control.c: 401: strcat(sendFinalBufferToGAteway,".");
  2209  04A8  300D               	movlw	low (STR_3| (0+32768))
  2210  04A9  0020               	movlb	0	; select bank0
  2211  04AA  00A0               	movwf	strcat@from
  2212  04AB  3090               	movlw	high (STR_3| (0+32768))
  2213  04AC  00A1               	movwf	strcat@from+1
  2214  04AD  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2215  04AE  3186  2671  3180   	fcall	_strcat
  2216                           
  2217                           ;motion_control.c: 402: strcat(sendFinalBufferToGAteway,"4");
  2218  04B1  3013               	movlw	low (STR_28| (0+32768))
  2219  04B2  0020               	movlb	0	; select bank0
  2220  04B3  00A0               	movwf	strcat@from
  2221  04B4  3090               	movlw	high (STR_28| (0+32768))
  2222  04B5  00A1               	movwf	strcat@from+1
  2223  04B6  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2224  04B7  3186  2671  3180   	fcall	_strcat
  2225                           
  2226                           ;motion_control.c: 403: strcat(sendFinalBufferToGAteway,".");
  2227  04BA  300D               	movlw	low (STR_3| (0+32768))
  2228  04BB  0020               	movlb	0	; select bank0
  2229  04BC  00A0               	movwf	strcat@from
  2230  04BD  3090               	movlw	high (STR_3| (0+32768))
  2231  04BE  00A1               	movwf	strcat@from+1
  2232  04BF  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2233  04C0  3186  2671  3180   	fcall	_strcat
  2234                           
  2235                           ;motion_control.c: 404: strcat(sendFinalBufferToGAteway,"ACKACT");
  2236  04C3  30F3               	movlw	low (STR_6| (0+32768))
  2237  04C4  0020               	movlb	0	; select bank0
  2238  04C5  00A0               	movwf	strcat@from
  2239  04C6  3087               	movlw	high (STR_6| (0+32768))
  2240  04C7  00A1               	movwf	strcat@from+1
  2241  04C8  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2242  04C9  3186  2671  3180   	fcall	_strcat
  2243                           
  2244                           ;motion_control.c: 405: strcat(sendFinalBufferToGAteway,".");
  2245  04CC  300D               	movlw	low (STR_3| (0+32768))
  2246  04CD  0020               	movlb	0	; select bank0
  2247  04CE  00A0               	movwf	strcat@from
  2248  04CF  3090               	movlw	high (STR_3| (0+32768))
  2249  04D0  00A1               	movwf	strcat@from+1
  2250  04D1  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2251  04D2  3186  2671  3180   	fcall	_strcat
  2252                           
  2253                           ;motion_control.c: 406: strcat(sendFinalBufferToGAteway,"1");
  2254  04D5  300F               	movlw	low (STR_10| (0+32768))
  2255  04D6  0020               	movlb	0	; select bank0
  2256  04D7  00A0               	movwf	strcat@from
  2257  04D8  3090               	movlw	high (STR_10| (0+32768))
  2258  04D9  00A1               	movwf	strcat@from+1
  2259  04DA  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2260  04DB  3186  2671  3180   	fcall	_strcat
  2261                           
  2262                           ;motion_control.c: 407: strcat(sendFinalBufferToGAteway,".");
  2263  04DE  300D               	movlw	low (STR_3| (0+32768))
  2264  04DF  0020               	movlb	0	; select bank0
  2265  04E0  00A0               	movwf	strcat@from
  2266  04E1  3090               	movlw	high (STR_3| (0+32768))
  2267  04E2  00A1               	movwf	strcat@from+1
  2268  04E3  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2269  04E4  3186  2671  3180   	fcall	_strcat
  2270                           
  2271                           ;motion_control.c: 408: strcat(sendFinalBufferToGAteway,"1");
  2272  04E7  300F               	movlw	low (STR_10| (0+32768))
  2273  04E8  0020               	movlb	0	; select bank0
  2274  04E9  00A0               	movwf	strcat@from
  2275  04EA  3090               	movlw	high (STR_10| (0+32768))
  2276  04EB  00A1               	movwf	strcat@from+1
  2277  04EC  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2278  04ED  3186  2671  3180   	fcall	_strcat
  2279                           
  2280                           ;motion_control.c: 409: strcat(sendFinalBufferToGAteway,".");
  2281  04F0  300D               	movlw	low (STR_3| (0+32768))
  2282  04F1  0020               	movlb	0	; select bank0
  2283  04F2  00A0               	movwf	strcat@from
  2284  04F3  3090               	movlw	high (STR_3| (0+32768))
  2285  04F4  00A1               	movwf	strcat@from+1
  2286  04F5  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2287  04F6  3186  2671  3180   	fcall	_strcat
  2288                           
  2289                           ;motion_control.c: 410: strcat(sendFinalBufferToGAteway,"1000");strcat(sendFinalBufferTo
      +                          GAteway,"|");
  2290  04F9  3000               	movlw	low (STR_12| (0+32768))
  2291  04FA  0020               	movlb	0	; select bank0
  2292  04FB  00A0               	movwf	strcat@from
  2293  04FC  3090               	movlw	high (STR_12| (0+32768))
  2294  04FD  00A1               	movwf	strcat@from+1
  2295  04FE  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2296  04FF  3186  2671  3180   	fcall	_strcat
  2297  0502  3015               	movlw	low (STR_13| (0+32768))
  2298  0503  0020               	movlb	0	; select bank0
  2299  0504  00A0               	movwf	strcat@from
  2300  0505  3090               	movlw	high (STR_13| (0+32768))
  2301  0506  00A1               	movwf	strcat@from+1
  2302  0507  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2303  0508  3186  2671  3180   	fcall	_strcat
  2304                           
  2305                           ;motion_control.c: 412: sendAcknowledgmentTOMotion(sendFinalBufferToGAteway);
  2306  050B  30BC               	movlw	(low (_sendFinalBufferToGAteway| 0))& (0+255)
  2307  050C  3186  26D3  3180   	fcall	_sendAcknowledgmentTOMotion
  2308                           
  2309                           ;motion_control.c: 414: PORTAbits.RA2=1;
  2310  050F  0020               	movlb	0	; select bank0
  2311  0510  150C               	bsf	12,2	;volatile
  2312  0511                     l2108:	
  2313                           
  2314                           ;motion_control.c: 415: }
  2315                           ;motion_control.c: 416: man=0;
  2316  0511  01CB               	clrf	main@man
  2317  0512  01CC               	clrf	main@man+1
  2318                           
  2319                           ;motion_control.c: 417: M4=0;
  2320  0513  01D5               	clrf	_M4
  2321  0514  01D6               	clrf	_M4+1
  2322  0515  28F7               	goto	l1918
  2323  0516                     __end_of_main:	
  2324                           
  2325                           	psect	text1
  2326  0762                     __ptext1:	
  2327 ;; *************** function _strcpy *****************
  2328 ;; Defined at:
  2329 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  2330 ;; Parameters:    Size  Location     Type
  2331 ;;  to              1    wreg     PTR unsigned char 
  2332 ;;		 -> sendFinalBufferToGAteway(24), 
  2333 ;;  from            2    0[BANK0 ] PTR const unsigned char 
  2334 ;;		 -> STR_38(3), STR_26(3), STR_2(3), 
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;  to              1    4[BANK0 ] PTR unsigned char 
  2337 ;;		 -> sendFinalBufferToGAteway(24), 
  2338 ;;  cp              1    3[BANK0 ] PTR unsigned char 
  2339 ;;		 -> sendFinalBufferToGAteway(24), 
  2340 ;; Return value:  Size  Location     Type
  2341 ;;                  1    wreg      PTR unsigned char 
  2342 ;; Registers used:
  2343 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  2344 ;; Tracked objects:
  2345 ;;		On entry : 0/0
  2346 ;;		On exit  : 0/0
  2347 ;;		Unchanged: 0/0
  2348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2349 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  2350 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  2351 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  2352 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0
  2353 ;;Total ram usage:        5 bytes
  2354 ;; Hardware stack levels used:    1
  2355 ;; Hardware stack levels required when called:    2
  2356 ;; This function calls:
  2357 ;;		Nothing
  2358 ;; This function is called by:
  2359 ;;		_main
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362                           
  2363                           
  2364                           ;psect for function _strcpy
  2365  0762                     _strcpy:	
  2366                           
  2367                           ;incstack = 0
  2368                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  2369                           ;strcpy@to stored from wreg
  2370  0762  0020               	movlb	0	; select bank0
  2371  0763  00A4               	movwf	strcpy@to
  2372  0764  0824               	movf	strcpy@to,w
  2373  0765  00A2               	movwf	??_strcpy
  2374  0766  0822               	movf	??_strcpy,w
  2375  0767  00A3               	movwf	strcpy@cp
  2376  0768                     l1890:	
  2377  0768  0823               	movf	strcpy@cp,w
  2378  0769  0086               	movwf	6
  2379  076A  0187               	clrf	7
  2380  076B  0820               	movf	strcpy@from,w
  2381  076C  0084               	movwf	4
  2382  076D  0821               	movf	strcpy@from+1,w
  2383  076E  0085               	movwf	5
  2384  076F  0800               	movf	0,w	;code access
  2385  0770  3FC0               	movwi [0]fsr1
  2386  0771  0889               	movf	9,f
  2387  0772  1903               	btfsc	3,2
  2388  0773  0008               	return
  2389  0774  3001               	movlw	1
  2390  0775  00A2               	movwf	??_strcpy
  2391  0776  0822               	movf	??_strcpy,w
  2392  0777  07A3               	addwf	strcpy@cp,f
  2393  0778  3001               	movlw	1
  2394  0779  07A0               	addwf	strcpy@from,f
  2395  077A  3000               	movlw	0
  2396  077B  3DA1               	addwfc	strcpy@from+1,f
  2397  077C  2F68               	goto	l1890
  2398  077D                     __end_of_strcpy:	
  2399                           ;	Return value of _strcpy is never used
  2400                           
  2401                           
  2402                           	psect	text2
  2403  0671                     __ptext2:	
  2404 ;; *************** function _strcat *****************
  2405 ;; Defined at:
  2406 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcat.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;  to              1    wreg     PTR unsigned char 
  2409 ;;		 -> sendFinalBufferToGAteway(24), 
  2410 ;;  from            2    0[BANK0 ] PTR const unsigned char 
  2411 ;;		 -> STR_49(2), STR_48(5), STR_47(2), STR_46(2), 
  2412 ;;		 -> STR_45(2), STR_44(2), STR_43(2), STR_42(7), 
  2413 ;;		 -> STR_41(2), STR_40(2), STR_39(2), STR_37(2), 
  2414 ;;		 -> STR_36(5), STR_35(2), STR_34(2), STR_33(2), 
  2415 ;;		 -> STR_32(2), STR_31(2), STR_30(7), STR_29(2), 
  2416 ;;		 -> STR_28(2), STR_27(2), STR_25(2), STR_24(5), 
  2417 ;;		 -> STR_23(2), STR_22(2), STR_21(2), STR_20(2), 
  2418 ;;		 -> STR_19(2), STR_18(7), STR_17(2), STR_16(2), 
  2419 ;;		 -> STR_15(2), STR_14(3), STR_13(2), STR_12(5), 
  2420 ;;		 -> STR_11(2), STR_10(2), STR_9(2), STR_8(2), 
  2421 ;;		 -> STR_7(2), STR_6(7), STR_5(2), STR_4(2), 
  2422 ;;		 -> STR_3(2), 
  2423 ;; Auto vars:     Size  Location     Type
  2424 ;;  to              1    4[BANK0 ] PTR unsigned char 
  2425 ;;		 -> sendFinalBufferToGAteway(24), 
  2426 ;;  cp              1    3[BANK0 ] PTR unsigned char 
  2427 ;;		 -> sendFinalBufferToGAteway(24), 
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  1    wreg      PTR unsigned char 
  2430 ;; Registers used:
  2431 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2437 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  2438 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  2439 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  2440 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0
  2441 ;;Total ram usage:        5 bytes
  2442 ;; Hardware stack levels used:    1
  2443 ;; Hardware stack levels required when called:    2
  2444 ;; This function calls:
  2445 ;;		Nothing
  2446 ;; This function is called by:
  2447 ;;		_main
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           
  2452                           ;psect for function _strcat
  2453  0671                     _strcat:	
  2454                           
  2455                           ;incstack = 0
  2456                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath]
  2457                           ;strcat@to stored from wreg
  2458  0671  0020               	movlb	0	; select bank0
  2459  0672  00A4               	movwf	strcat@to
  2460  0673  0824               	movf	strcat@to,w
  2461  0674  00A2               	movwf	??_strcat
  2462  0675  0822               	movf	??_strcat,w
  2463  0676  00A3               	movwf	strcat@cp
  2464  0677                     l1896:	
  2465  0677  0823               	movf	strcat@cp,w
  2466  0678  0086               	movwf	6
  2467  0679  0187               	clrf	7
  2468  067A  0801               	movf	1,w
  2469  067B  1903               	btfsc	3,2
  2470  067C  2E8A               	goto	l1902
  2471  067D  3001               	movlw	1
  2472  067E  00A2               	movwf	??_strcat
  2473  067F  0822               	movf	??_strcat,w
  2474  0680  07A3               	addwf	strcat@cp,f
  2475  0681  2E77               	goto	l1896
  2476  0682                     l1898:	
  2477  0682  3001               	movlw	1
  2478  0683  00A2               	movwf	??_strcat
  2479  0684  0822               	movf	??_strcat,w
  2480  0685  07A3               	addwf	strcat@cp,f
  2481  0686  3001               	movlw	1
  2482  0687  07A0               	addwf	strcat@from,f
  2483  0688  3000               	movlw	0
  2484  0689  3DA1               	addwfc	strcat@from+1,f
  2485  068A                     l1902:	
  2486  068A  0823               	movf	strcat@cp,w
  2487  068B  0086               	movwf	6
  2488  068C  0187               	clrf	7
  2489  068D  0820               	movf	strcat@from,w
  2490  068E  0084               	movwf	4
  2491  068F  0821               	movf	strcat@from+1,w
  2492  0690  0085               	movwf	5
  2493  0691  0800               	movf	0,w	;code access
  2494  0692  3FC0               	movwi [0]fsr1
  2495  0693  0889               	movf	9,f
  2496  0694  1903               	btfsc	3,2
  2497  0695  0008               	return
  2498  0696  2E82               	goto	l1898
  2499  0697                     __end_of_strcat:	
  2500                           ;	Return value of _strcat is never used
  2501                           
  2502                           
  2503                           	psect	text3
  2504  06D3                     __ptext3:	
  2505 ;; *************** function _sendAcknowledgmentTOMotion *****************
  2506 ;; Defined at:
  2507 ;;		line 625 in file "motion_control.c"
  2508 ;; Parameters:    Size  Location     Type
  2509 ;;  currentState    1    wreg     PTR unsigned char 
  2510 ;;		 -> sendFinalBufferToGAteway(24), 
  2511 ;; Auto vars:     Size  Location     Type
  2512 ;;  currentState    1    3[BANK0 ] PTR unsigned char 
  2513 ;;		 -> sendFinalBufferToGAteway(24), 
  2514 ;;  Tx_count        2    1[BANK0 ] int 
  2515 ;; Return value:  Size  Location     Type
  2516 ;;                  1    wreg      void 
  2517 ;; Registers used:
  2518 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2519 ;; Tracked objects:
  2520 ;;		On entry : 0/0
  2521 ;;		On exit  : 0/0
  2522 ;;		Unchanged: 0/0
  2523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2525 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  2526 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  2527 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  2528 ;;Total ram usage:        4 bytes
  2529 ;; Hardware stack levels used:    1
  2530 ;; Hardware stack levels required when called:    2
  2531 ;; This function calls:
  2532 ;;		Nothing
  2533 ;; This function is called by:
  2534 ;;		_main
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           
  2539                           ;psect for function _sendAcknowledgmentTOMotion
  2540  06D3                     _sendAcknowledgmentTOMotion:	
  2541                           
  2542                           ;incstack = 0
  2543                           ; Regs used in _sendAcknowledgmentTOMotion: [wreg+fsr1l+fsr1h+status,2+status,0]
  2544                           ;sendAcknowledgmentTOMotion@currentStateBufferMotion stored from wreg
  2545  06D3  0020               	movlb	0	; select bank0
  2546  06D4  00A3               	movwf	sendAcknowledgmentTOMotion@currentStateBufferMotion
  2547                           
  2548                           ;motion_control.c: 626: int Tx_count=0;
  2549  06D5  01A1               	clrf	sendAcknowledgmentTOMotion@Tx_count
  2550  06D6  01A2               	clrf	sendAcknowledgmentTOMotion@Tx_count+1
  2551  06D7                     l1912:	
  2552                           ;motion_control.c: 627: while(Tx_count != 22)
  2553                           
  2554  06D7  3016               	movlw	22
  2555  06D8  0621               	xorwf	sendAcknowledgmentTOMotion@Tx_count,w
  2556  06D9  0422               	iorwf	sendAcknowledgmentTOMotion@Tx_count+1,w
  2557  06DA  1903               	btfsc	3,2
  2558  06DB  0008               	return
  2559  06DC                     l228:	
  2560                           ;motion_control.c: 628: {
  2561                           ;motion_control.c: 629: while (!TX1STAbits.TRMT);
  2562                           
  2563  06DC  0023               	movlb	3	; select bank3
  2564  06DD  1C9E               	btfss	30,1	;volatile
  2565  06DE  2EDC               	goto	l228
  2566                           
  2567                           ;motion_control.c: 630: TX1REG = *currentStateBufferMotion;
  2568  06DF  0020               	movlb	0	; select bank0
  2569  06E0  0823               	movf	sendAcknowledgmentTOMotion@currentStateBufferMotion,w
  2570  06E1  0086               	movwf	6
  2571  06E2  0187               	clrf	7
  2572  06E3  0801               	movf	1,w
  2573  06E4  0023               	movlb	3	; select bank3
  2574  06E5  009A               	movwf	26	;volatile
  2575                           
  2576                           ;motion_control.c: 631: *currentStateBufferMotion++;
  2577  06E6  3001               	movlw	1
  2578  06E7  0020               	movlb	0	; select bank0
  2579  06E8  00A0               	movwf	??_sendAcknowledgmentTOMotion
  2580  06E9  0820               	movf	??_sendAcknowledgmentTOMotion,w
  2581  06EA  07A3               	addwf	sendAcknowledgmentTOMotion@currentStateBufferMotion,f
  2582                           
  2583                           ;motion_control.c: 632: Tx_count++;
  2584  06EB  3001               	movlw	1
  2585  06EC  07A1               	addwf	sendAcknowledgmentTOMotion@Tx_count,f
  2586  06ED  3000               	movlw	0
  2587  06EE  3DA2               	addwfc	sendAcknowledgmentTOMotion@Tx_count+1,f
  2588  06EF  2ED7               	goto	l1912
  2589  06F0                     __end_of_sendAcknowledgmentTOMotion:	
  2590                           
  2591                           	psect	text4
  2592  06F0                     __ptext4:	
  2593 ;; *************** function _errorsMain *****************
  2594 ;; Defined at:
  2595 ;;		line 605 in file "motion_control.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;  errNum          1    wreg     PTR unsigned char 
  2598 ;;		 -> ErrorNames(5), 
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;  errNum          1    3[BANK0 ] PTR unsigned char 
  2601 ;;		 -> ErrorNames(5), 
  2602 ;;  Tx_count        2    1[BANK0 ] int 
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  1    wreg      void 
  2605 ;; Registers used:
  2606 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2613 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  2614 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  2615 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  2616 ;;Total ram usage:        4 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:    2
  2619 ;; This function calls:
  2620 ;;		Nothing
  2621 ;; This function is called by:
  2622 ;;		_main
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           
  2627                           ;psect for function _errorsMain
  2628  06F0                     _errorsMain:	
  2629                           
  2630                           ;incstack = 0
  2631                           ; Regs used in _errorsMain: [wreg+fsr1l+fsr1h+status,2+status,0]
  2632                           ;errorsMain@errNum stored from wreg
  2633  06F0  0020               	movlb	0	; select bank0
  2634  06F1  00A3               	movwf	errorsMain@errNum
  2635                           
  2636                           ;motion_control.c: 606: int Tx_count=0;
  2637  06F2  01A1               	clrf	errorsMain@Tx_count
  2638  06F3  01A2               	clrf	errorsMain@Tx_count+1
  2639  06F4                     l1882:	
  2640                           ;motion_control.c: 607: while(Tx_count!=4)
  2641                           
  2642  06F4  3004               	movlw	4
  2643  06F5  0621               	xorwf	errorsMain@Tx_count,w
  2644  06F6  0422               	iorwf	errorsMain@Tx_count+1,w
  2645  06F7  1903               	btfsc	3,2
  2646  06F8  0008               	return
  2647  06F9                     l210:	
  2648                           ;motion_control.c: 608: {
  2649                           ;motion_control.c: 609: while (!TX1STAbits.TRMT);
  2650                           
  2651  06F9  0023               	movlb	3	; select bank3
  2652  06FA  1C9E               	btfss	30,1	;volatile
  2653  06FB  2EF9               	goto	l210
  2654                           
  2655                           ;motion_control.c: 610: TX1REG = *errNum;
  2656  06FC  0020               	movlb	0	; select bank0
  2657  06FD  0823               	movf	errorsMain@errNum,w
  2658  06FE  0086               	movwf	6
  2659  06FF  0187               	clrf	7
  2660  0700  0801               	movf	1,w
  2661  0701  0023               	movlb	3	; select bank3
  2662  0702  009A               	movwf	26	;volatile
  2663                           
  2664                           ;motion_control.c: 611: *errNum++;
  2665  0703  3001               	movlw	1
  2666  0704  0020               	movlb	0	; select bank0
  2667  0705  00A0               	movwf	??_errorsMain
  2668  0706  0820               	movf	??_errorsMain,w
  2669  0707  07A3               	addwf	errorsMain@errNum,f
  2670                           
  2671                           ;motion_control.c: 612: Tx_count++;
  2672  0708  3001               	movlw	1
  2673  0709  07A1               	addwf	errorsMain@Tx_count,f
  2674  070A  3000               	movlw	0
  2675  070B  3DA2               	addwfc	errorsMain@Tx_count+1,f
  2676  070C  2EF4               	goto	l1882
  2677  070D                     __end_of_errorsMain:	
  2678                           
  2679                           	psect	text5
  2680  070D                     __ptext5:	
  2681 ;; *************** function _errorsISR *****************
  2682 ;; Defined at:
  2683 ;;		line 595 in file "motion_control.c"
  2684 ;; Parameters:    Size  Location     Type
  2685 ;;  errNum          2    0[BANK0 ] PTR unsigned char 
  2686 ;;		 -> STR_1(5), ErrorNames(5), 
  2687 ;; Auto vars:     Size  Location     Type
  2688 ;;  Tx_count        2    2[BANK0 ] int 
  2689 ;; Return value:  Size  Location     Type
  2690 ;;                  1    wreg      void 
  2691 ;; Registers used:
  2692 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2693 ;; Tracked objects:
  2694 ;;		On entry : 0/0
  2695 ;;		On exit  : 0/0
  2696 ;;		Unchanged: 0/0
  2697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2698 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  2699 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  2700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  2701 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  2702 ;;Total ram usage:        4 bytes
  2703 ;; Hardware stack levels used:    1
  2704 ;; Hardware stack levels required when called:    2
  2705 ;; This function calls:
  2706 ;;		Nothing
  2707 ;; This function is called by:
  2708 ;;		_main
  2709 ;; This function uses a non-reentrant model
  2710 ;;
  2711                           
  2712                           
  2713                           ;psect for function _errorsISR
  2714  070D                     _errorsISR:	
  2715                           
  2716                           ;motion_control.c: 596: int Tx_count=0;
  2717                           
  2718                           ;incstack = 0
  2719                           ; Regs used in _errorsISR: [wreg-fsr0h+status,2+status,0+pclath]
  2720  070D  0020               	movlb	0	; select bank0
  2721  070E  01A2               	clrf	errorsISR@Tx_count
  2722  070F  01A3               	clrf	errorsISR@Tx_count+1
  2723  0710                     l1778:	
  2724                           ;motion_control.c: 597: while(Tx_count!=4)
  2725                           
  2726  0710  3004               	movlw	4
  2727  0711  0622               	xorwf	errorsISR@Tx_count,w
  2728  0712  0423               	iorwf	errorsISR@Tx_count+1,w
  2729  0713  1903               	btfsc	3,2
  2730  0714  0008               	return
  2731  0715                     l201:	
  2732                           ;motion_control.c: 598: {
  2733                           ;motion_control.c: 599: while (!TX1STAbits.TRMT);
  2734                           
  2735  0715  0023               	movlb	3	; select bank3
  2736  0716  1C9E               	btfss	30,1	;volatile
  2737  0717  2F15               	goto	l201
  2738                           
  2739                           ;motion_control.c: 600: TX1REG = *errNum;
  2740  0718  0020               	movlb	0	; select bank0
  2741  0719  0820               	movf	errorsISR@errNum,w
  2742  071A  0084               	movwf	4
  2743  071B  0821               	movf	errorsISR@errNum+1,w
  2744  071C  0085               	movwf	5
  2745  071D  0800               	movf	0,w	;code access
  2746  071E  0023               	movlb	3	; select bank3
  2747  071F  009A               	movwf	26	;volatile
  2748                           
  2749                           ;motion_control.c: 601: *errNum++;
  2750  0720  3001               	movlw	1
  2751  0721  0020               	movlb	0	; select bank0
  2752  0722  07A0               	addwf	errorsISR@errNum,f
  2753  0723  3000               	movlw	0
  2754  0724  3DA1               	addwfc	errorsISR@errNum+1,f
  2755                           
  2756                           ;motion_control.c: 602: Tx_count++;
  2757  0725  3001               	movlw	1
  2758  0726  07A2               	addwf	errorsISR@Tx_count,f
  2759  0727  3000               	movlw	0
  2760  0728  3DA3               	addwfc	errorsISR@Tx_count+1,f
  2761  0729  2F10               	goto	l1778
  2762  072A                     __end_of_errorsISR:	
  2763                           
  2764                           	psect	text6
  2765  0642                     __ptext6:	
  2766 ;; *************** function _copyReceivedDataBuffer *****************
  2767 ;; Defined at:
  2768 ;;		line 635 in file "motion_control.c"
  2769 ;; Parameters:    Size  Location     Type
  2770 ;;		None
  2771 ;; Auto vars:     Size  Location     Type
  2772 ;;  dataBufferCo    2    1[BANK0 ] int 
  2773 ;; Return value:  Size  Location     Type
  2774 ;;                  1    wreg      void 
  2775 ;; Registers used:
  2776 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2777 ;; Tracked objects:
  2778 ;;		On entry : 0/0
  2779 ;;		On exit  : 0/0
  2780 ;;		Unchanged: 0/0
  2781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  2783 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  2784 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  2785 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0
  2786 ;;Total ram usage:        3 bytes
  2787 ;; Hardware stack levels used:    1
  2788 ;; Hardware stack levels required when called:    2
  2789 ;; This function calls:
  2790 ;;		Nothing
  2791 ;; This function is called by:
  2792 ;;		_main
  2793 ;; This function uses a non-reentrant model
  2794 ;;
  2795                           
  2796                           
  2797                           ;psect for function _copyReceivedDataBuffer
  2798  0642                     _copyReceivedDataBuffer:	
  2799                           
  2800                           ;motion_control.c: 636: int dataBufferCounter=2;
  2801                           
  2802                           ;incstack = 0
  2803                           ; Regs used in _copyReceivedDataBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  2804  0642  3002               	movlw	2
  2805  0643  0020               	movlb	0	; select bank0
  2806  0644  00A1               	movwf	copyReceivedDataBuffer@dataBufferCounter
  2807  0645  3000               	movlw	0
  2808  0646  00A2               	movwf	copyReceivedDataBuffer@dataBufferCounter+1
  2809                           
  2810                           ;motion_control.c: 637: for(dataBufferCounter=2;dataBufferCounter<9;dataBufferCounter++)
      +                          {
  2811  0647  3002               	movlw	2
  2812  0648  00A1               	movwf	copyReceivedDataBuffer@dataBufferCounter
  2813  0649  3000               	movlw	0
  2814  064A  00A2               	movwf	copyReceivedDataBuffer@dataBufferCounter+1
  2815  064B                     L1:	
  2816  064B  0822               	movf	copyReceivedDataBuffer@dataBufferCounter+1,w
  2817  064C  3A80               	xorlw	128
  2818  064D  00A0               	movwf	??_copyReceivedDataBuffer
  2819  064E  3080               	movlw	128
  2820  064F  0220               	subwf	??_copyReceivedDataBuffer,w
  2821  0650  1D03               	skipz
  2822  0651  2E54               	goto	u1775
  2823  0652  3009               	movlw	9
  2824  0653  0221               	subwf	copyReceivedDataBuffer@dataBufferCounter,w
  2825  0654                     u1775:	
  2826  0654  1803               	btfsc	3,0
  2827  0655  0008               	return
  2828                           
  2829                           ;motion_control.c: 638: tempReceivedDataBuffer[dataBufferCounter-2]=mainReceivedDataBuff
      +                          er[dataBufferCounter];
  2830  0656  0020               	movlb	0	; select bank0
  2831  0657  0821               	movf	copyReceivedDataBuffer@dataBufferCounter,w
  2832  0658  3EA0               	addlw	(low (_mainReceivedDataBuffer| 0))& (0+255)
  2833  0659  0086               	movwf	6
  2834  065A  0187               	clrf	7
  2835  065B  0801               	movf	1,w
  2836  065C  00A0               	movwf	??_copyReceivedDataBuffer
  2837  065D  0821               	movf	copyReceivedDataBuffer@dataBufferCounter,w
  2838  065E  3EFE               	addlw	254
  2839  065F  3EB2               	addlw	(low (_tempReceivedDataBuffer| 0))& (0+255)
  2840  0660  0086               	movwf	6
  2841  0661  0187               	clrf	7
  2842  0662  0820               	movf	??_copyReceivedDataBuffer,w
  2843  0663  0081               	movwf	1
  2844                           
  2845                           ;motion_control.c: 639: mainReceivedDataBuffer[dataBufferCounter]='#';
  2846  0664  3023               	movlw	35
  2847  0665  00A0               	movwf	??_copyReceivedDataBuffer
  2848  0666  0821               	movf	copyReceivedDataBuffer@dataBufferCounter,w
  2849  0667  3EA0               	addlw	(low (_mainReceivedDataBuffer| 0))& (0+255)
  2850  0668  0086               	movwf	6
  2851  0669  0187               	clrf	7
  2852  066A  0820               	movf	??_copyReceivedDataBuffer,w
  2853  066B  0081               	movwf	1
  2854  066C  3001               	movlw	1
  2855  066D  07A1               	addwf	copyReceivedDataBuffer@dataBufferCounter,f
  2856  066E  3000               	movlw	0
  2857  066F  3DA2               	addwfc	copyReceivedDataBuffer@dataBufferCounter+1,f
  2858  0670  2E4B               	goto	L1
  2859  0671                     __end_of_copyReceivedDataBuffer:	
  2860                           
  2861                           	psect	text7
  2862  0516                     __ptext7:	
  2863 ;; *************** function _applianceControl *****************
  2864 ;; Defined at:
  2865 ;;		line 424 in file "motion_control.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;  charSwitchMS    1    wreg     unsigned char 
  2868 ;;  charSwitchLS    1   14[BANK0 ] unsigned char 
  2869 ;;  charSwitchST    1   15[BANK0 ] unsigned char 
  2870 ;;  chDimmerSpee    1   16[BANK0 ] unsigned char 
  2871 ;;  chDimmerSpee    1   17[BANK0 ] unsigned char 
  2872 ;;  charParental    1   18[BANK0 ] unsigned char 
  2873 ;;  charFinalFra    1   19[BANK0 ] unsigned char 
  2874 ;; Auto vars:     Size  Location     Type
  2875 ;;  charSwitchMS    1   24[BANK0 ] unsigned char 
  2876 ;;  currentState    2   33[BANK0 ] int 
  2877 ;;  dimmerSpeedS    2   27[BANK0 ] unsigned char [2]
  2878 ;;  switchNumber    2   25[BANK0 ] unsigned char [2]
  2879 ;;  integerSwitc    2   31[BANK0 ] int 
  2880 ;;  integerSwitc    2   29[BANK0 ] int 
  2881 ;;  integerSpeed    2   22[BANK0 ] int 
  2882 ;; Return value:  Size  Location     Type
  2883 ;;                  1    wreg      void 
  2884 ;; Registers used:
  2885 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  2891 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0
  2892 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0
  2893 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  2894 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0
  2895 ;;Total ram usage:       21 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:    4
  2898 ;; This function calls:
  2899 ;;		_atoi
  2900 ;;		_sendAcknowledgment
  2901 ;; This function is called by:
  2902 ;;		_main
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           
  2907                           ;psect for function _applianceControl
  2908  0516                     _applianceControl:	
  2909                           
  2910                           ;incstack = 0
  2911                           ; Regs used in _applianceControl: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2912                           ;applianceControl@charSwitchMSB stored from wreg
  2913  0516  0020               	movlb	0	; select bank0
  2914  0517  00B8               	movwf	applianceControl@charSwitchMSB
  2915                           
  2916                           ;motion_control.c: 428: int integerSwitchNumber = 0;
  2917  0518  01BD               	clrf	applianceControl@integerSwitchNumber
  2918  0519  01BE               	clrf	applianceControl@integerSwitchNumber+1
  2919                           
  2920                           ;motion_control.c: 429: int integerSwitchState = 0;
  2921  051A  01BF               	clrf	applianceControl@integerSwitchState
  2922  051B  01C0               	clrf	applianceControl@integerSwitchState+1
  2923                           
  2924                           ;motion_control.c: 430: int integerSpeed = 0;
  2925  051C  01B6               	clrf	applianceControl@integerSpeed
  2926  051D  01B7               	clrf	applianceControl@integerSpeed+1
  2927                           
  2928                           ;motion_control.c: 431: int currentStateBufferPositions=0;
  2929  051E  01C1               	clrf	applianceControl@currentStateBufferPositions
  2930  051F  01C2               	clrf	applianceControl@currentStateBufferPositions+1
  2931                           
  2932                           ;motion_control.c: 434: char switchNumberStringBuffer[2]="#";
  2933  0520  0865               	movf	applianceControl@F3830+1,w
  2934  0521  00BA               	movwf	applianceControl@switchNumberStringBuffer+1
  2935  0522  0864               	movf	applianceControl@F3830,w
  2936  0523  00B9               	movwf	applianceControl@switchNumberStringBuffer
  2937                           
  2938                           ;motion_control.c: 435: char dimmerSpeedStringBuffer[2]="#";
  2939  0524  0863               	movf	applianceControl@F3832+1,w
  2940  0525  00BC               	movwf	applianceControl@dimmerSpeedStringBuffer+1
  2941  0526  0862               	movf	applianceControl@F3832,w
  2942  0527  00BB               	movwf	applianceControl@dimmerSpeedStringBuffer
  2943                           
  2944                           ;motion_control.c: 437: switchNumberStringBuffer[0]=charSwitchMSB;
  2945  0528  0838               	movf	applianceControl@charSwitchMSB,w
  2946  0529  00B4               	movwf	??_applianceControl
  2947  052A  0834               	movf	??_applianceControl,w
  2948  052B  00B9               	movwf	applianceControl@switchNumberStringBuffer
  2949                           
  2950                           ;motion_control.c: 438: switchNumberStringBuffer[1]=charSwitchLSB;
  2951  052C  082E               	movf	applianceControl@charSwitchLSB,w
  2952  052D  00B4               	movwf	??_applianceControl
  2953  052E  0834               	movf	??_applianceControl,w
  2954  052F  00BA               	movwf	applianceControl@switchNumberStringBuffer+1
  2955                           
  2956                           ;motion_control.c: 439: integerSwitchNumber = atoi(switchNumberStringBuffer);
  2957  0530  3039               	movlw	(low (applianceControl@switchNumberStringBuffer| 0))& (0+255)
  2958  0531  3185  25D7  3185   	fcall	_atoi
  2959  0534  0020               	movlb	0	; select bank0
  2960  0535  0827               	movf	?_atoi+1,w
  2961  0536  00BE               	movwf	applianceControl@integerSwitchNumber+1
  2962  0537  0826               	movf	?_atoi,w
  2963  0538  00BD               	movwf	applianceControl@integerSwitchNumber
  2964                           
  2965                           ;motion_control.c: 443: integerSwitchState = charSwitchSTATE-'0';
  2966  0539  082F               	movf	applianceControl@charSwitchSTATE,w
  2967  053A  3ED0               	addlw	208
  2968  053B  00BF               	movwf	applianceControl@integerSwitchState
  2969  053C  30FF               	movlw	255
  2970  053D  1803               	skipnc
  2971  053E  3000               	movlw	0
  2972  053F  00C0               	movwf	applianceControl@integerSwitchState+1
  2973                           
  2974                           ;motion_control.c: 446: dimmerSpeedStringBuffer[0]=chDimmerSpeedMSB;
  2975  0540  0830               	movf	applianceControl@chDimmerSpeedMSB,w
  2976  0541  00B4               	movwf	??_applianceControl
  2977  0542  0834               	movf	??_applianceControl,w
  2978  0543  00BB               	movwf	applianceControl@dimmerSpeedStringBuffer
  2979                           
  2980                           ;motion_control.c: 447: dimmerSpeedStringBuffer[1]=chDimmerSpeedLSB;
  2981  0544  0831               	movf	applianceControl@chDimmerSpeedLSB,w
  2982  0545  00B4               	movwf	??_applianceControl
  2983  0546  0834               	movf	??_applianceControl,w
  2984  0547  00BC               	movwf	applianceControl@dimmerSpeedStringBuffer+1
  2985                           
  2986                           ;motion_control.c: 448: integerSpeed = atoi(dimmerSpeedStringBuffer);
  2987  0548  303B               	movlw	(low (applianceControl@dimmerSpeedStringBuffer| 0))& (0+255)
  2988  0549  3185  25D7  3185   	fcall	_atoi
  2989  054C  0020               	movlb	0	; select bank0
  2990  054D  0827               	movf	?_atoi+1,w
  2991  054E  00B7               	movwf	applianceControl@integerSpeed+1
  2992  054F  0826               	movf	?_atoi,w
  2993  0550  00B6               	movwf	applianceControl@integerSpeed
  2994                           
  2995                           ;motion_control.c: 452: parentalLockBuffer[integerSwitchNumber] = charParentalControl;
  2996  0551  0832               	movf	applianceControl@charParentalControl,w
  2997  0552  00B4               	movwf	??_applianceControl
  2998  0553  083D               	movf	applianceControl@integerSwitchNumber,w
  2999  0554  3E5D               	addlw	(low (_parentalLockBuffer| 0))& (0+255)
  3000  0555  0086               	movwf	6
  3001  0556  0187               	clrf	7
  3002  0557  0834               	movf	??_applianceControl,w
  3003  0558  0081               	movwf	1
  3004                           
  3005                           ;motion_control.c: 456: currentStateBufferPositions = ((1+4*(integerSwitchNumber))-5);
  3006  0559  083E               	movf	applianceControl@integerSwitchNumber+1,w
  3007  055A  00B5               	movwf	??_applianceControl+1
  3008  055B  083D               	movf	applianceControl@integerSwitchNumber,w
  3009  055C  00B4               	movwf	??_applianceControl
  3010  055D  35B4               	lslf	??_applianceControl,f
  3011  055E  0DB5               	rlf	??_applianceControl+1,f
  3012  055F  35B4               	lslf	??_applianceControl,f
  3013  0560  0DB5               	rlf	??_applianceControl+1,f
  3014  0561  0834               	movf	??_applianceControl,w
  3015  0562  3EFC               	addlw	252
  3016  0563  00C1               	movwf	applianceControl@currentStateBufferPositions
  3017  0564  30FF               	movlw	255
  3018  0565  3D35               	addwfc	??_applianceControl+1,w
  3019  0566  00C2               	movwf	applianceControl@currentStateBufferPositions+1
  3020                           
  3021                           ;motion_control.c: 457: currentStateBuffer[currentStateBufferPositions++] = 'G';
  3022  0567  3047               	movlw	71
  3023  0568  00B4               	movwf	??_applianceControl
  3024  0569  0841               	movf	applianceControl@currentStateBufferPositions,w
  3025  056A  3E20               	addlw	(low (_currentStateBuffer| (0+256)))& (0+255)
  3026  056B  0086               	movwf	6
  3027  056C  3001               	movlw	1	; select bank2/3
  3028  056D  0087               	movwf	7
  3029  056E  0834               	movf	??_applianceControl,w
  3030  056F  0081               	movwf	1
  3031  0570  3001               	movlw	1
  3032  0571  07C1               	addwf	applianceControl@currentStateBufferPositions,f
  3033  0572  3000               	movlw	0
  3034  0573  3DC2               	addwfc	applianceControl@currentStateBufferPositions+1,f
  3035                           
  3036                           ;motion_control.c: 458: currentStateBuffer[currentStateBufferPositions++] = charSwitchST
      +                          ATE;
  3037  0574  082F               	movf	applianceControl@charSwitchSTATE,w
  3038  0575  00B4               	movwf	??_applianceControl
  3039  0576  0841               	movf	applianceControl@currentStateBufferPositions,w
  3040  0577  3E20               	addlw	(low (_currentStateBuffer| (0+256)))& (0+255)
  3041  0578  0086               	movwf	6
  3042  0579  3001               	movlw	1	; select bank2/3
  3043  057A  0087               	movwf	7
  3044  057B  0834               	movf	??_applianceControl,w
  3045  057C  0081               	movwf	1
  3046  057D  3001               	movlw	1
  3047  057E  07C1               	addwf	applianceControl@currentStateBufferPositions,f
  3048  057F  3000               	movlw	0
  3049  0580  3DC2               	addwfc	applianceControl@currentStateBufferPositions+1,f
  3050                           
  3051                           ;motion_control.c: 459: currentStateBuffer[currentStateBufferPositions++] = charSwitchMS
      +                          B;
  3052  0581  0838               	movf	applianceControl@charSwitchMSB,w
  3053  0582  00B4               	movwf	??_applianceControl
  3054  0583  0841               	movf	applianceControl@currentStateBufferPositions,w
  3055  0584  3E20               	addlw	(low (_currentStateBuffer| (0+256)))& (0+255)
  3056  0585  0086               	movwf	6
  3057  0586  3001               	movlw	1	; select bank2/3
  3058  0587  0087               	movwf	7
  3059  0588  0834               	movf	??_applianceControl,w
  3060  0589  0081               	movwf	1
  3061  058A  3001               	movlw	1
  3062  058B  07C1               	addwf	applianceControl@currentStateBufferPositions,f
  3063  058C  3000               	movlw	0
  3064  058D  3DC2               	addwfc	applianceControl@currentStateBufferPositions+1,f
  3065                           
  3066                           ;motion_control.c: 460: currentStateBuffer[currentStateBufferPositions] = charSwitchLSB;
  3067  058E  082E               	movf	applianceControl@charSwitchLSB,w
  3068  058F  00B4               	movwf	??_applianceControl
  3069  0590  0841               	movf	applianceControl@currentStateBufferPositions,w
  3070  0591  3E20               	addlw	(low (_currentStateBuffer| (0+256)))& (0+255)
  3071  0592  0086               	movwf	6
  3072  0593  3001               	movlw	1	; select bank2/3
  3073  0594  0087               	movwf	7
  3074  0595  0834               	movf	??_applianceControl,w
  3075  0596  0081               	movwf	1
  3076                           
  3077                           ;motion_control.c: 462: currentStateBufferPositions-=3;
  3078  0597  30FD               	movlw	253
  3079  0598  07C1               	addwf	applianceControl@currentStateBufferPositions,f
  3080  0599  30FF               	movlw	255
  3081  059A  3DC2               	addwfc	applianceControl@currentStateBufferPositions+1,f
  3082                           
  3083                           ;motion_control.c: 463: if(charFinalFrameState=='1')
  3084  059B  3031               	movlw	49
  3085  059C  0633               	xorwf	applianceControl@charFinalFrameState,w
  3086  059D  1D03               	btfss	3,2
  3087  059E  2DC2               	goto	l1868
  3088                           
  3089                           ;motion_control.c: 464: {
  3090                           ;motion_control.c: 465: sendAcknowledgment(currentStateBuffer+currentStateBufferPosition
      +                          s);
  3091  059F  0841               	movf	applianceControl@currentStateBufferPositions,w
  3092  05A0  3E20               	addlw	(low (_currentStateBuffer| (0+256)))& (0+255)
  3093  05A1  3186  26B5  3185   	fcall	_sendAcknowledgment
  3094                           
  3095                           ;motion_control.c: 466: }
  3096                           ;motion_control.c: 468: switch(integerSwitchNumber){
  3097  05A4  2DC2               	goto	l1868
  3098  05A5                     l1858:	
  3099                           ;motion_control.c: 469: case 1:
  3100                           
  3101                           
  3102                           ;motion_control.c: 470: {
  3103                           ;motion_control.c: 472: PORTFbits.RF1 = integerSwitchState;
  3104  05A5  0020               	movlb	0	; select bank0
  3105  05A6  0C3F               	rrf	applianceControl@integerSwitchState,w
  3106  05A7  0025               	movlb	5	; select bank5
  3107  05A8  1C03               	skipc
  3108  05A9  108C               	bcf	12,1	;volatile
  3109  05AA  1803               	skipnc
  3110  05AB  148C               	bsf	12,1	;volatile
  3111                           
  3112                           ;motion_control.c: 473: }
  3113                           ;motion_control.c: 474: break;
  3114  05AC  0008               	return
  3115  05AD                     l1860:	
  3116                           ;motion_control.c: 475: case 2:
  3117                           
  3118                           
  3119                           ;motion_control.c: 476: {
  3120                           ;motion_control.c: 477: PORTFbits.RF0 = integerSwitchState;
  3121  05AD  0020               	movlb	0	; select bank0
  3122  05AE  0C3F               	rrf	applianceControl@integerSwitchState,w
  3123  05AF  0025               	movlb	5	; select bank5
  3124  05B0  1C03               	skipc
  3125  05B1  100C               	bcf	12,0	;volatile
  3126  05B2  1803               	skipnc
  3127  05B3  140C               	bsf	12,0	;volatile
  3128                           
  3129                           ;motion_control.c: 478: break;
  3130  05B4  0008               	return
  3131  05B5                     l1862:	
  3132                           ;motion_control.c: 479: }
  3133                           ;motion_control.c: 480: case 3:
  3134                           
  3135                           
  3136                           ;motion_control.c: 481: {
  3137                           ;motion_control.c: 482: PORTAbits.RA3 = integerSwitchState;
  3138  05B5  0020               	movlb	0	; select bank0
  3139  05B6  0C3F               	rrf	applianceControl@integerSwitchState,w
  3140  05B7  1C03               	skipc
  3141  05B8  118C               	bcf	12,3	;volatile
  3142  05B9  1803               	skipnc
  3143  05BA  158C               	bsf	12,3	;volatile
  3144                           
  3145                           ;motion_control.c: 484: }
  3146                           ;motion_control.c: 485: break;
  3147  05BB  0008               	return
  3148  05BC                     l1864:	
  3149                           ;motion_control.c: 487: case 4:
  3150                           
  3151                           
  3152                           ;motion_control.c: 488: {
  3153                           ;motion_control.c: 489: PORTAbits.RA2 = integerSwitchState;
  3154  05BC  0C3F               	rrf	applianceControl@integerSwitchState,w
  3155  05BD  1C03               	skipc
  3156  05BE  110C               	bcf	12,2	;volatile
  3157  05BF  1803               	skipnc
  3158  05C0  150C               	bsf	12,2	;volatile
  3159                           
  3160                           ;motion_control.c: 494: }
  3161                           
  3162                           ;motion_control.c: 493: break;
  3163                           
  3164                           ;motion_control.c: 492: default:
  3165                           
  3166                           ;motion_control.c: 490: }
  3167                           ;motion_control.c: 491: break;
  3168  05C1  0008               	return
  3169  05C2                     l1868:	
  3170                           
  3171                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3172                           ; Switch size 1, requested type "space"
  3173                           ; Number of cases is 1, Range of values is 0 to 0
  3174                           ; switch strategies available:
  3175                           ; Name         Instructions Cycles
  3176                           ; simple_byte            4     3 (average)
  3177                           ; direct_byte            8     6 (fixed)
  3178                           ; jumptable            260     6 (fixed)
  3179                           ;	Chosen strategy is simple_byte
  3180  05C2  0020               	movlb	0	; select bank0
  3181  05C3  083E               	movf	applianceControl@integerSwitchNumber+1,w
  3182  05C4  3A00               	xorlw	0	; case 0
  3183  05C5  1903               	skipnz
  3184  05C6  2DC8               	goto	l2132
  3185  05C7  2DD6               	goto	l181
  3186  05C8                     l2132:	
  3187                           
  3188                           ; Switch size 1, requested type "space"
  3189                           ; Number of cases is 4, Range of values is 1 to 4
  3190                           ; switch strategies available:
  3191                           ; Name         Instructions Cycles
  3192                           ; simple_byte           13     7 (average)
  3193                           ; direct_byte           17     9 (fixed)
  3194                           ; jumptable            263     9 (fixed)
  3195                           ;	Chosen strategy is simple_byte
  3196  05C8  083D               	movf	applianceControl@integerSwitchNumber,w
  3197  05C9  3A01               	xorlw	1	; case 1
  3198  05CA  1903               	skipnz
  3199  05CB  2DA5               	goto	l1858
  3200  05CC  3A03               	xorlw	3	; case 2
  3201  05CD  1903               	skipnz
  3202  05CE  2DAD               	goto	l1860
  3203  05CF  3A01               	xorlw	1	; case 3
  3204  05D0  1903               	skipnz
  3205  05D1  2DB5               	goto	l1862
  3206  05D2  3A07               	xorlw	7	; case 4
  3207  05D3  1903               	skipnz
  3208  05D4  2DBC               	goto	l1864
  3209  05D5  2DD6               	goto	l181
  3210  05D6                     l181:	
  3211  05D6  0008               	return
  3212  05D7                     __end_of_applianceControl:	
  3213                           
  3214                           	psect	text8
  3215  06B5                     __ptext8:	
  3216 ;; *************** function _sendAcknowledgment *****************
  3217 ;; Defined at:
  3218 ;;		line 615 in file "motion_control.c"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;  currentState    1    wreg     PTR unsigned char 
  3221 ;;		 -> currentStateBuffer(30), 
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;  currentState    1    3[BANK0 ] PTR unsigned char 
  3224 ;;		 -> currentStateBuffer(30), 
  3225 ;;  Tx_count        2    1[BANK0 ] int 
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  1    wreg      void 
  3228 ;; Registers used:
  3229 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3230 ;; Tracked objects:
  3231 ;;		On entry : 0/0
  3232 ;;		On exit  : 0/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3236 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0
  3237 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0
  3238 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0
  3239 ;;Total ram usage:        4 bytes
  3240 ;; Hardware stack levels used:    1
  3241 ;; Hardware stack levels required when called:    2
  3242 ;; This function calls:
  3243 ;;		Nothing
  3244 ;; This function is called by:
  3245 ;;		_applianceControl
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249                           
  3250                           ;psect for function _sendAcknowledgment
  3251  06B5                     _sendAcknowledgment:	
  3252                           
  3253                           ;incstack = 0
  3254                           ; Regs used in _sendAcknowledgment: [wreg+fsr1l+fsr1h+status,2+status,0]
  3255                           ;sendAcknowledgment@currentStateBuffer stored from wreg
  3256  06B5  0020               	movlb	0	; select bank0
  3257  06B6  00A3               	movwf	sendAcknowledgment@currentStateBuffer
  3258                           
  3259                           ;motion_control.c: 616: int Tx_count=0;
  3260  06B7  01A1               	clrf	sendAcknowledgment@Tx_count
  3261  06B8  01A2               	clrf	sendAcknowledgment@Tx_count+1
  3262  06B9                     l1750:	
  3263                           ;motion_control.c: 617: while(Tx_count!=4)
  3264                           
  3265  06B9  3004               	movlw	4
  3266  06BA  0621               	xorwf	sendAcknowledgment@Tx_count,w
  3267  06BB  0422               	iorwf	sendAcknowledgment@Tx_count+1,w
  3268  06BC  1903               	btfsc	3,2
  3269  06BD  0008               	return
  3270  06BE                     l219:	
  3271                           ;motion_control.c: 618: {
  3272                           ;motion_control.c: 619: while (!TX1STAbits.TRMT);
  3273                           
  3274  06BE  0023               	movlb	3	; select bank3
  3275  06BF  1C9E               	btfss	30,1	;volatile
  3276  06C0  2EBE               	goto	l219
  3277                           
  3278                           ;motion_control.c: 620: TX1REG = *currentStateBuffer;
  3279  06C1  0020               	movlb	0	; select bank0
  3280  06C2  0823               	movf	sendAcknowledgment@currentStateBuffer,w
  3281  06C3  0086               	movwf	6
  3282  06C4  3001               	movlw	1	; select bank2/3
  3283  06C5  0087               	movwf	7
  3284  06C6  0801               	movf	1,w
  3285  06C7  0023               	movlb	3	; select bank3
  3286  06C8  009A               	movwf	26	;volatile
  3287                           
  3288                           ;motion_control.c: 621: *currentStateBuffer++;
  3289  06C9  3001               	movlw	1
  3290  06CA  0020               	movlb	0	; select bank0
  3291  06CB  00A0               	movwf	??_sendAcknowledgment
  3292  06CC  0820               	movf	??_sendAcknowledgment,w
  3293  06CD  07A3               	addwf	sendAcknowledgment@currentStateBuffer,f
  3294                           
  3295                           ;motion_control.c: 622: Tx_count++;
  3296  06CE  3001               	movlw	1
  3297  06CF  07A1               	addwf	sendAcknowledgment@Tx_count,f
  3298  06D0  3000               	movlw	0
  3299  06D1  3DA2               	addwfc	sendAcknowledgment@Tx_count+1,f
  3300  06D2  2EB9               	goto	l1750
  3301  06D3                     __end_of_sendAcknowledgment:	
  3302                           
  3303                           	psect	text9
  3304  05D7                     __ptext9:	
  3305 ;; *************** function _atoi *****************
  3306 ;; Defined at:
  3307 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;  s               1    wreg     PTR const unsigned char 
  3310 ;;		 -> applianceControl@dimmerSpeedStringBuffer(2), applianceControl@switchNumberStringBuffer(2), 
  3311 ;; Auto vars:     Size  Location     Type
  3312 ;;  s               1   13[BANK0 ] PTR const unsigned char 
  3313 ;;		 -> applianceControl@dimmerSpeedStringBuffer(2), applianceControl@switchNumberStringBuffer(2), 
  3314 ;;  a               2   11[BANK0 ] int 
  3315 ;;  sign            1   10[BANK0 ] unsigned char 
  3316 ;; Return value:  Size  Location     Type
  3317 ;;                  2    6[BANK0 ] int 
  3318 ;; Registers used:
  3319 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3320 ;; Tracked objects:
  3321 ;;		On entry : 0/0
  3322 ;;		On exit  : 0/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3325 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0
  3326 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0
  3327 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0
  3328 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0
  3329 ;;Total ram usage:        8 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    3
  3332 ;; This function calls:
  3333 ;;		___wmul
  3334 ;;		_isdigit
  3335 ;; This function is called by:
  3336 ;;		_applianceControl
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           
  3341                           ;psect for function _atoi
  3342  05D7                     _atoi:	
  3343                           
  3344                           ;incstack = 0
  3345                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3346                           ;atoi@s stored from wreg
  3347  05D7  0020               	movlb	0	; select bank0
  3348  05D8  00AD               	movwf	atoi@s
  3349  05D9                     l1712:	
  3350  05D9  082D               	movf	atoi@s,w
  3351  05DA  0086               	movwf	6
  3352  05DB  0187               	clrf	7
  3353  05DC  3020               	movlw	32
  3354  05DD  0601               	xorwf	1,w
  3355  05DE  1D03               	btfss	3,2
  3356  05DF  2DE5               	goto	l1714
  3357  05E0                     l1710:	
  3358  05E0  3001               	movlw	1
  3359  05E1  00A8               	movwf	??_atoi
  3360  05E2  0828               	movf	??_atoi,w
  3361  05E3  07AD               	addwf	atoi@s,f
  3362  05E4  2DD9               	goto	l1712
  3363  05E5                     l1714:	
  3364  05E5  082D               	movf	atoi@s,w
  3365  05E6  0086               	movwf	6
  3366  05E7  0187               	clrf	7
  3367  05E8  3009               	movlw	9
  3368  05E9  0601               	xorwf	1,w
  3369  05EA  1903               	btfsc	3,2
  3370  05EB  2DE0               	goto	l1710
  3371  05EC  01AB               	clrf	atoi@a
  3372  05ED  01AC               	clrf	atoi@a+1
  3373  05EE  01AA               	clrf	atoi@sign
  3374  05EF  082D               	movf	atoi@s,w
  3375  05F0  0086               	movwf	6
  3376  05F1  0187               	clrf	7
  3377  05F2  302D               	movlw	45
  3378  05F3  0601               	xorwf	1,w
  3379  05F4  1D03               	btfss	3,2
  3380  05F5  2DFB               	goto	l1722
  3381  05F6  3001               	movlw	1
  3382  05F7  00A8               	movwf	??_atoi
  3383  05F8  0828               	movf	??_atoi,w
  3384  05F9  07AA               	addwf	atoi@sign,f
  3385  05FA  2E02               	goto	l1728
  3386  05FB                     l1722:	
  3387  05FB  082D               	movf	atoi@s,w
  3388  05FC  0086               	movwf	6
  3389  05FD  0187               	clrf	7
  3390  05FE  302B               	movlw	43
  3391  05FF  0601               	xorwf	1,w
  3392  0600  1D03               	btfss	3,2
  3393  0601  2E06               	goto	l1730
  3394  0602                     l1728:	
  3395  0602  3001               	movlw	1
  3396  0603  00A8               	movwf	??_atoi
  3397  0604  0828               	movf	??_atoi,w
  3398  0605  07AD               	addwf	atoi@s,f
  3399  0606                     l1730:	
  3400  0606  082D               	movf	atoi@s,w
  3401  0607  0086               	movwf	6
  3402  0608  0187               	clrf	7
  3403  0609  0801               	movf	1,w
  3404  060A  3187  27D6  3185   	fcall	_isdigit
  3405  060D  1C03               	btfss	3,0
  3406  060E  2E2D               	goto	l1732
  3407  060F  0020               	movlb	0	; select bank0
  3408  0610  082C               	movf	atoi@a+1,w
  3409  0611  00A1               	movwf	___wmul@multiplier+1
  3410  0612  082B               	movf	atoi@a,w
  3411  0613  00A0               	movwf	___wmul@multiplier
  3412  0614  300A               	movlw	10
  3413  0615  00A2               	movwf	___wmul@multiplicand
  3414  0616  3000               	movlw	0
  3415  0617  00A3               	movwf	___wmul@multiplicand+1
  3416  0618  3187  2746  3185   	fcall	___wmul
  3417  061B  0020               	movlb	0	; select bank0
  3418  061C  082D               	movf	atoi@s,w
  3419  061D  0086               	movwf	6
  3420  061E  0187               	clrf	7
  3421  061F  0801               	movf	1,w
  3422  0620  0720               	addwf	?___wmul,w
  3423  0621  00A8               	movwf	??_atoi
  3424  0622  0821               	movf	?___wmul+1,w
  3425  0623  1803               	skipnc
  3426  0624  0A21               	incf	?___wmul+1,w
  3427  0625  00A9               	movwf	??_atoi+1
  3428  0626  0828               	movf	??_atoi,w
  3429  0627  3ED0               	addlw	208
  3430  0628  00AB               	movwf	atoi@a
  3431  0629  30FF               	movlw	255
  3432  062A  3D29               	addwfc	??_atoi+1,w
  3433  062B  00AC               	movwf	atoi@a+1
  3434  062C  2E02               	goto	l1728
  3435  062D                     l1732:	
  3436  062D  0020               	movlb	0	; select bank0
  3437  062E  082A               	movf	atoi@sign,w
  3438  062F  1903               	btfsc	3,2
  3439  0630  2E3D               	goto	l1738
  3440  0631  092B               	comf	atoi@a,w
  3441  0632  00A8               	movwf	??_atoi
  3442  0633  092C               	comf	atoi@a+1,w
  3443  0634  00A9               	movwf	??_atoi+1
  3444  0635  0AA8               	incf	??_atoi,f
  3445  0636  1903               	skipnz
  3446  0637  0AA9               	incf	??_atoi+1,f
  3447  0638  0828               	movf	??_atoi,w
  3448  0639  00A6               	movwf	?_atoi
  3449  063A  0829               	movf	??_atoi+1,w
  3450  063B  00A7               	movwf	?_atoi+1
  3451  063C  0008               	return
  3452  063D                     l1738:	
  3453  063D  082C               	movf	atoi@a+1,w
  3454  063E  00A7               	movwf	?_atoi+1
  3455  063F  082B               	movf	atoi@a,w
  3456  0640  00A6               	movwf	?_atoi
  3457  0641  0008               	return
  3458  0642                     __end_of_atoi:	
  3459                           
  3460                           	psect	text10
  3461  07D6                     __ptext10:	
  3462 ;; *************** function _isdigit *****************
  3463 ;; Defined at:
  3464 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;  c               1    wreg     unsigned char 
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;  c               1    1[BANK0 ] unsigned char 
  3469 ;; Return value:  Size  Location     Type
  3470 ;;		None               void
  3471 ;; Registers used:
  3472 ;;		wreg, status,2, status,0
  3473 ;; Tracked objects:
  3474 ;;		On entry : 0/0
  3475 ;;		On exit  : 0/0
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3479 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  3480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  3481 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0
  3482 ;;Total ram usage:        2 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; Hardware stack levels required when called:    2
  3485 ;; This function calls:
  3486 ;;		Nothing
  3487 ;; This function is called by:
  3488 ;;		_atoi
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           
  3493                           ;psect for function _isdigit
  3494  07D6                     _isdigit:	
  3495                           
  3496                           ;incstack = 0
  3497                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3498                           ;isdigit@c stored from wreg
  3499  07D6  0020               	movlb	0	; select bank0
  3500  07D7  00A1               	movwf	isdigit@c
  3501  07D8  01A0               	clrf	_isdigit$614
  3502  07D9  303A               	movlw	58
  3503  07DA  0221               	subwf	isdigit@c,w
  3504  07DB  1803               	skipnc
  3505  07DC  2FE3               	goto	l1704
  3506  07DD  3030               	movlw	48
  3507  07DE  0221               	subwf	isdigit@c,w
  3508  07DF  1C03               	skipc
  3509  07E0  2FE3               	goto	l1704
  3510  07E1  01A0               	clrf	_isdigit$614
  3511  07E2  0AA0               	incf	_isdigit$614,f
  3512  07E3                     l1704:	
  3513  07E3  0C20               	rrf	_isdigit$614,w
  3514  07E4  0008               	return
  3515  07E5                     __end_of_isdigit:	
  3516                           
  3517                           	psect	text11
  3518  0746                     __ptext11:	
  3519 ;; *************** function ___wmul *****************
  3520 ;; Defined at:
  3521 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3524 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3525 ;; Auto vars:     Size  Location     Type
  3526 ;;  product         2    4[BANK0 ] unsigned int 
  3527 ;; Return value:  Size  Location     Type
  3528 ;;                  2    0[BANK0 ] unsigned int 
  3529 ;; Registers used:
  3530 ;;		wreg, status,2, status,0
  3531 ;; Tracked objects:
  3532 ;;		On entry : 0/0
  3533 ;;		On exit  : 0/0
  3534 ;;		Unchanged: 0/0
  3535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3536 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0
  3537 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0
  3538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  3539 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0
  3540 ;;Total ram usage:        6 bytes
  3541 ;; Hardware stack levels used:    1
  3542 ;; Hardware stack levels required when called:    2
  3543 ;; This function calls:
  3544 ;;		Nothing
  3545 ;; This function is called by:
  3546 ;;		_atoi
  3547 ;; This function uses a non-reentrant model
  3548 ;;
  3549                           
  3550                           
  3551                           ;psect for function ___wmul
  3552  0746                     ___wmul:	
  3553                           
  3554                           ;incstack = 0
  3555                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3556  0746  0020               	movlb	0	; select bank0
  3557  0747  01A4               	clrf	___wmul@product
  3558  0748  01A5               	clrf	___wmul@product+1
  3559  0749                     l1684:	
  3560  0749  1C20               	btfss	___wmul@multiplier,0
  3561  074A  2F4F               	goto	l247
  3562  074B  0822               	movf	___wmul@multiplicand,w
  3563  074C  07A4               	addwf	___wmul@product,f
  3564  074D  0823               	movf	___wmul@multiplicand+1,w
  3565  074E  3DA5               	addwfc	___wmul@product+1,f
  3566  074F                     l247:	
  3567  074F  3001               	movlw	1
  3568  0750                     u1625:	
  3569  0750  35A2               	lslf	___wmul@multiplicand,f
  3570  0751  0DA3               	rlf	___wmul@multiplicand+1,f
  3571  0752  0B89               	decfsz	9,f
  3572  0753  2F50               	goto	u1625
  3573  0754  3001               	movlw	1
  3574  0755                     u1635:	
  3575  0755  36A1               	lsrf	___wmul@multiplier+1,f
  3576  0756  0CA0               	rrf	___wmul@multiplier,f
  3577  0757  0B89               	decfsz	9,f
  3578  0758  2F55               	goto	u1635
  3579  0759  0820               	movf	___wmul@multiplier,w
  3580  075A  0421               	iorwf	___wmul@multiplier+1,w
  3581  075B  1D03               	btfss	3,2
  3582  075C  2F49               	goto	l1684
  3583  075D  0825               	movf	___wmul@product+1,w
  3584  075E  00A1               	movwf	?___wmul+1
  3585  075F  0824               	movf	___wmul@product,w
  3586  0760  00A0               	movwf	?___wmul
  3587  0761  0008               	return
  3588  0762                     __end_of___wmul:	
  3589                           
  3590                           	psect	text12
  3591  0FF0                     __ptext12:	
  3592 ;; *************** function _allPeripheralInit *****************
  3593 ;; Defined at:
  3594 ;;		line 529 in file "motion_control.c"
  3595 ;; Parameters:    Size  Location     Type
  3596 ;;		None
  3597 ;; Auto vars:     Size  Location     Type
  3598 ;;		None
  3599 ;; Return value:  Size  Location     Type
  3600 ;;                  1    wreg      void 
  3601 ;; Registers used:
  3602 ;;		wreg, status,2, status,0, pclath, cstack
  3603 ;; Tracked objects:
  3604 ;;		On entry : 0/0
  3605 ;;		On exit  : 0/0
  3606 ;;		Unchanged: 0/0
  3607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  3610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  3611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  3612 ;;Total ram usage:        0 bytes
  3613 ;; Hardware stack levels used:    1
  3614 ;; Hardware stack levels required when called:    3
  3615 ;; This function calls:
  3616 ;;		_EUSART_Initialize
  3617 ;; This function is called by:
  3618 ;;		_main
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           
  3623                           ;psect for function _allPeripheralInit
  3624  0FF0                     _allPeripheralInit:	
  3625                           
  3626                           ;motion_control.c: 530: EUSART_Initialize();
  3627                           
  3628                           ;incstack = 0
  3629                           ; Regs used in _allPeripheralInit: [wreg+status,2+status,0+pclath+cstack]
  3630  0FF0  3187  2796         	fcall	_EUSART_Initialize
  3631  0FF2  0008               	return
  3632  0FF3                     __end_of_allPeripheralInit:	
  3633                           
  3634                           	psect	text13
  3635  0796                     __ptext13:	
  3636 ;; *************** function _EUSART_Initialize *****************
  3637 ;; Defined at:
  3638 ;;		line 537 in file "motion_control.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;		None
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;		None
  3643 ;; Return value:  Size  Location     Type
  3644 ;;                  1    wreg      void 
  3645 ;; Registers used:
  3646 ;;		wreg
  3647 ;; Tracked objects:
  3648 ;;		On entry : 0/0
  3649 ;;		On exit  : 0/0
  3650 ;;		Unchanged: 0/0
  3651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  3654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  3655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  3656 ;;Total ram usage:        0 bytes
  3657 ;; Hardware stack levels used:    1
  3658 ;; Hardware stack levels required when called:    2
  3659 ;; This function calls:
  3660 ;;		Nothing
  3661 ;; This function is called by:
  3662 ;;		_allPeripheralInit
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           
  3667                           ;psect for function _EUSART_Initialize
  3668  0796                     _EUSART_Initialize:	
  3669                           
  3670                           ;motion_control.c: 538: PIE1bits.RC1IE = 0;
  3671                           
  3672                           ;incstack = 0
  3673                           ; Regs used in _EUSART_Initialize: [wreg]
  3674  0796  0021               	movlb	1	; select bank1
  3675  0797  1291               	bcf	17,5	;volatile
  3676                           
  3677                           ;motion_control.c: 539: PIE1bits.TX1IE = 0;
  3678  0798  1211               	bcf	17,4	;volatile
  3679                           
  3680                           ;motion_control.c: 544: BAUD1CON = 0x0A;
  3681  0799  300A               	movlw	10
  3682  079A  0023               	movlb	3	; select bank3
  3683  079B  009F               	movwf	31	;volatile
  3684                           
  3685                           ;motion_control.c: 547: RC1STA = 0x90;
  3686  079C  3090               	movlw	144
  3687  079D  009D               	movwf	29	;volatile
  3688                           
  3689                           ;motion_control.c: 550: TX1STA = 0x24;
  3690  079E  3024               	movlw	36
  3691  079F  009E               	movwf	30	;volatile
  3692                           
  3693                           ;motion_control.c: 555: SP1BRGL = 0xA0;
  3694  07A0  30A0               	movlw	160
  3695  07A1  009B               	movwf	27	;volatile
  3696                           
  3697                           ;motion_control.c: 557: SP1BRGH = 0x01;
  3698  07A2  3001               	movlw	1
  3699  07A3  009C               	movwf	28	;volatile
  3700                           
  3701                           ;motion_control.c: 560: GIE = 1;
  3702  07A4  178B               	bsf	11,7	;volatile
  3703                           
  3704                           ;motion_control.c: 563: PEIE = 1;
  3705  07A5  170B               	bsf	11,6	;volatile
  3706                           
  3707                           ;motion_control.c: 566: PIE1bits.RC1IE = 1;
  3708  07A6  0021               	movlb	1	; select bank1
  3709  07A7  1691               	bsf	17,5	;volatile
  3710                           
  3711                           ;motion_control.c: 569: TX1STAbits.TXEN = 1;
  3712  07A8  0023               	movlb	3	; select bank3
  3713  07A9  169E               	bsf	30,5	;volatile
  3714                           
  3715                           ;motion_control.c: 572: RC1STAbits.SPEN = 1;
  3716  07AA  179D               	bsf	29,7	;volatile
  3717  07AB  0008               	return
  3718  07AC                     __end_of_EUSART_Initialize:	
  3719                           
  3720                           	psect	text14
  3721  07AC                     __ptext14:	
  3722 ;; *************** function _GPIO_pin_Initialize *****************
  3723 ;; Defined at:
  3724 ;;		line 502 in file "motion_control.c"
  3725 ;; Parameters:    Size  Location     Type
  3726 ;;		None
  3727 ;; Auto vars:     Size  Location     Type
  3728 ;;		None
  3729 ;; Return value:  Size  Location     Type
  3730 ;;                  1    wreg      void 
  3731 ;; Registers used:
  3732 ;;		status,2, status,0, pclath, cstack
  3733 ;; Tracked objects:
  3734 ;;		On entry : 0/0
  3735 ;;		On exit  : 0/0
  3736 ;;		Unchanged: 0/0
  3737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  3740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  3741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  3742 ;;Total ram usage:        0 bytes
  3743 ;; Hardware stack levels used:    1
  3744 ;; Hardware stack levels required when called:    3
  3745 ;; This function calls:
  3746 ;;		_clearAllPorts
  3747 ;;		_pinINIT_extra
  3748 ;; This function is called by:
  3749 ;;		_main
  3750 ;; This function uses a non-reentrant model
  3751 ;;
  3752                           
  3753                           
  3754                           ;psect for function _GPIO_pin_Initialize
  3755  07AC                     _GPIO_pin_Initialize:	
  3756                           
  3757                           ;motion_control.c: 503: clearAllPorts();
  3758                           
  3759                           ;incstack = 0
  3760                           ; Regs used in _GPIO_pin_Initialize: [status,2+status,0+pclath+cstack]
  3761  07AC  318F  27F9  3187   	fcall	_clearAllPorts
  3762                           
  3763                           ;motion_control.c: 504: pinINIT_extra();
  3764  07AF  3187  27C1  3187   	fcall	_pinINIT_extra
  3765                           
  3766                           ;motion_control.c: 505: TRISFbits.TRISF7 = 1;
  3767  07B2  0026               	movlb	6	; select bank6
  3768  07B3  178C               	bsf	12,7	;volatile
  3769                           
  3770                           ;motion_control.c: 506: TRISFbits.TRISF5 = 1;
  3771  07B4  168C               	bsf	12,5	;volatile
  3772                           
  3773                           ;motion_control.c: 507: TRISFbits.TRISF3 = 1;
  3774  07B5  158C               	bsf	12,3	;volatile
  3775                           
  3776                           ;motion_control.c: 508: TRISFbits.TRISF2 = 1;
  3777  07B6  150C               	bsf	12,2	;volatile
  3778                           
  3779                           ;motion_control.c: 511: TRISFbits.TRISF1 = 0;
  3780  07B7  108C               	bcf	12,1	;volatile
  3781                           
  3782                           ;motion_control.c: 512: TRISFbits.TRISF0 = 0;
  3783  07B8  100C               	bcf	12,0	;volatile
  3784                           
  3785                           ;motion_control.c: 513: TRISAbits.TRISA3 = 0;
  3786  07B9  0021               	movlb	1	; select bank1
  3787  07BA  118C               	bcf	12,3	;volatile
  3788                           
  3789                           ;motion_control.c: 514: TRISAbits.TRISA2 = 0;
  3790  07BB  110C               	bcf	12,2	;volatile
  3791                           
  3792                           ;motion_control.c: 520: TRISCbits.TRISC6 = 0;
  3793  07BC  130E               	bcf	14,6	;volatile
  3794                           
  3795                           ;motion_control.c: 521: TRISCbits.TRISC7 = 1;
  3796  07BD  178E               	bsf	14,7	;volatile
  3797                           
  3798                           ;motion_control.c: 523: clearAllPorts();
  3799  07BE  318F  27F9         	fcall	_clearAllPorts
  3800  07C0  0008               	return
  3801  07C1                     __end_of_GPIO_pin_Initialize:	
  3802                           
  3803                           	psect	text15
  3804  07C1                     __ptext15:	
  3805 ;; *************** function _pinINIT_extra *****************
  3806 ;; Defined at:
  3807 ;;		line 645 in file "motion_control.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;		None
  3810 ;; Auto vars:     Size  Location     Type
  3811 ;;		None
  3812 ;; Return value:  Size  Location     Type
  3813 ;;                  1    wreg      void 
  3814 ;; Registers used:
  3815 ;;		status,2
  3816 ;; Tracked objects:
  3817 ;;		On entry : 0/0
  3818 ;;		On exit  : 0/0
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  3823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  3824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  3825 ;;Total ram usage:        0 bytes
  3826 ;; Hardware stack levels used:    1
  3827 ;; Hardware stack levels required when called:    2
  3828 ;; This function calls:
  3829 ;;		Nothing
  3830 ;; This function is called by:
  3831 ;;		_GPIO_pin_Initialize
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834                           
  3835                           
  3836                           ;psect for function _pinINIT_extra
  3837  07C1                     _pinINIT_extra:	
  3838                           
  3839                           ;motion_control.c: 646: ANSELG=0x00; WPUG = 0;
  3840                           
  3841                           ;incstack = 0
  3842                           ; Regs used in _pinINIT_extra: [status,2]
  3843  07C1  0028               	movlb	8	; select bank8
  3844  07C2  018D               	clrf	13	;volatile
  3845  07C3  0029               	movlb	9	; select bank9
  3846  07C4  018D               	clrf	13	;volatile
  3847                           
  3848                           ;motion_control.c: 648: ANSELF=0x00;
  3849  07C5  0028               	movlb	8	; select bank8
  3850  07C6  018C               	clrf	12	;volatile
  3851                           
  3852                           ;motion_control.c: 650: ANSELE=0x00; WPUE=0x00;
  3853  07C7  0023               	movlb	3	; select bank3
  3854  07C8  0190               	clrf	16	;volatile
  3855  07C9  0024               	movlb	4	; select bank4
  3856  07CA  0190               	clrf	16	;volatile
  3857                           
  3858                           ;motion_control.c: 652: ANSELD=0x00; WPUD=0x00;
  3859  07CB  0023               	movlb	3	; select bank3
  3860  07CC  018F               	clrf	15	;volatile
  3861  07CD  0024               	movlb	4	; select bank4
  3862  07CE  018F               	clrf	15	;volatile
  3863                           
  3864                           ;motion_control.c: 654: ANSELB=0x00; WPUB=0x00;
  3865  07CF  0023               	movlb	3	; select bank3
  3866  07D0  018D               	clrf	13	;volatile
  3867  07D1  0024               	movlb	4	; select bank4
  3868  07D2  018D               	clrf	13	;volatile
  3869                           
  3870                           ;motion_control.c: 656: ANSELA=0x00;
  3871  07D3  0023               	movlb	3	; select bank3
  3872  07D4  018C               	clrf	12	;volatile
  3873  07D5  0008               	return
  3874  07D6                     __end_of_pinINIT_extra:	
  3875                           
  3876                           	psect	text16
  3877  0FF9                     __ptext16:	
  3878 ;; *************** function _clearAllPorts *****************
  3879 ;; Defined at:
  3880 ;;		line 662 in file "motion_control.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;		None
  3883 ;; Auto vars:     Size  Location     Type
  3884 ;;		None
  3885 ;; Return value:  Size  Location     Type
  3886 ;;                  1    wreg      void 
  3887 ;; Registers used:
  3888 ;;		None
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  3896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  3897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0
  3898 ;;Total ram usage:        0 bytes
  3899 ;; Hardware stack levels used:    1
  3900 ;; Hardware stack levels required when called:    2
  3901 ;; This function calls:
  3902 ;;		Nothing
  3903 ;; This function is called by:
  3904 ;;		_GPIO_pin_Initialize
  3905 ;; This function uses a non-reentrant model
  3906 ;;
  3907                           
  3908                           
  3909                           ;psect for function _clearAllPorts
  3910  0FF9                     _clearAllPorts:	
  3911                           
  3912                           ;motion_control.c: 663: PORTFbits.RF1=0;
  3913                           
  3914                           ;incstack = 0
  3915                           ; Regs used in _clearAllPorts: []
  3916  0FF9  0025               	movlb	5	; select bank5
  3917  0FFA  108C               	bcf	12,1	;volatile
  3918                           
  3919                           ;motion_control.c: 664: PORTFbits.RF0=0;
  3920  0FFB  100C               	bcf	12,0	;volatile
  3921                           
  3922                           ;motion_control.c: 665: PORTAbits.RA3=0;
  3923  0FFC  0020               	movlb	0	; select bank0
  3924  0FFD  118C               	bcf	12,3	;volatile
  3925                           
  3926                           ;motion_control.c: 666: PORTAbits.RA2=0;
  3927  0FFE  110C               	bcf	12,2	;volatile
  3928  0FFF  0008               	return
  3929  1000                     __end_of_clearAllPorts:	
  3930                           
  3931                           	psect	intentry
  3932  0004                     __pintentry:	
  3933 ;; *************** function _isr *****************
  3934 ;; Defined at:
  3935 ;;		line 148 in file "motion_control.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;		None
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;		None
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  1    wreg      void 
  3942 ;; Registers used:
  3943 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  3949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0
  3950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0
  3951 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0
  3952 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0
  3953 ;;Total ram usage:        2 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:    1
  3956 ;; This function calls:
  3957 ;;		i1_errorsISR
  3958 ;; This function is called by:
  3959 ;;		Interrupt level 1
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963  0004                     _isr:	
  3964                           
  3965                           ;incstack = 0
  3966  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3967                           
  3968                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3969  0005  3180               	pagesel	$
  3970  0006  0020               	movlb	0	; select bank0
  3971  0007  087F               	movf	127,w
  3972  0008  00F5               	movwf	??_isr+1
  3973                           
  3974                           ;motion_control.c: 151: if(RC1IF){
  3975  0009  1E91               	btfss	17,5	;volatile
  3976  000A  2886               	goto	i1l135
  3977                           
  3978                           ;motion_control.c: 152: if(RC1STAbits.OERR){
  3979  000B  0023               	movlb	3	; select bank3
  3980  000C  1C9D               	btfss	29,1	;volatile
  3981  000D  2828               	goto	i1l1426
  3982                           
  3983                           ;motion_control.c: 153: RC1STAbits.CREN = 0;
  3984  000E  121D               	bcf	29,4	;volatile
  3985                           
  3986                           ;motion_control.c: 154: RC1STAbits.CREN = 1;
  3987  000F  161D               	bsf	29,4	;volatile
  3988                           
  3989                           ;motion_control.c: 156: ErrorNames[0]='E'; ErrorNames[1]='R'; ErrorNames[2]='O'; ErrorNa
      +                          mes[3]='V';
  3990  0010  3045               	movlw	69
  3991  0011  00F4               	movwf	??_isr
  3992  0012  0874               	movf	??_isr,w
  3993  0013  0020               	movlb	0	; select bank0
  3994  0014  00E6               	movwf	_ErrorNames
  3995  0015  3052               	movlw	82
  3996  0016  00F4               	movwf	??_isr
  3997  0017  0874               	movf	??_isr,w
  3998  0018  00E7               	movwf	_ErrorNames+1
  3999  0019  304F               	movlw	79
  4000  001A  00F4               	movwf	??_isr
  4001  001B  0874               	movf	??_isr,w
  4002  001C  00E8               	movwf	_ErrorNames+2
  4003  001D  3056               	movlw	86
  4004  001E  00F4               	movwf	??_isr
  4005  001F  0874               	movf	??_isr,w
  4006  0020  00E9               	movwf	_ErrorNames+3
  4007                           
  4008                           ;motion_control.c: 157: errorsISR(ErrorNames);
  4009  0021  3066               	movlw	low _ErrorNames
  4010  0022  00F0               	movwf	i1errorsISR@errNum
  4011  0023  3000               	movlw	high _ErrorNames
  4012  0024  00F1               	movwf	i1errorsISR@errNum+1
  4013  0025  3187  277D  3180   	fcall	i1_errorsISR
  4014  0028                     i1l1426:	
  4015                           
  4016                           ;motion_control.c: 158: }
  4017                           ;motion_control.c: 160: mainReceivedDataBuffer[mainReceivedDataPosition]=RC1REG;
  4018  0028  0023               	movlb	3	; select bank3
  4019  0029  0819               	movf	25,w	;volatile
  4020  002A  00F4               	movwf	??_isr
  4021  002B  0878               	movf	_mainReceivedDataPosition,w
  4022  002C  3EA0               	addlw	(low (_mainReceivedDataBuffer| 0))& (0+255)
  4023  002D  0086               	movwf	6
  4024  002E  0187               	clrf	7
  4025  002F  0874               	movf	??_isr,w
  4026  0030  0081               	movwf	1
  4027                           
  4028                           ;motion_control.c: 164: if(mainReceivedDataBuffer[0]=='%'){
  4029  0031  3025               	movlw	37
  4030  0032  0021               	movlb	1	; select bank1
  4031  0033  0620               	xorwf	_mainReceivedDataBuffer^(0+128),w
  4032  0034  1D03               	btfss	3,2
  4033  0035  284D               	goto	i1l1438
  4034                           
  4035                           ;motion_control.c: 165: mainReceivedDataPosition++;
  4036  0036  3001               	movlw	1
  4037  0037  07F8               	addwf	_mainReceivedDataPosition,f
  4038  0038  3000               	movlw	0
  4039  0039  3DF9               	addwfc	_mainReceivedDataPosition+1,f
  4040                           
  4041                           ;motion_control.c: 166: if(mainReceivedDataPosition>15){
  4042  003A  0879               	movf	_mainReceivedDataPosition+1,w
  4043  003B  3A80               	xorlw	128
  4044  003C  00F4               	movwf	??_isr
  4045  003D  3080               	movlw	128
  4046  003E  0274               	subwf	??_isr,w
  4047  003F  1D03               	skipz
  4048  0040  2843               	goto	u112_25
  4049  0041  3010               	movlw	16
  4050  0042  0278               	subwf	_mainReceivedDataPosition,w
  4051  0043                     u112_25:	
  4052  0043  1C03               	skipc
  4053  0044  2886               	goto	i1l135
  4054                           
  4055                           ;motion_control.c: 167: mainDataReceived=1;
  4056  0045  3001               	movlw	1
  4057  0046  0020               	movlb	0	; select bank0
  4058  0047  00D1               	movwf	_mainDataReceived
  4059  0048  3000               	movlw	0
  4060  0049  00D2               	movwf	_mainDataReceived+1
  4061                           
  4062                           ;motion_control.c: 169: mainReceivedDataPosition=0;
  4063  004A  01F8               	clrf	_mainReceivedDataPosition
  4064  004B  01F9               	clrf	_mainReceivedDataPosition+1
  4065  004C  2868               	goto	L2
  4066  004D                     i1l1438:	
  4067                           ;motion_control.c: 171: }
  4068                           ;motion_control.c: 172: }
  4069                           
  4070                           ;motion_control.c: 170: RC1IF=0;
  4071                           
  4072                           
  4073                           ;motion_control.c: 173: else if((mainReceivedDataBuffer[0]=='M') && mainReceivedDataBuff
      +                          er[0] != (0))
  4074  004D  304D               	movlw	77
  4075  004E  0021               	movlb	1	; select bank1
  4076  004F  0620               	xorwf	_mainReceivedDataBuffer^(0+128),w
  4077  0050  1D03               	btfss	3,2
  4078  0051  286A               	goto	i1l132
  4079  0052  0820               	movf	_mainReceivedDataBuffer^(0+128),w
  4080  0053  1903               	btfsc	3,2
  4081  0054  286A               	goto	i1l132
  4082                           
  4083                           ;motion_control.c: 174: {
  4084                           ;motion_control.c: 175: mainReceivedDataPosition++;
  4085  0055  3001               	movlw	1
  4086  0056  07F8               	addwf	_mainReceivedDataPosition,f
  4087  0057  3000               	movlw	0
  4088  0058  3DF9               	addwfc	_mainReceivedDataPosition+1,f
  4089                           
  4090                           ;motion_control.c: 176: if(mainReceivedDataBuffer[mainReceivedDataPosition] == '|'){
  4091  0059  0878               	movf	_mainReceivedDataPosition,w
  4092  005A  3EA0               	addlw	(low (_mainReceivedDataBuffer| 0))& (0+255)
  4093  005B  0086               	movwf	6
  4094  005C  0187               	clrf	7
  4095  005D  307C               	movlw	124
  4096  005E  0601               	xorwf	1,w
  4097  005F  1D03               	btfss	3,2
  4098  0060  2886               	goto	i1l135
  4099                           
  4100                           ;motion_control.c: 177: MotionDatareceived=1;
  4101  0061  3001               	movlw	1
  4102  0062  00F6               	movwf	_MotionDatareceived
  4103  0063  3000               	movlw	0
  4104  0064  00F7               	movwf	_MotionDatareceived+1
  4105                           
  4106                           ;motion_control.c: 178: mainReceivedDataPosition=0;
  4107  0065  01F8               	clrf	_mainReceivedDataPosition
  4108  0066  01F9               	clrf	_mainReceivedDataPosition+1
  4109                           
  4110                           ;motion_control.c: 179: RC1IF=0;
  4111  0067  0020               	movlb	0	; select bank0
  4112  0068                     L2:	
  4113  0068  1291               	bcf	17,5	;volatile
  4114                           
  4115                           ;motion_control.c: 181: }
  4116                           ;motion_control.c: 182: }
  4117  0069  2886               	goto	i1l135
  4118  006A                     i1l132:	
  4119                           
  4120                           ;motion_control.c: 183: else{
  4121                           ;motion_control.c: 184: RC1STAbits.CREN = 0;
  4122  006A  0023               	movlb	3	; select bank3
  4123  006B  121D               	bcf	29,4	;volatile
  4124                           
  4125                           ;motion_control.c: 185: RC1STAbits.CREN = 1;
  4126  006C  161D               	bsf	29,4	;volatile
  4127                           
  4128                           ;motion_control.c: 186: mainReceivedDataPosition=0;
  4129  006D  01F8               	clrf	_mainReceivedDataPosition
  4130  006E  01F9               	clrf	_mainReceivedDataPosition+1
  4131                           
  4132                           ;motion_control.c: 188: ErrorNames[0]='E'; ErrorNames[1]='R'; ErrorNames[2]='R'; ErrorNa
      +                          mes[3]='X';
  4133  006F  3045               	movlw	69
  4134  0070  00F4               	movwf	??_isr
  4135  0071  0874               	movf	??_isr,w
  4136  0072  0020               	movlb	0	; select bank0
  4137  0073  00E6               	movwf	_ErrorNames
  4138  0074  3052               	movlw	82
  4139  0075  00F4               	movwf	??_isr
  4140  0076  0874               	movf	??_isr,w
  4141  0077  00E7               	movwf	_ErrorNames+1
  4142  0078  3052               	movlw	82
  4143  0079  00F4               	movwf	??_isr
  4144  007A  0874               	movf	??_isr,w
  4145  007B  00E8               	movwf	_ErrorNames+2
  4146  007C  3058               	movlw	88
  4147  007D  00F4               	movwf	??_isr
  4148  007E  0874               	movf	??_isr,w
  4149  007F  00E9               	movwf	_ErrorNames+3
  4150                           
  4151                           ;motion_control.c: 189: errorsISR(ErrorNames);
  4152  0080  3066               	movlw	low _ErrorNames
  4153  0081  00F0               	movwf	i1errorsISR@errNum
  4154  0082  3000               	movlw	high _ErrorNames
  4155  0083  00F1               	movwf	i1errorsISR@errNum+1
  4156  0084  3187  277D         	fcall	i1_errorsISR
  4157  0086                     i1l135:	
  4158  0086  0875               	movf	??_isr+1,w
  4159  0087  0020               	movlb	0	; select bank0
  4160  0088  00FF               	movwf	127
  4161  0089  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4162  008A  0009               	retfie
  4163  008B                     __end_of_isr:	
  4164                           
  4165                           	psect	text18
  4166  077D                     __ptext18:	
  4167 ;; *************** function i1_errorsISR *****************
  4168 ;; Defined at:
  4169 ;;		line 595 in file "motion_control.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;  errNum          2    0[COMMON] PTR unsigned char 
  4172 ;;		 -> STR_1(5), ErrorNames(5), 
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;  errorsISR       2    2[COMMON] int 
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  1    wreg      void 
  4177 ;; Registers used:
  4178 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9
  4184 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0
  4185 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0
  4186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0
  4187 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0
  4188 ;;Total ram usage:        4 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; This function calls:
  4191 ;;		Nothing
  4192 ;; This function is called by:
  4193 ;;		_isr
  4194 ;; This function uses a non-reentrant model
  4195 ;;
  4196                           
  4197                           
  4198                           ;psect for function i1_errorsISR
  4199  077D                     i1_errorsISR:	
  4200                           
  4201                           ;motion_control.c: 596: int Tx_count=0;
  4202                           
  4203                           ;incstack = 0
  4204                           ; Regs used in i1_errorsISR: [wreg-fsr0h+status,2+status,0+pclath]
  4205  077D  01F2               	clrf	i1errorsISR@Tx_count
  4206  077E  01F3               	clrf	i1errorsISR@Tx_count+1
  4207  077F                     i1l1414:	
  4208                           ;motion_control.c: 597: while(Tx_count!=4)
  4209                           
  4210  077F  3004               	movlw	4
  4211  0780  0672               	xorwf	i1errorsISR@Tx_count,w
  4212  0781  0473               	iorwf	i1errorsISR@Tx_count+1,w
  4213  0782  1903               	btfsc	3,2
  4214  0783  0008               	return
  4215  0784                     i1l201:	
  4216                           ;motion_control.c: 598: {
  4217                           ;motion_control.c: 599: while (!TX1STAbits.TRMT);
  4218                           
  4219  0784  0023               	movlb	3	; select bank3
  4220  0785  1C9E               	btfss	30,1	;volatile
  4221  0786  2F84               	goto	i1l201
  4222                           
  4223                           ;motion_control.c: 600: TX1REG = *errNum;
  4224  0787  0870               	movf	i1errorsISR@errNum,w
  4225  0788  0084               	movwf	4
  4226  0789  0871               	movf	i1errorsISR@errNum+1,w
  4227  078A  0085               	movwf	5
  4228  078B  0800               	movf	0,w	;code access
  4229  078C  009A               	movwf	26	;volatile
  4230                           
  4231                           ;motion_control.c: 601: *errNum++;
  4232  078D  3001               	movlw	1
  4233  078E  07F0               	addwf	i1errorsISR@errNum,f
  4234  078F  3000               	movlw	0
  4235  0790  3DF1               	addwfc	i1errorsISR@errNum+1,f
  4236                           
  4237                           ;motion_control.c: 602: Tx_count++;
  4238  0791  3001               	movlw	1
  4239  0792  07F2               	addwf	i1errorsISR@Tx_count,f
  4240  0793  3000               	movlw	0
  4241  0794  3DF3               	addwfc	i1errorsISR@Tx_count+1,f
  4242  0795  2F7F               	goto	i1l1414
  4243  0796                     __end_ofi1_errorsISR:	
  4244  007E                     btemp	set	126	;btemp
  4245  007E                     int$flags	set	126
  4246  007E                     wtemp0	set	126


Data Sizes:
    Strings     30
    Constant    0
    Data        74
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     45      75
    BANK1            80      0      52
    BANK2            80      0      30
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            32      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_38(CODE[3]), STR_26(CODE[3]), STR_2(CODE[3]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 24
		 -> sendFinalBufferToGAteway(BANK1[24]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 24
		 -> sendFinalBufferToGAteway(BANK1[24]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_49(CODE[2]), STR_48(CODE[5]), STR_47(CODE[2]), STR_46(CODE[2]), 
		 -> STR_45(CODE[2]), STR_44(CODE[2]), STR_43(CODE[2]), STR_42(CODE[7]), 
		 -> STR_41(CODE[2]), STR_40(CODE[2]), STR_39(CODE[2]), STR_37(CODE[2]), 
		 -> STR_36(CODE[5]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), STR_30(CODE[7]), STR_29(CODE[2]), 
		 -> STR_28(CODE[2]), STR_27(CODE[2]), STR_25(CODE[2]), STR_24(CODE[5]), 
		 -> STR_23(CODE[2]), STR_22(CODE[2]), STR_21(CODE[2]), STR_20(CODE[2]), 
		 -> STR_19(CODE[2]), STR_18(CODE[7]), STR_17(CODE[2]), STR_16(CODE[2]), 
		 -> STR_15(CODE[2]), STR_14(CODE[3]), STR_13(CODE[2]), STR_12(CODE[5]), 
		 -> STR_11(CODE[2]), STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_6(CODE[7]), STR_5(CODE[2]), STR_4(CODE[2]), 
		 -> STR_3(CODE[2]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 24
		 -> sendFinalBufferToGAteway(BANK1[24]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 24
		 -> sendFinalBufferToGAteway(BANK1[24]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 2
		 -> applianceControl@dimmerSpeedStringBuffer(BANK0[2]), applianceControl@switchNumberStringBuffer(BANK0[2]), 

    sendAcknowledgmentTOMotion@currentStateBufferMotion	PTR unsigned char  size(1) Largest target is 24
		 -> sendFinalBufferToGAteway(BANK1[24]), 

    sendAcknowledgment@currentStateBuffer	PTR unsigned char  size(1) Largest target is 30
		 -> currentStateBuffer(BANK2[30]), 

    errorsMain@errNum	PTR unsigned char  size(1) Largest target is 5
		 -> ErrorNames(BANK0[5]), 

    errorsISR@errNum	PTR unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), ErrorNames(BANK0[5]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 24
		 -> sendFinalBufferToGAteway(BANK1[24]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 24
		 -> sendFinalBufferToGAteway(BANK1[24]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_errorsISR

Critical Paths under _main in BANK0

    _main->_applianceControl
    _applianceControl->_atoi
    _atoi->___wmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    8866
                                             35 BANK0     10    10      0
                _GPIO_pin_Initialize
                  _allPeripheralInit
                   _applianceControl
             _copyReceivedDataBuffer
                          _errorsISR
                         _errorsMain
         _sendAcknowledgmentTOMotion
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               5     3      2     439
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _strcat                                               5     3      2    5093
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _sendAcknowledgmentTOMotion                           4     4      0     203
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _errorsMain                                           4     4      0     104
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _errorsISR                                            4     2      2     232
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _copyReceivedDataBuffer                               3     3      0     164
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _applianceControl                                    21    15      6    2257
                                             14 BANK0     21    15      6
                               _atoi
                 _sendAcknowledgment
 ---------------------------------------------------------------------------------
 (2) _sendAcknowledgment                                   4     4      0     104
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2     789
                                              6 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     290
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _allPeripheralInit                                    0     0      0       0
                  _EUSART_Initialize
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GPIO_pin_Initialize                                  0     0      0       0
                      _clearAllPorts
                      _pinINIT_extra
 ---------------------------------------------------------------------------------
 (2) _pinINIT_extra                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clearAllPorts                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0      99
                                              4 COMMON     2     2      0
                        i1_errorsISR
 ---------------------------------------------------------------------------------
 (5) i1_errorsISR                                          4     2      2      99
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GPIO_pin_Initialize
     _clearAllPorts
     _pinINIT_extra
   _allPeripheralInit
     _EUSART_Initialize
   _applianceControl
     _atoi
       ___wmul
       _isdigit
     _sendAcknowledgment
   _copyReceivedDataBuffer
   _errorsISR
   _errorsMain
   _sendAcknowledgmentTOMotion
   _strcat
   _strcpy

 _isr (ROOT)
   i1_errorsISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      A9       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2D      4B       6       93.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      34       8       65.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      1E      10       37.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            20      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               20      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
DATA                 0      0      A9      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 04 18:38:00 2019

                        __size_of_allPeripheralInit 0003                                         __CFG_CP$OFF 0000  
                                                _M1 005B                                                  _M2 0059  
                                                _M3 0057                                                  _M4 0055  
                                                _M5 0053                                 ___wmul@multiplicand 0022  
                      applianceControl@integerSpeed 0036                                                 l201 0715  
                                               l210 06F9                                                 l219 06BE  
                                               l147 0194                                                 l228 06DC  
                                               l181 05D6                                                 l247 074F  
                                               _GIE 005F                           __size_of_applianceControl 00C1  
                                               _isr 0004                                        __CFG_BORV$LO 0000  
                                               wreg 0009                                        __CFG_FOSC$HS 0000  
                                      __CFG_LVP$OFF 0000                                                l2010 028B  
                                              l2030 02E3                                                l2014 0292  
                                              l2050 0371                                                l2026 02DE  
                                              l2132 05C8                                                l2108 0511  
                                              l2046 036B                                                l2072 03FF  
                                              l2092 048D                                                l2068 03FB  
                                              l1710 05E0                                                l1704 07E3  
                                              l1712 05D9                                                l2088 0487  
                                              l1730 0606                                                l1722 05FB  
                                              l1714 05E5                                                l1732 062D  
                                              l1750 06B9                                                l1902 068A  
                                              l1728 0602                                                l1912 06D7  
                                              l1738 063D                                                l1684 0749  
                                              l1860 05AD                                                l1862 05B5  
                                              l1934 013C                                                l1918 00F7  
                                              l1864 05BC                                                l1944 0156  
                                              l1858 05A5                                                l1778 0710  
                                              l1882 06F4                                                l1890 0768  
                                              l1868 05C2                                                l1964 0197  
                                              l1982 01EE                                                l1958 017C  
                                              l1896 0677                                                l1898 0682  
                                              l1994 023A                                                l1978 01E7  
                                              l1998 023F                                                ?_isr 0070  
                                              STR_1 1005                                                STR_2 100A  
                                              STR_3 100D                                                STR_4 1011  
                                              STR_5 100D                                                STR_6 07F3  
                                              STR_7 100D                                                STR_8 1003  
                                              STR_9 100D                                                u2407 021B  
                                              u2327 00D6                                                u1625 0750  
                                              u2417 0227                                                u2337 01B0  
                                              u1635 0755                                                u2507 02BF  
                                              u2427 0233                                                u2347 01BC  
                                              u2517 02CB                                                u2437 0254  
                                              u2357 01C8                                                u2527 02D7  
                                              u2447 0260                                                u2367 01D4  
                                              u2457 026C                                                u2377 01E0  
                                              u2467 0278                                                u2387 0203  
                                              u2477 0284                                                u2397 020F  
                                              u1775 0654                                                u2487 02A7  
                                              u2497 02B3                                                u1955 017A  
                                              _PEIE 005E                                                u1965 0192  
                                              _WPUB 020D                                                _WPUD 020F  
                                              _WPUE 0210                                                _WPUG 048D  
                                      __CFG_WRT$OFF 0000                                                _atoi 05D7  
                                              _main 00D0                                                fsr0h 0005  
                                              fsr1h 0007                                                indf0 0000  
                                              fsr0l 0004                                                indf1 0001  
                                              fsr1l 0006                                                btemp 007E  
                                              start 008B                                       __CFG_IESO$OFF 0000  
                sendAcknowledgmentTOMotion@Tx_count 0021                              __size_of_pinINIT_extra 0015  
                                             ??_isr 0074                 applianceControl@charParentalControl 0032  
                                             ?_atoi 0026                                               ?_main 0070  
                                             STR_10 100F                                               STR_11 100D  
                                             STR_20 100F                                               STR_12 1000  
                                             STR_21 100D                                               STR_13 1015  
                                             STR_22 100F                                               STR_30 07F3  
                                             STR_14 100A                                               STR_31 100D  
                                             STR_23 100D                                               STR_15 100D  
                                             STR_32 1003                                               STR_24 1000  
                                             STR_16 1011                                               STR_40 1013  
                                             STR_41 100D                                               STR_33 100D  
                                             STR_17 100D                                               STR_25 1015  
                                     __CFG_WDTE$OFF 0000                                               STR_34 100F  
                                             STR_42 07F3                                               STR_18 07F3  
                                             STR_26 100A                                               STR_43 100D  
                                             STR_35 100D                                               STR_27 100D  
                                             STR_19 100D                                               STR_36 1000  
                                             STR_44 100F                                               STR_28 1013  
                                             STR_45 100D                                               STR_29 100D  
                                             STR_37 1015                                               STR_46 100F  
                                             STR_38 100A                                               STR_47 100D  
                                             STR_39 100D                                               STR_48 1000  
                                             STR_49 1015                                               _RC1IF 008D  
                                             i1l201 0784                                               i1l132 006A  
                                             i1l135 0086                                         i1_errorsISR 077D  
                                    __CFG_FCMEN$OFF 0000                                     __end_of_isdigit 07E5  
                                             atoi@a 002B                                               atoi@s 002D  
                                    __CFG_BOREN$OFF 0000                                               status 0003  
                                             wtemp0 007E                               __end_of_clearAllPorts 1000  
                               _GPIO_pin_Initialize 07AC                                      __CFG_MCLRE$OFF 0000  
                      ??_sendAcknowledgmentTOMotion 0020                                     __initialization 008D  
                           ?_copyReceivedDataBuffer 0070                                        __end_of_atoi 0642  
                                      __end_of_main 0516                                      _MotionDataFlag 004F  
                                        _ErrorNames 0066                                      __CFG_LPBOR$OFF 0000  
                                            ??_atoi 0028                                              ??_main 0043  
                              ?_GPIO_pin_Initialize 0070                                       _pinINIT_extra 07C1  
                                            _ANSELA 018C                                              _ANSELB 018D  
                                            _ANSELD 018F                                              _ANSELE 0190  
                                            _ANSELF 040C                                              _ANSELG 040D  
                                            _RC1REG 0199                                              _RC1STA 019D  
               __size_of_sendAcknowledgmentTOMotion 001D                                              i1l1414 077F  
                                            i1l1426 0028                                              u112_25 0043  
                                            i1l1438 004D                                              _TX1REG 019A  
                                            _TX1STA 019E                                      __CFG_PWRTE$OFF 0000  
                    __end_of_copyReceivedDataBuffer 0671                         __size_of_sendAcknowledgment 001E  
                                            ___wmul 0746                                              _strcat 0671  
                                            _strcpy 0762                               ??_GPIO_pin_Initialize 0020  
                          _mainReceivedDataPosition 0078                                    _applianceControl 0516  
                                      __pdataCOMMON 007A                                           ??_isdigit 0020  
                                    ?_pinINIT_extra 0070                             __end_of__initialization 00CC  
                                 i1errorsISR@errNum 0070                                      __pcstackCOMMON 0070  
                                      __pidataBANK0 07E5                                        __pidataBANK1 072A  
                                      __pidataBANK2 0697                                          __pbssBANK0 004D  
                                        __pbssBANK1 00BC                                  _MotionDatareceived 0076  
                                   __CFG_VCAPEN$OFF 0000                  __end_of_sendAcknowledgmentTOMotion 06F0  
                        _sendAcknowledgmentTOMotion 06D3                                  __size_of_errorsISR 001D  
                                        __pmaintext 00D0                                             ?___wmul 0020  
                                        __pintentry 0004                          sendAcknowledgment@Tx_count 0021  
                                   ??_pinINIT_extra 0020                                             ?_strcat 0020  
                                           ?_strcpy 0020                                        ?i1_errorsISR 0070  
                                           _SP1BRGH 019C                                             _SP1BRGL 019B  
       applianceControl@currentStateBufferPositions 0041                    applianceControl@chDimmerSpeedLSB 0031  
                  applianceControl@chDimmerSpeedMSB 0030                                     __size_of___wmul 001C  
                          _sendFinalBufferToGAteway 00BC                                     __CFG_STVREN$OFF 0000  
                                        _errorsMain 06F0                                             __ptext1 0762  
                                           __ptext2 0671                                             __ptext3 06D3  
                                           __ptext4 06F0                                             __ptext5 070D  
                                           __ptext6 0642                                             __ptext7 0516  
                                           __ptext8 06B5                                             __ptext9 05D7  
                                   __size_of_strcat 0026                                     __size_of_strcpy 001B  
                                           _isdigit 07D6                                        __size_of_isr 0087  
                                 __end_of_errorsISR 072A                sendAcknowledgment@currentStateBuffer 0023  
                                           main@man 004B                                             clrloop0 0FF4  
                              end_of_initialization 00CC                                             init_ram 07FA  
                                           initloop 07FB                                   _EUSART_Initialize 0796  
                                 _levelofDimmer_LSB 007A                                   _levelofDimmer_MSB 007B  
                          __end_of_applianceControl 05D7                  applianceControl@integerSwitchState 003F  
                                ?_EUSART_Initialize 0070                                 ??_EUSART_Initialize 0020  
                                         _PORTAbits 000C                                           _PORTFbits 028C  
                                         _TRISAbits 008C                              __size_of_clearAllPorts 0007  
                                         _TRISCbits 008E                                           _TRISFbits 030C  
                         __end_of_EUSART_Initialize 07AC            applianceControl@switchNumberStringBuffer 0039  
                        __end_of_sendAcknowledgment 06D3                         __end_of_GPIO_pin_Initialize 07C1  
                                    __end_of___wmul 0762                              _mainReceivedDataBuffer 00A0  
                                     __pidataCOMMON 0002                                         ?_errorsMain 0070  
                                    __end_of_strcat 0697                                      __end_of_strcpy 077D  
                               start_initialization 008D                                __size_ofi1_errorsISR 0019  
                                       __end_of_isr 008B                               applianceControl@F3830 0064  
                             applianceControl@F3832 0062                         ?_sendAcknowledgmentTOMotion 0070  
                                     _clearAllPorts 0FF9             copyReceivedDataBuffer@dataBufferCounter 0021  
                                          ??___wmul 0024                                         __pdataBANK0 005D  
                                       __pdataBANK1 00A0                                         __pdataBANK2 0120  
                                          ??_strcat 0022                                            ??_strcpy 0022  
                                  _mainDataReceived 0051                                         __pbssCOMMON 0076  
                                         ___latbits 0002                                       __pcstackBANK0 0020  
                                 errorsISR@Tx_count 0022                            ??_copyReceivedDataBuffer 0020  
                        __size_of_EUSART_Initialize 0016                                  errorsMain@Tx_count 0021  
                               __size_of_errorsMain 001D                                      ?_clearAllPorts 0070  
                                   errorsISR@errNum 0020                                    errorsMain@errNum 0023  
                                          _BAUD1CON 019F                               __end_of_pinINIT_extra 07D6  
                                          ?_isdigit 0070                 applianceControl@charFinalFrameState 0033  
                                         _errorsISR 070D  sendAcknowledgmentTOMotion@currentStateBufferMotion 0023  
           applianceControl@dimmerSpeedStringBuffer 003B                                      ___wmul@product 0024  
                                         clear_ram0 0FF3                                            _PIE1bits 0091  
                                 ?_applianceControl 002E                                  ??_applianceControl 0034  
                                 ___wmul@multiplier 0020                       applianceControl@charSwitchLSB 002E  
                     applianceControl@charSwitchMSB 0038                                          ?_errorsISR 0020  
                   __size_of_copyReceivedDataBuffer 002F                                     ??_clearAllPorts 0020  
                  _start_PWM_Generation_in_ISR_FLAG 004D                                   _allPeripheralInit 0FF0  
                                      ??_errorsMain 0020                                  _sendAcknowledgment 06B5  
                                       _isdigit$614 0020                                  ?_allPeripheralInit 0070  
                                        strcat@from 0020                                    __size_of_isdigit 000F  
                               ?_sendAcknowledgment 0070                                            __ptext10 07D6  
                                          __ptext11 0746                                            __ptext12 0FF0  
                                          __ptext13 0796                                            __ptext14 07AC  
                                          __ptext15 07C1                                            __ptext16 0FF9  
                                          __ptext18 077D                                 ??_allPeripheralInit 0020  
                   applianceControl@charSwitchSTATE 002F                                          strcpy@from 0020  
                             main@dataBufferCounter 0049                                       __size_of_atoi 006B  
                                     __size_of_main 0446                                  __end_of_errorsMain 070D  
                                _currentStateBuffer 0120                                          _RC1STAbits 019D  
                              ??_sendAcknowledgment 0020                           __end_of_allPeripheralInit 0FF3  
                                          int$flags 007E                                            atoi@sign 002A  
                            _copyReceivedDataBuffer 0642                                       ??i1_errorsISR 0072  
                            _tempReceivedDataBuffer 00B2                        __size_of_GPIO_pin_Initialize 0015  
                                    __pstringtext10 0000                                            isdigit@c 0021  
                                       ??_errorsISR 0022                                            intlevel1 0000  
                                 __CFG_CLKOUTEN$OFF 0000                 applianceControl@integerSwitchNumber 003D  
                                _parentalLockBuffer 005D                                       __pstringtext1 07F3  
                                     __pstringtext2 1000                                       __pstringtext3 1005  
                                     __pstringtext4 100A                                       __pstringtext5 100D  
                                     __pstringtext6 100F                                       __pstringtext7 1011  
                                     __pstringtext8 1013                                       __pstringtext9 1015  
                                          strcat@cp 0023                                            strcat@to 0024  
                                          strcpy@cp 0023                                            strcpy@to 0024  
                                        _TX1STAbits 019E                                 __end_ofi1_errorsISR 0796  
                               i1errorsISR@Tx_count 0072  
